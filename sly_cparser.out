Grammar:

Rule 0     S' -> optional_translation_unit
Rule 1     optional_translation_unit -> empty
Rule 2     optional_translation_unit -> translation_unit
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     translation_unit -> external_declaration
Rule 5     external_declaration -> static_assert
Rule 6     external_declaration -> ;
Rule 7     external_declaration -> pppragma_directive
Rule 8     external_declaration -> pp_directive
Rule 9     external_declaration -> declaration
Rule 10    external_declaration -> function_definition
Rule 11    static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
Rule 12    _1_222c22_unified_string_literal_optional -> , unified_string_literal
Rule 13    _1_222c22_unified_string_literal_optional -> <empty>
Rule 14    pp_directive -> PPHASH
Rule 15    pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN
Rule 16    pppragma_directive -> PPPRAGMA PPPRAGMASTR
Rule 17    pppragma_directive -> PPPRAGMA
Rule 18    pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat
Rule 19    _2_pppragma_directive_repeat -> _2_pppragma_directive_items
Rule 20    _2_pppragma_directive_repeat -> <empty>
Rule 21    _2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item
Rule 22    _2_pppragma_directive_items -> _2_pppragma_directive_item
Rule 23    _2_pppragma_directive_item -> pppragma_directive
Rule 24    function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement
Rule 25    function_definition -> id_declarator declaration_list_opt compound_statement
Rule 26    statement -> static_assert
Rule 27    statement -> pppragma_directive
Rule 28    statement -> jump_statement
Rule 29    statement -> iteration_statement
Rule 30    statement -> selection_statement
Rule 31    statement -> compound_statement
Rule 32    statement -> expression_statement
Rule 33    statement -> labeled_statement
Rule 34    pragmacomp_or_statement -> statement
Rule 35    pragmacomp_or_statement -> pppragma_directive_list statement
Rule 36    decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt
Rule 37    decl_body -> declaration_specifiers init_declarator_list_opt
Rule 38    declaration -> decl_body ;
Rule 39    declaration_list -> declaration _3_declaration_repeat
Rule 40    _3_declaration_repeat -> _3_declaration_items
Rule 41    _3_declaration_repeat -> <empty>
Rule 42    _3_declaration_items -> _3_declaration_items _3_declaration_item
Rule 43    _3_declaration_items -> _3_declaration_item
Rule 44    _3_declaration_item -> declaration
Rule 45    declaration_list_opt -> declaration_list
Rule 46    declaration_list_opt -> empty
Rule 47    declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt
Rule 48    declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt
Rule 49    declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt
Rule 50    declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt
Rule 51    declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt
Rule 52    declaration_specifiers_no_type_opt -> declaration_specifiers_no_type
Rule 53    declaration_specifiers_no_type_opt -> empty
Rule 54    declaration_specifiers -> declaration_specifiers alignment_specifier
Rule 55    declaration_specifiers -> declaration_specifiers_no_type type_specifier
Rule 56    declaration_specifiers -> type_specifier
Rule 57    declaration_specifiers -> declaration_specifiers type_specifier_no_typeid
Rule 58    declaration_specifiers -> declaration_specifiers function_specifier
Rule 59    declaration_specifiers -> declaration_specifiers storage_class_specifier
Rule 60    declaration_specifiers -> declaration_specifiers type_qualifier
Rule 61    storage_class_specifier -> THREAD_LOCAL_
Rule 62    storage_class_specifier -> TYPEDEF
Rule 63    storage_class_specifier -> EXTERN
Rule 64    storage_class_specifier -> STATIC
Rule 65    storage_class_specifier -> REGISTER
Rule 66    storage_class_specifier -> AUTO
Rule 67    function_specifier -> NORETURN_
Rule 68    function_specifier -> INLINE
Rule 69    type_specifier_no_typeid -> INT128
Rule 70    type_specifier_no_typeid -> UNSIGNED
Rule 71    type_specifier_no_typeid -> SIGNED
Rule 72    type_specifier_no_typeid -> COMPLEX_
Rule 73    type_specifier_no_typeid -> DOUBLE
Rule 74    type_specifier_no_typeid -> FLOAT
Rule 75    type_specifier_no_typeid -> LONG
Rule 76    type_specifier_no_typeid -> INT
Rule 77    type_specifier_no_typeid -> SHORT
Rule 78    type_specifier_no_typeid -> CHAR
Rule 79    type_specifier_no_typeid -> BOOL_
Rule 80    type_specifier_no_typeid -> VOID
Rule 81    type_specifier -> atomic_specifier
Rule 82    type_specifier -> type_specifier_no_typeid
Rule 83    type_specifier -> struct_or_union_specifier
Rule 84    type_specifier -> enum_specifier
Rule 85    type_specifier -> typedef_name
Rule 86    atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN
Rule 87    type_qualifier -> ATOMIC_
Rule 88    type_qualifier -> VOLATILE
Rule 89    type_qualifier -> RESTRICT
Rule 90    type_qualifier -> CONST
Rule 91    init_declarator_list -> init_declarator _4_222c22_init_declarator_repeat
Rule 92    _4_222c22_init_declarator_repeat -> _4_222c22_init_declarator_items
Rule 93    _4_222c22_init_declarator_repeat -> <empty>
Rule 94    _4_222c22_init_declarator_items -> _4_222c22_init_declarator_items _4_222c22_init_declarator_item
Rule 95    _4_222c22_init_declarator_items -> _4_222c22_init_declarator_item
Rule 96    _4_222c22_init_declarator_item -> , init_declarator
Rule 97    init_declarator_list_opt -> init_declarator_list
Rule 98    init_declarator_list_opt -> empty
Rule 99    init_declarator -> declarator _5_EQUALS_initializer_optional
Rule 100   _5_EQUALS_initializer_optional -> EQUALS initializer
Rule 101   _5_EQUALS_initializer_optional -> <empty>
Rule 102   id_init_declarator_list -> id_init_declarator_list , init_declarator
Rule 103   id_init_declarator_list -> id_init_declarator
Rule 104   id_init_declarator_list_opt -> id_init_declarator_list
Rule 105   id_init_declarator_list_opt -> empty
Rule 106   id_init_declarator -> id_declarator _6_EQUALS_initializer_optional
Rule 107   _6_EQUALS_initializer_optional -> EQUALS initializer
Rule 108   _6_EQUALS_initializer_optional -> <empty>
Rule 109   specifier_qualifier_list -> specifier_qualifier_list alignment_specifier
Rule 110   specifier_qualifier_list -> alignment_specifier
Rule 111   specifier_qualifier_list -> type_qualifier_list type_specifier
Rule 112   specifier_qualifier_list -> type_specifier
Rule 113   specifier_qualifier_list -> specifier_qualifier_list type_qualifier
Rule 114   specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid
Rule 115   struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
Rule 116   _7_struct_declaration_list_optional -> struct_declaration_list
Rule 117   _7_struct_declaration_list_optional -> <empty>
Rule 118   struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
Rule 119   _8_struct_declaration_list_optional -> struct_declaration_list
Rule 120   _8_struct_declaration_list_optional -> <empty>
Rule 121   struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close
Rule 122   _9_struct_declaration_list_optional -> struct_declaration_list
Rule 123   _9_struct_declaration_list_optional -> <empty>
Rule 124   struct_or_union_specifier -> struct_or_union TYPEID
Rule 125   struct_or_union_specifier -> struct_or_union ID
Rule 126   struct_or_union -> UNION
Rule 127   struct_or_union -> STRUCT
Rule 128   struct_declaration_list -> struct_declaration _10_struct_declaration_repeat
Rule 129   _10_struct_declaration_repeat -> _10_struct_declaration_items
Rule 130   _10_struct_declaration_repeat -> <empty>
Rule 131   _10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item
Rule 132   _10_struct_declaration_items -> _10_struct_declaration_item
Rule 133   _10_struct_declaration_item -> struct_declaration
Rule 134   struct_declaration -> pppragma_directive
Rule 135   struct_declaration -> ;
Rule 136   struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ;
Rule 137   struct_declarator_list -> struct_declarator _11_222c22_struct_declarator_repeat
Rule 138   _11_222c22_struct_declarator_repeat -> _11_222c22_struct_declarator_items
Rule 139   _11_222c22_struct_declarator_repeat -> <empty>
Rule 140   _11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_items _11_222c22_struct_declarator_item
Rule 141   _11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_item
Rule 142   _11_222c22_struct_declarator_item -> , struct_declarator
Rule 143   struct_declarator_list_opt -> struct_declarator_list
Rule 144   struct_declarator_list_opt -> empty
Rule 145   struct_declarator -> : constant_expression
Rule 146   struct_declarator -> declarator : constant_expression
Rule 147   struct_declarator -> declarator
Rule 148   enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close
Rule 149   enum_specifier -> ENUM ID brace_open enumerator_list brace_close
Rule 150   enum_specifier -> ENUM brace_open enumerator_list brace_close
Rule 151   enum_specifier -> ENUM TYPEID
Rule 152   enum_specifier -> ENUM ID
Rule 153   enumerator_list -> enumerator_list , enumerator
Rule 154   enumerator_list -> enumerator_list ,
Rule 155   enumerator_list -> enumerator
Rule 156   alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN
Rule 157   alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN
Rule 158   enumerator -> ID _12_EQUALS_constant_expression_optional
Rule 159   _12_EQUALS_constant_expression_optional -> EQUALS constant_expression
Rule 160   _12_EQUALS_constant_expression_optional -> <empty>
Rule 161   declarator -> typeid_declarator
Rule 162   declarator -> id_declarator
Rule 163   id_declarator -> pointer direct_id_declarator
Rule 164   id_declarator -> direct_id_declarator
Rule 165   typeid_declarator -> pointer direct_typeid_declarator
Rule 166   typeid_declarator -> direct_typeid_declarator
Rule 167   typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator
Rule 168   typeid_noparen_declarator -> direct_typeid_noparen_declarator
Rule 169   direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN
Rule 170   direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN
Rule 171   direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 172   direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 173   direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 174   direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 175   direct_id_declarator -> LPAREN id_declarator RPAREN
Rule 176   direct_id_declarator -> ID
Rule 177   direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN
Rule 178   direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN
Rule 179   direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 180   direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 181   direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 182   direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 183   direct_typeid_declarator -> LPAREN typeid_declarator RPAREN
Rule 184   direct_typeid_declarator -> TYPEID
Rule 185   direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
Rule 186   direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
Rule 187   direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 188   direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 189   direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 190   direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 191   direct_typeid_noparen_declarator -> TYPEID
Rule 192   pointer -> TIMES type_qualifier_list_opt pointer  [precedence=left, level=10]
Rule 193   pointer -> TIMES type_qualifier_list_opt  [precedence=left, level=10]
Rule 194   type_qualifier_list -> type_qualifier _13_type_qualifier_repeat
Rule 195   _13_type_qualifier_repeat -> _13_type_qualifier_items
Rule 196   _13_type_qualifier_repeat -> <empty>
Rule 197   _13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item
Rule 198   _13_type_qualifier_items -> _13_type_qualifier_item
Rule 199   _13_type_qualifier_item -> type_qualifier
Rule 200   type_qualifier_list_opt -> type_qualifier_list
Rule 201   type_qualifier_list_opt -> empty
Rule 202   parameter_type_list -> parameter_list , ELLIPSIS
Rule 203   parameter_type_list -> parameter_list
Rule 204   parameter_type_list_opt -> parameter_type_list
Rule 205   parameter_type_list_opt -> empty
Rule 206   parameter_list -> parameter_declaration _14_222c22_parameter_declaration_repeat
Rule 207   _14_222c22_parameter_declaration_repeat -> _14_222c22_parameter_declaration_items
Rule 208   _14_222c22_parameter_declaration_repeat -> <empty>
Rule 209   _14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_items _14_222c22_parameter_declaration_item
Rule 210   _14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_item
Rule 211   _14_222c22_parameter_declaration_item -> , parameter_declaration
Rule 212   parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 213   parameter_declaration -> declaration_specifiers typeid_noparen_declarator
Rule 214   parameter_declaration -> declaration_specifiers id_declarator
Rule 215   identifier_list -> identifier _15_222c22_identifier_repeat
Rule 216   _15_222c22_identifier_repeat -> _15_222c22_identifier_items
Rule 217   _15_222c22_identifier_repeat -> <empty>
Rule 218   _15_222c22_identifier_items -> _15_222c22_identifier_items _15_222c22_identifier_item
Rule 219   _15_222c22_identifier_items -> _15_222c22_identifier_item
Rule 220   _15_222c22_identifier_item -> , identifier
Rule 221   identifier_list_opt -> identifier_list
Rule 222   identifier_list_opt -> empty
Rule 223   initializer -> brace_open initializer_list , brace_close
Rule 224   initializer -> brace_open initializer_list_opt brace_close
Rule 225   initializer -> assignment_expression
Rule 226   initializer_list -> designation_opt initializer _16_222c22_designation_opt_initializer_repeat
Rule 227   _16_222c22_designation_opt_initializer_repeat -> _16_222c22_designation_opt_initializer_items
Rule 228   _16_222c22_designation_opt_initializer_repeat -> <empty>
Rule 229   _16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_items _16_222c22_designation_opt_initializer_item
Rule 230   _16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_item
Rule 231   _16_222c22_designation_opt_initializer_item -> , designation_opt initializer
Rule 232   initializer_list_opt -> initializer_list
Rule 233   initializer_list_opt -> empty
Rule 234   designation -> designator_list EQUALS
Rule 235   designation_opt -> designation
Rule 236   designation_opt -> empty
Rule 237   designator_list -> designator _17_designator_repeat
Rule 238   _17_designator_repeat -> _17_designator_items
Rule 239   _17_designator_repeat -> <empty>
Rule 240   _17_designator_items -> _17_designator_items _17_designator_item
Rule 241   _17_designator_items -> _17_designator_item
Rule 242   _17_designator_item -> designator
Rule 243   designator -> . identifier
Rule 244   designator -> LBRACKET constant_expression RBRACKET
Rule 245   type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 246   abstract_declarator -> direct_abstract_declarator
Rule 247   abstract_declarator -> pointer direct_abstract_declarator
Rule 248   abstract_declarator -> pointer
Rule 249   abstract_declarator_opt -> abstract_declarator
Rule 250   abstract_declarator_opt -> empty
Rule 251   direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 252   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 253   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 254   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 255   direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 256   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 257   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 258   block_item -> statement
Rule 259   block_item -> declaration
Rule 260   block_item_list -> block_item_list block_item
Rule 261   block_item_list -> block_item
Rule 262   block_item_list_opt -> block_item_list
Rule 263   block_item_list_opt -> empty
Rule 264   compound_statement -> brace_open block_item_list_opt brace_close
Rule 265   labeled_statement -> DEFAULT : pragmacomp_or_statement
Rule 266   labeled_statement -> CASE constant_expression : pragmacomp_or_statement
Rule 267   labeled_statement -> ID : pragmacomp_or_statement
Rule 268   selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement
Rule 269   selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
Rule 270   selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement
Rule 271   iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
Rule 272   iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
Rule 273   iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
Rule 274   iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement
Rule 275   jump_statement -> RETURN ;
Rule 276   jump_statement -> RETURN expression ;
Rule 277   jump_statement -> CONTINUE ;
Rule 278   jump_statement -> BREAK ;
Rule 279   jump_statement -> GOTO ID ;
Rule 280   expression_statement -> expression_opt ;
Rule 281   expression -> expression , assignment_expression
Rule 282   expression -> assignment_expression
Rule 283   expression_opt -> expression
Rule 284   expression_opt -> empty
Rule 285   typedef_name -> TYPEID
Rule 286   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 287   assignment_expression -> conditional_expression
Rule 288   assignment_expression -> LPAREN compound_statement RPAREN
Rule 289   assignment_expression_opt -> assignment_expression
Rule 290   assignment_expression_opt -> empty
Rule 291   assignment_operator -> OREQUAL
Rule 292   assignment_operator -> ANDEQUAL
Rule 293   assignment_operator -> RSHIFTEQUAL
Rule 294   assignment_operator -> LSHIFTEQUAL
Rule 295   assignment_operator -> MINUSEQUAL
Rule 296   assignment_operator -> PLUSEQUAL
Rule 297   assignment_operator -> MODEQUAL
Rule 298   assignment_operator -> DIVEQUAL
Rule 299   assignment_operator -> TIMESEQUAL
Rule 300   assignment_operator -> XOREQUAL
Rule 301   assignment_operator -> EQUALS
Rule 302   constant_expression -> conditional_expression
Rule 303   conditional_expression -> binary_expression CONDOP expression : conditional_expression
Rule 304   conditional_expression -> binary_expression
Rule 305   binary_expression -> binary_expression LOR binary_expression  [precedence=left, level=1]
Rule 306   binary_expression -> binary_expression LAND binary_expression  [precedence=left, level=2]
Rule 307   binary_expression -> binary_expression XOR binary_expression  [precedence=left, level=4]
Rule 308   binary_expression -> binary_expression OR binary_expression  [precedence=left, level=3]
Rule 309   binary_expression -> binary_expression AND binary_expression  [precedence=left, level=5]
Rule 310   binary_expression -> binary_expression NE binary_expression  [precedence=left, level=6]
Rule 311   binary_expression -> binary_expression EQ binary_expression  [precedence=left, level=6]
Rule 312   binary_expression -> binary_expression GT binary_expression  [precedence=left, level=7]
Rule 313   binary_expression -> binary_expression GE binary_expression  [precedence=left, level=7]
Rule 314   binary_expression -> binary_expression LE binary_expression  [precedence=left, level=7]
Rule 315   binary_expression -> binary_expression LT binary_expression  [precedence=left, level=7]
Rule 316   binary_expression -> binary_expression LSHIFT binary_expression  [precedence=left, level=8]
Rule 317   binary_expression -> binary_expression RSHIFT binary_expression  [precedence=left, level=8]
Rule 318   binary_expression -> binary_expression MINUS binary_expression  [precedence=left, level=9]
Rule 319   binary_expression -> binary_expression PLUS binary_expression  [precedence=left, level=9]
Rule 320   binary_expression -> binary_expression MOD binary_expression  [precedence=left, level=10]
Rule 321   binary_expression -> binary_expression DIVIDE binary_expression  [precedence=left, level=10]
Rule 322   binary_expression -> binary_expression TIMES binary_expression  [precedence=left, level=10]
Rule 323   binary_expression -> cast_expression
Rule 324   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 325   cast_expression -> unary_expression
Rule 326   unary_expression -> ALIGNOF_ LPAREN type_name RPAREN
Rule 327   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 328   unary_expression -> SIZEOF unary_expression
Rule 329   unary_expression -> unary_operator cast_expression
Rule 330   unary_expression -> MINUSMINUS unary_expression
Rule 331   unary_expression -> PLUSPLUS unary_expression
Rule 332   unary_expression -> postfix_expression
Rule 333   unary_operator -> LNOT
Rule 334   unary_operator -> NOT
Rule 335   unary_operator -> MINUS  [precedence=left, level=9]
Rule 336   unary_operator -> PLUS  [precedence=left, level=9]
Rule 337   unary_operator -> TIMES  [precedence=left, level=10]
Rule 338   unary_operator -> AND  [precedence=left, level=5]
Rule 339   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
Rule 340   _18_222c22_optional -> ,
Rule 341   _18_222c22_optional -> <empty>
Rule 342   postfix_expression -> postfix_expression MINUSMINUS
Rule 343   postfix_expression -> postfix_expression PLUSPLUS
Rule 344   postfix_expression -> postfix_expression ARROW TYPEID
Rule 345   postfix_expression -> postfix_expression ARROW ID
Rule 346   postfix_expression -> postfix_expression . TYPEID
Rule 347   postfix_expression -> postfix_expression . ID
Rule 348   postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
Rule 349   _19_argument_expression_list_optional -> argument_expression_list
Rule 350   _19_argument_expression_list_optional -> <empty>
Rule 351   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 352   postfix_expression -> primary_expression
Rule 353   primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
Rule 354   primary_expression -> LPAREN expression RPAREN
Rule 355   primary_expression -> unified_wstring_literal
Rule 356   primary_expression -> unified_string_literal
Rule 357   primary_expression -> constant
Rule 358   primary_expression -> identifier
Rule 359   offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET
Rule 360   offsetof_member_designator -> offsetof_member_designator . identifier
Rule 361   offsetof_member_designator -> identifier
Rule 362   argument_expression_list -> assignment_expression _20_222c22_assignment_expression_repeat
Rule 363   _20_222c22_assignment_expression_repeat -> _20_222c22_assignment_expression_items
Rule 364   _20_222c22_assignment_expression_repeat -> <empty>
Rule 365   _20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_items _20_222c22_assignment_expression_item
Rule 366   _20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_item
Rule 367   _20_222c22_assignment_expression_item -> , assignment_expression
Rule 368   identifier -> ID
Rule 369   constant -> U32CHAR_CONST
Rule 370   constant -> U16CHAR_CONST
Rule 371   constant -> U8CHAR_CONST
Rule 372   constant -> WCHAR_CONST
Rule 373   constant -> CHAR_CONST
Rule 374   constant -> HEX_FLOAT_CONST
Rule 375   constant -> FLOAT_CONST
Rule 376   constant -> INT_CONST_CHAR
Rule 377   constant -> INT_CONST_BIN
Rule 378   constant -> INT_CONST_HEX
Rule 379   constant -> INT_CONST_OCT
Rule 380   constant -> INT_CONST_DEC
Rule 381   unified_string_literal -> unified_string_literal STRING_LITERAL
Rule 382   unified_string_literal -> STRING_LITERAL
Rule 383   unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL
Rule 384   unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL
Rule 385   unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL
Rule 386   unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL
Rule 387   unified_wstring_literal -> U32STRING_LITERAL
Rule 388   unified_wstring_literal -> U16STRING_LITERAL
Rule 389   unified_wstring_literal -> U8STRING_LITERAL
Rule 390   unified_wstring_literal -> WSTRING_LITERAL
Rule 391   brace_open -> LBRACE
Rule 392   brace_close -> RBRACE
Rule 393   empty -> <empty>

Terminals, with rules where they appear:

,                    : 12 96 102 142 153 154 202 211 220 223 231 281 340 353 367
.                    : 243 346 347 360
:                    : 145 146 265 266 267 303
;                    : 6 38 135 136 271 272 272 273 275 276 277 278 279 280
ALIGNAS_             : 156 157
ALIGNOF_             : 326
AND                  : 309 338
ANDEQUAL             : 292
ARROW                : 344 345
ATOMIC_              : 86 87
AUTO                 : 66
BOOL_                : 79
BREAK                : 278
CASE                 : 266
CHAR                 : 78
CHAR_CONST           : 373
COMPLEX_             : 72
CONDOP               : 303
CONST                : 90
CONTINUE             : 277
DEFAULT              : 265
DIVEQUAL             : 298
DIVIDE               : 321
DO                   : 273
DOUBLE               : 73
ELLIPSIS             : 202
ELSE                 : 269
ENUM                 : 148 149 150 151 152
EQ                   : 311
EQUALS               : 100 107 159 234 301
EXTERN               : 63
FLOAT                : 74
FLOAT_CONST          : 375
FOR                  : 271 272
GE                   : 313
GOTO                 : 279
GT                   : 312
HEX_FLOAT_CONST      : 374
ID                   : 118 125 149 152 158 176 267 279 345 347 368
IF                   : 269 270
INLINE               : 68
INT                  : 76
INT128               : 69
INT_CONST_BIN        : 377
INT_CONST_CHAR       : 376
INT_CONST_DEC        : 380
INT_CONST_HEX        : 378
INT_CONST_OCT        : 379
LAND                 : 306
LBRACE               : 391
LBRACKET             : 171 172 173 174 179 180 181 182 187 188 189 190 244 253 254 255 256 351 359
LE                   : 314
LNOT                 : 333
LONG                 : 75
LOR                  : 305
LPAREN               : 11 15 86 156 157 169 170 175 177 178 183 185 186 251 252 257 268 269 270 271 272 273 274 288 324 326 327 339 348 353 354
LSHIFT               : 316
LSHIFTEQUAL          : 294
LT                   : 315
MINUS                : 318 335
MINUSEQUAL           : 295
MINUSMINUS           : 330 342
MOD                  : 320
MODEQUAL             : 297
NE                   : 310
NORETURN_            : 67
NOT                  : 334
OFFSETOF             : 353
OR                   : 308
OREQUAL              : 291
PLUS                 : 319 336
PLUSEQUAL            : 296
PLUSPLUS             : 331 343
PPHASH               : 14
PPPRAGMA             : 16 17
PPPRAGMASTR          : 16
PRAGMA_              : 15
RBRACE               : 392
RBRACKET             : 171 172 173 174 179 180 181 182 187 188 189 190 244 253 254 255 256 351 359
REGISTER             : 65
RESTRICT             : 89
RETURN               : 275 276
RPAREN               : 11 15 86 156 157 169 170 175 177 178 183 185 186 251 252 257 268 269 270 271 272 273 274 288 324 326 327 339 348 353 354
RSHIFT               : 317
RSHIFTEQUAL          : 293
SHORT                : 77
SIGNED               : 71
SIZEOF               : 327 328
STATIC               : 64 172 173 180 181 188 189
STATIC_ASSERT_       : 11
STRING_LITERAL       : 381 382
STRUCT               : 127
SWITCH               : 268
THREAD_LOCAL_        : 61
TIMES                : 171 179 187 192 193 253 254 322 337
TIMESEQUAL           : 299
TYPEDEF              : 62
TYPEID               : 115 124 148 151 184 191 285 344 346
U16CHAR_CONST        : 370
U16STRING_LITERAL    : 384 388
U32CHAR_CONST        : 369
U32STRING_LITERAL    : 383 387
U8CHAR_CONST         : 371
U8STRING_LITERAL     : 385 389
UNION                : 126
UNSIGNED             : 70
VOID                 : 80
VOLATILE             : 88
WCHAR_CONST          : 372
WHILE                : 273 274
WSTRING_LITERAL      : 386 390
XOR                  : 307
XOREQUAL             : 300
error                : 

Nonterminals, with rules where they appear:

_10_struct_declaration_item : 131 132
_10_struct_declaration_items : 129 131
_10_struct_declaration_repeat : 128
_11_222c22_struct_declarator_item : 140 141
_11_222c22_struct_declarator_items : 138 140
_11_222c22_struct_declarator_repeat : 137
_12_EQUALS_constant_expression_optional : 158
_13_type_qualifier_item : 197 198
_13_type_qualifier_items : 195 197
_13_type_qualifier_repeat : 194
_14_222c22_parameter_declaration_item : 209 210
_14_222c22_parameter_declaration_items : 207 209
_14_222c22_parameter_declaration_repeat : 206
_15_222c22_identifier_item : 218 219
_15_222c22_identifier_items : 216 218
_15_222c22_identifier_repeat : 215
_16_222c22_designation_opt_initializer_item : 229 230
_16_222c22_designation_opt_initializer_items : 227 229
_16_222c22_designation_opt_initializer_repeat : 226
_17_designator_item  : 240 241
_17_designator_items : 238 240
_17_designator_repeat : 237
_18_222c22_optional  : 339
_19_argument_expression_list_optional : 348
_1_222c22_unified_string_literal_optional : 11
_20_222c22_assignment_expression_item : 365 366
_20_222c22_assignment_expression_items : 363 365
_20_222c22_assignment_expression_repeat : 362
_2_pppragma_directive_item : 21 22
_2_pppragma_directive_items : 19 21
_2_pppragma_directive_repeat : 18
_3_declaration_item  : 42 43
_3_declaration_items : 40 42
_3_declaration_repeat : 39
_4_222c22_init_declarator_item : 94 95
_4_222c22_init_declarator_items : 92 94
_4_222c22_init_declarator_repeat : 91
_5_EQUALS_initializer_optional : 99
_6_EQUALS_initializer_optional : 106
_7_struct_declaration_list_optional : 115
_8_struct_declaration_list_optional : 118
_9_struct_declaration_list_optional : 121
abstract_declarator  : 249 257
abstract_declarator_opt : 212 245
alignment_specifier  : 47 54 109 110
argument_expression_list : 349
assignment_expression : 172 173 180 181 188 189 225 281 282 286 289 362 367
assignment_expression_opt : 174 182 190 255 256
assignment_operator  : 286
atomic_specifier     : 48 81
binary_expression    : 303 304 305 305 306 306 307 307 308 308 309 309 310 310 311 311 312 312 313 313 314 314 315 315 316 316 317 317 318 318 319 319 320 320 321 321 322 322
block_item           : 260 261
block_item_list      : 260 262
block_item_list_opt  : 264
brace_close          : 115 118 121 148 149 150 223 224 264 339
brace_open           : 115 118 121 148 149 150 223 224 264 339
cast_expression      : 323 324 329
compound_statement   : 24 25 31 288
conditional_expression : 287 302 303
constant             : 357
constant_expression  : 11 145 146 156 159 244 266
decl_body            : 38
declaration          : 9 39 44 259 271
declaration_list     : 45
declaration_list_opt : 24 25
declaration_specifiers : 24 37 54 57 58 59 60 212 213 214
declaration_specifiers_no_type : 36 52 55
declaration_specifiers_no_type_opt : 47 48 49 50 51
declarator           : 99 146 147
designation          : 235
designation_opt      : 226 231
designator           : 237 242
designator_list      : 234
direct_abstract_declarator : 246 247 252 254 256
direct_id_declarator : 163 164 169 170 171 172 173 174
direct_typeid_declarator : 165 166 177 178 179 180 181 182
direct_typeid_noparen_declarator : 167 168 185 186 187 188 189 190
empty                : 1 46 53 98 105 144 201 205 222 233 236 250 263 284 290
enum_specifier       : 84
enumerator           : 153 155
enumerator_list      : 148 149 150 153 154
expression           : 268 269 270 273 274 276 281 283 303 351 354 359
expression_opt       : 271 271 272 272 272 280
expression_statement : 32
external_declaration : 3 4
function_definition  : 10
function_specifier   : 49 58
id_declarator        : 24 25 106 162 175 214
id_init_declarator   : 103
id_init_declarator_list : 102 104
id_init_declarator_list_opt : 36
identifier           : 215 220 243 358 360 361
identifier_list      : 221
identifier_list_opt  : 169 177 185
init_declarator      : 91 96 102
init_declarator_list : 97
init_declarator_list_opt : 37
initializer          : 100 107 226 231
initializer_list     : 223 232 339
initializer_list_opt : 224
iteration_statement  : 29
jump_statement       : 28
labeled_statement    : 33
offsetof_member_designator : 353 359 360
optional_translation_unit : 0
parameter_declaration : 206 211
parameter_list       : 202 203
parameter_type_list  : 170 178 186 204
parameter_type_list_opt : 251 252
pointer              : 163 165 167 192 247 248
postfix_expression   : 332 342 343 344 345 346 347 348 351
pp_directive         : 8
pppragma_directive   : 7 18 23 27 134
pppragma_directive_list : 35
pragmacomp_or_statement : 265 266 267 268 269 270 271 272 273 274
primary_expression   : 352
selection_statement  : 30
specifier_qualifier_list : 109 113 114 136 245
statement            : 34 35 258 269
static_assert        : 5 26
storage_class_specifier : 50 59
struct_declaration   : 128 133
struct_declaration_list : 116 119 122
struct_declarator    : 137 142
struct_declarator_list : 143
struct_declarator_list_opt : 136
struct_or_union      : 115 118 121 124 125
struct_or_union_specifier : 83
translation_unit     : 2 3
type_name            : 86 157 324 326 327 339 353
type_qualifier       : 51 60 113 194 199
type_qualifier_list  : 111 172 180 188 200
type_qualifier_list_opt : 171 173 174 179 181 182 187 189 190 192 193 255
type_specifier       : 55 56 111 112
type_specifier_no_typeid : 57 82 114
typedef_name         : 85
typeid_declarator    : 161 183
typeid_noparen_declarator : 213
unary_expression     : 286 325 328 330 331
unary_operator       : 329
unified_string_literal : 12 15 356 381
unified_wstring_literal : 355 383 384 385 386


state 0

    (0) S' -> . optional_translation_unit
    (1) optional_translation_unit -> . empty
    (2) optional_translation_unit -> . translation_unit
    (393) empty -> .
    (3) translation_unit -> . translation_unit external_declaration
    (4) translation_unit -> . external_declaration
    (5) external_declaration -> . static_assert
    (6) external_declaration -> . ;
    (7) external_declaration -> . pppragma_directive
    (8) external_declaration -> . pp_directive
    (9) external_declaration -> . declaration
    (10) external_declaration -> . function_definition
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (14) pp_directive -> . PPHASH
    (38) declaration -> . decl_body ;
    (24) function_definition -> . declaration_specifiers id_declarator declaration_list_opt compound_statement
    (25) function_definition -> . id_declarator declaration_list_opt compound_statement
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    $end            reduce using rule 393 (empty -> .)
    ;               shift and go to state 6
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    PPHASH          shift and go to state 15
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 12
    ID              shift and go to state 34
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    optional_translation_unit      shift and go to state 1
    empty                          shift and go to state 2
    translation_unit               shift and go to state 3
    external_declaration           shift and go to state 4
    static_assert                  shift and go to state 5
    pppragma_directive             shift and go to state 7
    pp_directive                   shift and go to state 8
    declaration                    shift and go to state 9
    function_definition            shift and go to state 10
    decl_body                      shift and go to state 16
    declaration_specifiers         shift and go to state 17
    id_declarator                  shift and go to state 18
    declaration_specifiers_no_type shift and go to state 19
    alignment_specifier            shift and go to state 20
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    pointer                        shift and go to state 26
    direct_id_declarator           shift and go to state 27
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 1

    (0) S' -> optional_translation_unit .


state 2

    (1) optional_translation_unit -> empty .
    $end            reduce using rule 1 (optional_translation_unit -> empty .)


state 3

    (2) optional_translation_unit -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (5) external_declaration -> . static_assert
    (6) external_declaration -> . ;
    (7) external_declaration -> . pppragma_directive
    (8) external_declaration -> . pp_directive
    (9) external_declaration -> . declaration
    (10) external_declaration -> . function_definition
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (14) pp_directive -> . PPHASH
    (38) declaration -> . decl_body ;
    (24) function_definition -> . declaration_specifiers id_declarator declaration_list_opt compound_statement
    (25) function_definition -> . id_declarator declaration_list_opt compound_statement
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    $end            reduce using rule 2 (optional_translation_unit -> translation_unit .)
    ;               shift and go to state 6
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    PPHASH          shift and go to state 15
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 12
    ID              shift and go to state 34
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    external_declaration           shift and go to state 64
    static_assert                  shift and go to state 5
    pppragma_directive             shift and go to state 7
    pp_directive                   shift and go to state 8
    declaration                    shift and go to state 9
    function_definition            shift and go to state 10
    decl_body                      shift and go to state 16
    declaration_specifiers         shift and go to state 17
    id_declarator                  shift and go to state 18
    declaration_specifiers_no_type shift and go to state 19
    alignment_specifier            shift and go to state 20
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    pointer                        shift and go to state 26
    direct_id_declarator           shift and go to state 27
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 4

    (4) translation_unit -> external_declaration .
    ;               reduce using rule 4 (translation_unit -> external_declaration .)
    STATIC_ASSERT_  reduce using rule 4 (translation_unit -> external_declaration .)
    PRAGMA_         reduce using rule 4 (translation_unit -> external_declaration .)
    PPPRAGMA        reduce using rule 4 (translation_unit -> external_declaration .)
    PPHASH          reduce using rule 4 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 4 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 4 (translation_unit -> external_declaration .)
    ID              reduce using rule 4 (translation_unit -> external_declaration .)
    ALIGNAS_        reduce using rule 4 (translation_unit -> external_declaration .)
    ATOMIC_         reduce using rule 4 (translation_unit -> external_declaration .)
    NORETURN_       reduce using rule 4 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 4 (translation_unit -> external_declaration .)
    THREAD_LOCAL_   reduce using rule 4 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 4 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 4 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 4 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 4 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 4 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 4 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 4 (translation_unit -> external_declaration .)
    CONST           reduce using rule 4 (translation_unit -> external_declaration .)
    INT128          reduce using rule 4 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 4 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 4 (translation_unit -> external_declaration .)
    COMPLEX_        reduce using rule 4 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 4 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 4 (translation_unit -> external_declaration .)
    LONG            reduce using rule 4 (translation_unit -> external_declaration .)
    INT             reduce using rule 4 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 4 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 4 (translation_unit -> external_declaration .)
    BOOL_           reduce using rule 4 (translation_unit -> external_declaration .)
    VOID            reduce using rule 4 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 4 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 4 (translation_unit -> external_declaration .)
    UNION           reduce using rule 4 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 4 (translation_unit -> external_declaration .)
    $end            reduce using rule 4 (translation_unit -> external_declaration .)


state 5

    (5) external_declaration -> static_assert .
    ;               reduce using rule 5 (external_declaration -> static_assert .)
    STATIC_ASSERT_  reduce using rule 5 (external_declaration -> static_assert .)
    PRAGMA_         reduce using rule 5 (external_declaration -> static_assert .)
    PPPRAGMA        reduce using rule 5 (external_declaration -> static_assert .)
    PPHASH          reduce using rule 5 (external_declaration -> static_assert .)
    TIMES           reduce using rule 5 (external_declaration -> static_assert .)
    LPAREN          reduce using rule 5 (external_declaration -> static_assert .)
    ID              reduce using rule 5 (external_declaration -> static_assert .)
    ALIGNAS_        reduce using rule 5 (external_declaration -> static_assert .)
    ATOMIC_         reduce using rule 5 (external_declaration -> static_assert .)
    NORETURN_       reduce using rule 5 (external_declaration -> static_assert .)
    INLINE          reduce using rule 5 (external_declaration -> static_assert .)
    THREAD_LOCAL_   reduce using rule 5 (external_declaration -> static_assert .)
    TYPEDEF         reduce using rule 5 (external_declaration -> static_assert .)
    EXTERN          reduce using rule 5 (external_declaration -> static_assert .)
    STATIC          reduce using rule 5 (external_declaration -> static_assert .)
    REGISTER        reduce using rule 5 (external_declaration -> static_assert .)
    AUTO            reduce using rule 5 (external_declaration -> static_assert .)
    VOLATILE        reduce using rule 5 (external_declaration -> static_assert .)
    RESTRICT        reduce using rule 5 (external_declaration -> static_assert .)
    CONST           reduce using rule 5 (external_declaration -> static_assert .)
    INT128          reduce using rule 5 (external_declaration -> static_assert .)
    UNSIGNED        reduce using rule 5 (external_declaration -> static_assert .)
    SIGNED          reduce using rule 5 (external_declaration -> static_assert .)
    COMPLEX_        reduce using rule 5 (external_declaration -> static_assert .)
    DOUBLE          reduce using rule 5 (external_declaration -> static_assert .)
    FLOAT           reduce using rule 5 (external_declaration -> static_assert .)
    LONG            reduce using rule 5 (external_declaration -> static_assert .)
    INT             reduce using rule 5 (external_declaration -> static_assert .)
    SHORT           reduce using rule 5 (external_declaration -> static_assert .)
    CHAR            reduce using rule 5 (external_declaration -> static_assert .)
    BOOL_           reduce using rule 5 (external_declaration -> static_assert .)
    VOID            reduce using rule 5 (external_declaration -> static_assert .)
    ENUM            reduce using rule 5 (external_declaration -> static_assert .)
    TYPEID          reduce using rule 5 (external_declaration -> static_assert .)
    UNION           reduce using rule 5 (external_declaration -> static_assert .)
    STRUCT          reduce using rule 5 (external_declaration -> static_assert .)
    $end            reduce using rule 5 (external_declaration -> static_assert .)


state 6

    (6) external_declaration -> ; .
    ;               reduce using rule 6 (external_declaration -> ; .)
    STATIC_ASSERT_  reduce using rule 6 (external_declaration -> ; .)
    PRAGMA_         reduce using rule 6 (external_declaration -> ; .)
    PPPRAGMA        reduce using rule 6 (external_declaration -> ; .)
    PPHASH          reduce using rule 6 (external_declaration -> ; .)
    TIMES           reduce using rule 6 (external_declaration -> ; .)
    LPAREN          reduce using rule 6 (external_declaration -> ; .)
    ID              reduce using rule 6 (external_declaration -> ; .)
    ALIGNAS_        reduce using rule 6 (external_declaration -> ; .)
    ATOMIC_         reduce using rule 6 (external_declaration -> ; .)
    NORETURN_       reduce using rule 6 (external_declaration -> ; .)
    INLINE          reduce using rule 6 (external_declaration -> ; .)
    THREAD_LOCAL_   reduce using rule 6 (external_declaration -> ; .)
    TYPEDEF         reduce using rule 6 (external_declaration -> ; .)
    EXTERN          reduce using rule 6 (external_declaration -> ; .)
    STATIC          reduce using rule 6 (external_declaration -> ; .)
    REGISTER        reduce using rule 6 (external_declaration -> ; .)
    AUTO            reduce using rule 6 (external_declaration -> ; .)
    VOLATILE        reduce using rule 6 (external_declaration -> ; .)
    RESTRICT        reduce using rule 6 (external_declaration -> ; .)
    CONST           reduce using rule 6 (external_declaration -> ; .)
    INT128          reduce using rule 6 (external_declaration -> ; .)
    UNSIGNED        reduce using rule 6 (external_declaration -> ; .)
    SIGNED          reduce using rule 6 (external_declaration -> ; .)
    COMPLEX_        reduce using rule 6 (external_declaration -> ; .)
    DOUBLE          reduce using rule 6 (external_declaration -> ; .)
    FLOAT           reduce using rule 6 (external_declaration -> ; .)
    LONG            reduce using rule 6 (external_declaration -> ; .)
    INT             reduce using rule 6 (external_declaration -> ; .)
    SHORT           reduce using rule 6 (external_declaration -> ; .)
    CHAR            reduce using rule 6 (external_declaration -> ; .)
    BOOL_           reduce using rule 6 (external_declaration -> ; .)
    VOID            reduce using rule 6 (external_declaration -> ; .)
    ENUM            reduce using rule 6 (external_declaration -> ; .)
    TYPEID          reduce using rule 6 (external_declaration -> ; .)
    UNION           reduce using rule 6 (external_declaration -> ; .)
    STRUCT          reduce using rule 6 (external_declaration -> ; .)
    $end            reduce using rule 6 (external_declaration -> ; .)


state 7

    (7) external_declaration -> pppragma_directive .
    ;               reduce using rule 7 (external_declaration -> pppragma_directive .)
    STATIC_ASSERT_  reduce using rule 7 (external_declaration -> pppragma_directive .)
    PRAGMA_         reduce using rule 7 (external_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 7 (external_declaration -> pppragma_directive .)
    PPHASH          reduce using rule 7 (external_declaration -> pppragma_directive .)
    TIMES           reduce using rule 7 (external_declaration -> pppragma_directive .)
    LPAREN          reduce using rule 7 (external_declaration -> pppragma_directive .)
    ID              reduce using rule 7 (external_declaration -> pppragma_directive .)
    ALIGNAS_        reduce using rule 7 (external_declaration -> pppragma_directive .)
    ATOMIC_         reduce using rule 7 (external_declaration -> pppragma_directive .)
    NORETURN_       reduce using rule 7 (external_declaration -> pppragma_directive .)
    INLINE          reduce using rule 7 (external_declaration -> pppragma_directive .)
    THREAD_LOCAL_   reduce using rule 7 (external_declaration -> pppragma_directive .)
    TYPEDEF         reduce using rule 7 (external_declaration -> pppragma_directive .)
    EXTERN          reduce using rule 7 (external_declaration -> pppragma_directive .)
    STATIC          reduce using rule 7 (external_declaration -> pppragma_directive .)
    REGISTER        reduce using rule 7 (external_declaration -> pppragma_directive .)
    AUTO            reduce using rule 7 (external_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 7 (external_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 7 (external_declaration -> pppragma_directive .)
    CONST           reduce using rule 7 (external_declaration -> pppragma_directive .)
    INT128          reduce using rule 7 (external_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 7 (external_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 7 (external_declaration -> pppragma_directive .)
    COMPLEX_        reduce using rule 7 (external_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 7 (external_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 7 (external_declaration -> pppragma_directive .)
    LONG            reduce using rule 7 (external_declaration -> pppragma_directive .)
    INT             reduce using rule 7 (external_declaration -> pppragma_directive .)
    SHORT           reduce using rule 7 (external_declaration -> pppragma_directive .)
    CHAR            reduce using rule 7 (external_declaration -> pppragma_directive .)
    BOOL_           reduce using rule 7 (external_declaration -> pppragma_directive .)
    VOID            reduce using rule 7 (external_declaration -> pppragma_directive .)
    ENUM            reduce using rule 7 (external_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 7 (external_declaration -> pppragma_directive .)
    UNION           reduce using rule 7 (external_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 7 (external_declaration -> pppragma_directive .)
    $end            reduce using rule 7 (external_declaration -> pppragma_directive .)


state 8

    (8) external_declaration -> pp_directive .
    ;               reduce using rule 8 (external_declaration -> pp_directive .)
    STATIC_ASSERT_  reduce using rule 8 (external_declaration -> pp_directive .)
    PRAGMA_         reduce using rule 8 (external_declaration -> pp_directive .)
    PPPRAGMA        reduce using rule 8 (external_declaration -> pp_directive .)
    PPHASH          reduce using rule 8 (external_declaration -> pp_directive .)
    TIMES           reduce using rule 8 (external_declaration -> pp_directive .)
    LPAREN          reduce using rule 8 (external_declaration -> pp_directive .)
    ID              reduce using rule 8 (external_declaration -> pp_directive .)
    ALIGNAS_        reduce using rule 8 (external_declaration -> pp_directive .)
    ATOMIC_         reduce using rule 8 (external_declaration -> pp_directive .)
    NORETURN_       reduce using rule 8 (external_declaration -> pp_directive .)
    INLINE          reduce using rule 8 (external_declaration -> pp_directive .)
    THREAD_LOCAL_   reduce using rule 8 (external_declaration -> pp_directive .)
    TYPEDEF         reduce using rule 8 (external_declaration -> pp_directive .)
    EXTERN          reduce using rule 8 (external_declaration -> pp_directive .)
    STATIC          reduce using rule 8 (external_declaration -> pp_directive .)
    REGISTER        reduce using rule 8 (external_declaration -> pp_directive .)
    AUTO            reduce using rule 8 (external_declaration -> pp_directive .)
    VOLATILE        reduce using rule 8 (external_declaration -> pp_directive .)
    RESTRICT        reduce using rule 8 (external_declaration -> pp_directive .)
    CONST           reduce using rule 8 (external_declaration -> pp_directive .)
    INT128          reduce using rule 8 (external_declaration -> pp_directive .)
    UNSIGNED        reduce using rule 8 (external_declaration -> pp_directive .)
    SIGNED          reduce using rule 8 (external_declaration -> pp_directive .)
    COMPLEX_        reduce using rule 8 (external_declaration -> pp_directive .)
    DOUBLE          reduce using rule 8 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 8 (external_declaration -> pp_directive .)
    LONG            reduce using rule 8 (external_declaration -> pp_directive .)
    INT             reduce using rule 8 (external_declaration -> pp_directive .)
    SHORT           reduce using rule 8 (external_declaration -> pp_directive .)
    CHAR            reduce using rule 8 (external_declaration -> pp_directive .)
    BOOL_           reduce using rule 8 (external_declaration -> pp_directive .)
    VOID            reduce using rule 8 (external_declaration -> pp_directive .)
    ENUM            reduce using rule 8 (external_declaration -> pp_directive .)
    TYPEID          reduce using rule 8 (external_declaration -> pp_directive .)
    UNION           reduce using rule 8 (external_declaration -> pp_directive .)
    STRUCT          reduce using rule 8 (external_declaration -> pp_directive .)
    $end            reduce using rule 8 (external_declaration -> pp_directive .)


state 9

    (9) external_declaration -> declaration .
    ;               reduce using rule 9 (external_declaration -> declaration .)
    STATIC_ASSERT_  reduce using rule 9 (external_declaration -> declaration .)
    PRAGMA_         reduce using rule 9 (external_declaration -> declaration .)
    PPPRAGMA        reduce using rule 9 (external_declaration -> declaration .)
    PPHASH          reduce using rule 9 (external_declaration -> declaration .)
    TIMES           reduce using rule 9 (external_declaration -> declaration .)
    LPAREN          reduce using rule 9 (external_declaration -> declaration .)
    ID              reduce using rule 9 (external_declaration -> declaration .)
    ALIGNAS_        reduce using rule 9 (external_declaration -> declaration .)
    ATOMIC_         reduce using rule 9 (external_declaration -> declaration .)
    NORETURN_       reduce using rule 9 (external_declaration -> declaration .)
    INLINE          reduce using rule 9 (external_declaration -> declaration .)
    THREAD_LOCAL_   reduce using rule 9 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 9 (external_declaration -> declaration .)
    EXTERN          reduce using rule 9 (external_declaration -> declaration .)
    STATIC          reduce using rule 9 (external_declaration -> declaration .)
    REGISTER        reduce using rule 9 (external_declaration -> declaration .)
    AUTO            reduce using rule 9 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 9 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 9 (external_declaration -> declaration .)
    CONST           reduce using rule 9 (external_declaration -> declaration .)
    INT128          reduce using rule 9 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 9 (external_declaration -> declaration .)
    SIGNED          reduce using rule 9 (external_declaration -> declaration .)
    COMPLEX_        reduce using rule 9 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 9 (external_declaration -> declaration .)
    FLOAT           reduce using rule 9 (external_declaration -> declaration .)
    LONG            reduce using rule 9 (external_declaration -> declaration .)
    INT             reduce using rule 9 (external_declaration -> declaration .)
    SHORT           reduce using rule 9 (external_declaration -> declaration .)
    CHAR            reduce using rule 9 (external_declaration -> declaration .)
    BOOL_           reduce using rule 9 (external_declaration -> declaration .)
    VOID            reduce using rule 9 (external_declaration -> declaration .)
    ENUM            reduce using rule 9 (external_declaration -> declaration .)
    TYPEID          reduce using rule 9 (external_declaration -> declaration .)
    UNION           reduce using rule 9 (external_declaration -> declaration .)
    STRUCT          reduce using rule 9 (external_declaration -> declaration .)
    $end            reduce using rule 9 (external_declaration -> declaration .)


state 10

    (10) external_declaration -> function_definition .
    ;               reduce using rule 10 (external_declaration -> function_definition .)
    STATIC_ASSERT_  reduce using rule 10 (external_declaration -> function_definition .)
    PRAGMA_         reduce using rule 10 (external_declaration -> function_definition .)
    PPPRAGMA        reduce using rule 10 (external_declaration -> function_definition .)
    PPHASH          reduce using rule 10 (external_declaration -> function_definition .)
    TIMES           reduce using rule 10 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 10 (external_declaration -> function_definition .)
    ID              reduce using rule 10 (external_declaration -> function_definition .)
    ALIGNAS_        reduce using rule 10 (external_declaration -> function_definition .)
    ATOMIC_         reduce using rule 10 (external_declaration -> function_definition .)
    NORETURN_       reduce using rule 10 (external_declaration -> function_definition .)
    INLINE          reduce using rule 10 (external_declaration -> function_definition .)
    THREAD_LOCAL_   reduce using rule 10 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 10 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 10 (external_declaration -> function_definition .)
    STATIC          reduce using rule 10 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 10 (external_declaration -> function_definition .)
    AUTO            reduce using rule 10 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 10 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 10 (external_declaration -> function_definition .)
    CONST           reduce using rule 10 (external_declaration -> function_definition .)
    INT128          reduce using rule 10 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 10 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 10 (external_declaration -> function_definition .)
    COMPLEX_        reduce using rule 10 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 10 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 10 (external_declaration -> function_definition .)
    LONG            reduce using rule 10 (external_declaration -> function_definition .)
    INT             reduce using rule 10 (external_declaration -> function_definition .)
    SHORT           reduce using rule 10 (external_declaration -> function_definition .)
    CHAR            reduce using rule 10 (external_declaration -> function_definition .)
    BOOL_           reduce using rule 10 (external_declaration -> function_definition .)
    VOID            reduce using rule 10 (external_declaration -> function_definition .)
    ENUM            reduce using rule 10 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 10 (external_declaration -> function_definition .)
    UNION           reduce using rule 10 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 10 (external_declaration -> function_definition .)
    $end            reduce using rule 10 (external_declaration -> function_definition .)


state 11

    (11) static_assert -> STATIC_ASSERT_ . LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    LPAREN          shift and go to state 65


state 12

    (175) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 12
    ID              shift and go to state 34

    id_declarator                  shift and go to state 66
    pointer                        shift and go to state 26
    direct_id_declarator           shift and go to state 27

state 13

    (15) pppragma_directive -> PRAGMA_ . LPAREN unified_string_literal RPAREN
    LPAREN          shift and go to state 67


state 14

    (16) pppragma_directive -> PPPRAGMA . PPPRAGMASTR
    (17) pppragma_directive -> PPPRAGMA .
    PPPRAGMASTR     shift and go to state 68
    ;               reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    STATIC_ASSERT_  reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    PRAGMA_         reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMA        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    PPHASH          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    TIMES           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    LPAREN          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    ID              reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    ALIGNAS_        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    ATOMIC_         reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    NORETURN_       reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INLINE          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    THREAD_LOCAL_   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    TYPEDEF         reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    EXTERN          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    STATIC          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    REGISTER        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    AUTO            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    VOLATILE        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    RESTRICT        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    CONST           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT128          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    UNSIGNED        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    SIGNED          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    COMPLEX_        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    DOUBLE          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    FLOAT           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    LONG            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT             reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    SHORT           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    CHAR            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    BOOL_           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    VOID            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    ENUM            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    TYPEID          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    UNION           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    STRUCT          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    $end            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    RBRACE          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    RETURN          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    CONTINUE        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    BREAK           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    GOTO            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    FOR             reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    DO              reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    WHILE           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    SWITCH          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    IF              reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    DEFAULT         reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    CASE            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    LBRACE          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    ALIGNOF_        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    SIZEOF          reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    MINUSMINUS      reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    PLUSPLUS        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    LNOT            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    NOT             reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    MINUS           reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    PLUS            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    AND             reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    OFFSETOF        reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    U32STRING_LITERAL reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    U16STRING_LITERAL reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    U8STRING_LITERAL reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    WSTRING_LITERAL reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    STRING_LITERAL  reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    U32CHAR_CONST   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    U16CHAR_CONST   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    U8CHAR_CONST    reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    WCHAR_CONST     reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    CHAR_CONST      reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    HEX_FLOAT_CONST reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    FLOAT_CONST     reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_CHAR  reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_BIN   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_HEX   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_OCT   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_DEC   reduce using rule 17 (pppragma_directive -> PPPRAGMA .)
    ELSE            reduce using rule 17 (pppragma_directive -> PPPRAGMA .)


state 15

    (14) pp_directive -> PPHASH .
    ;               reduce using rule 14 (pp_directive -> PPHASH .)
    STATIC_ASSERT_  reduce using rule 14 (pp_directive -> PPHASH .)
    PRAGMA_         reduce using rule 14 (pp_directive -> PPHASH .)
    PPPRAGMA        reduce using rule 14 (pp_directive -> PPHASH .)
    PPHASH          reduce using rule 14 (pp_directive -> PPHASH .)
    TIMES           reduce using rule 14 (pp_directive -> PPHASH .)
    LPAREN          reduce using rule 14 (pp_directive -> PPHASH .)
    ID              reduce using rule 14 (pp_directive -> PPHASH .)
    ALIGNAS_        reduce using rule 14 (pp_directive -> PPHASH .)
    ATOMIC_         reduce using rule 14 (pp_directive -> PPHASH .)
    NORETURN_       reduce using rule 14 (pp_directive -> PPHASH .)
    INLINE          reduce using rule 14 (pp_directive -> PPHASH .)
    THREAD_LOCAL_   reduce using rule 14 (pp_directive -> PPHASH .)
    TYPEDEF         reduce using rule 14 (pp_directive -> PPHASH .)
    EXTERN          reduce using rule 14 (pp_directive -> PPHASH .)
    STATIC          reduce using rule 14 (pp_directive -> PPHASH .)
    REGISTER        reduce using rule 14 (pp_directive -> PPHASH .)
    AUTO            reduce using rule 14 (pp_directive -> PPHASH .)
    VOLATILE        reduce using rule 14 (pp_directive -> PPHASH .)
    RESTRICT        reduce using rule 14 (pp_directive -> PPHASH .)
    CONST           reduce using rule 14 (pp_directive -> PPHASH .)
    INT128          reduce using rule 14 (pp_directive -> PPHASH .)
    UNSIGNED        reduce using rule 14 (pp_directive -> PPHASH .)
    SIGNED          reduce using rule 14 (pp_directive -> PPHASH .)
    COMPLEX_        reduce using rule 14 (pp_directive -> PPHASH .)
    DOUBLE          reduce using rule 14 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 14 (pp_directive -> PPHASH .)
    LONG            reduce using rule 14 (pp_directive -> PPHASH .)
    INT             reduce using rule 14 (pp_directive -> PPHASH .)
    SHORT           reduce using rule 14 (pp_directive -> PPHASH .)
    CHAR            reduce using rule 14 (pp_directive -> PPHASH .)
    BOOL_           reduce using rule 14 (pp_directive -> PPHASH .)
    VOID            reduce using rule 14 (pp_directive -> PPHASH .)
    ENUM            reduce using rule 14 (pp_directive -> PPHASH .)
    TYPEID          reduce using rule 14 (pp_directive -> PPHASH .)
    UNION           reduce using rule 14 (pp_directive -> PPHASH .)
    STRUCT          reduce using rule 14 (pp_directive -> PPHASH .)
    $end            reduce using rule 14 (pp_directive -> PPHASH .)


state 16

    (38) declaration -> decl_body . ;
    ;               shift and go to state 69


state 17

    (24) function_definition -> declaration_specifiers . id_declarator declaration_list_opt compound_statement
    (37) decl_body -> declaration_specifiers . init_declarator_list_opt
    (54) declaration_specifiers -> declaration_specifiers . alignment_specifier
    (57) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (58) declaration_specifiers -> declaration_specifiers . function_specifier
    (59) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (60) declaration_specifiers -> declaration_specifiers . type_qualifier
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (97) init_declarator_list_opt -> . init_declarator_list
    (98) init_declarator_list_opt -> . empty
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (91) init_declarator_list -> . init_declarator _4_222c22_init_declarator_repeat
    (393) empty -> .
    (99) init_declarator -> . declarator _5_EQUALS_initializer_optional
    (161) declarator -> . typeid_declarator
    (162) declarator -> . id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    ALIGNAS_        shift and go to state 35
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 80
    ID              shift and go to state 34
    ;               reduce using rule 393 (empty -> .)
    TYPEID          shift and go to state 86

    id_declarator                  shift and go to state 70
    init_declarator_list_opt       shift and go to state 71
    alignment_specifier            shift and go to state 72
    type_specifier_no_typeid       shift and go to state 73
    function_specifier             shift and go to state 74
    storage_class_specifier        shift and go to state 75
    type_qualifier                 shift and go to state 76
    pointer                        shift and go to state 77
    direct_id_declarator           shift and go to state 27
    init_declarator_list           shift and go to state 78
    empty                          shift and go to state 79
    init_declarator                shift and go to state 82
    declarator                     shift and go to state 83
    typeid_declarator              shift and go to state 84
    direct_typeid_declarator       shift and go to state 85

state 18

    (25) function_definition -> id_declarator . declaration_list_opt compound_statement
    (45) declaration_list_opt -> . declaration_list
    (46) declaration_list_opt -> . empty
    (39) declaration_list -> . declaration _3_declaration_repeat
    (393) empty -> .
    (38) declaration -> . decl_body ;
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    LBRACE          reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    declaration_list_opt           shift and go to state 87
    declaration_list               shift and go to state 88
    empty                          shift and go to state 89
    declaration                    shift and go to state 90
    decl_body                      shift and go to state 16
    declaration_specifiers_no_type shift and go to state 19
    declaration_specifiers         shift and go to state 91
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 19

    (36) decl_body -> declaration_specifiers_no_type . id_init_declarator_list_opt
    (55) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (104) id_init_declarator_list_opt -> . id_init_declarator_list
    (105) id_init_declarator_list_opt -> . empty
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (102) id_init_declarator_list -> . id_init_declarator_list , init_declarator
    (103) id_init_declarator_list -> . id_init_declarator
    (393) empty -> .
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (106) id_init_declarator -> . id_declarator _6_EQUALS_initializer_optional
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    ;               reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 98
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 12
    ID              shift and go to state 34

    id_init_declarator_list_opt    shift and go to state 92
    type_specifier                 shift and go to state 93
    id_init_declarator_list        shift and go to state 94
    empty                          shift and go to state 95
    atomic_specifier               shift and go to state 96
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    id_init_declarator             shift and go to state 97
    struct_or_union                shift and go to state 59
    id_declarator                  shift and go to state 99
    pointer                        shift and go to state 26
    direct_id_declarator           shift and go to state 27

state 20

    (47) declaration_specifiers_no_type -> alignment_specifier . declaration_specifiers_no_type_opt
    (52) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (53) declaration_specifiers_no_type_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    INT128          reduce using rule 393 (empty -> .)
    UNSIGNED        reduce using rule 393 (empty -> .)
    SIGNED          reduce using rule 393 (empty -> .)
    COMPLEX_        reduce using rule 393 (empty -> .)
    DOUBLE          reduce using rule 393 (empty -> .)
    FLOAT           reduce using rule 393 (empty -> .)
    LONG            reduce using rule 393 (empty -> .)
    INT             reduce using rule 393 (empty -> .)
    SHORT           reduce using rule 393 (empty -> .)
    CHAR            reduce using rule 393 (empty -> .)
    BOOL_           reduce using rule 393 (empty -> .)
    VOID            reduce using rule 393 (empty -> .)
    ENUM            reduce using rule 393 (empty -> .)
    TYPEID          reduce using rule 393 (empty -> .)
    UNION           reduce using rule 393 (empty -> .)
    STRUCT          reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ;               reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type_opt shift and go to state 100
    declaration_specifiers_no_type shift and go to state 101
    empty                          shift and go to state 102
    atomic_specifier               shift and go to state 103
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25

state 21

    (56) declaration_specifiers -> type_specifier .
    ALIGNAS_        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    INT128          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    UNSIGNED        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    SIGNED          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    COMPLEX_        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    DOUBLE          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    FLOAT           reduce using rule 56 (declaration_specifiers -> type_specifier .)
    LONG            reduce using rule 56 (declaration_specifiers -> type_specifier .)
    INT             reduce using rule 56 (declaration_specifiers -> type_specifier .)
    SHORT           reduce using rule 56 (declaration_specifiers -> type_specifier .)
    CHAR            reduce using rule 56 (declaration_specifiers -> type_specifier .)
    BOOL_           reduce using rule 56 (declaration_specifiers -> type_specifier .)
    VOID            reduce using rule 56 (declaration_specifiers -> type_specifier .)
    NORETURN_       reduce using rule 56 (declaration_specifiers -> type_specifier .)
    INLINE          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    THREAD_LOCAL_   reduce using rule 56 (declaration_specifiers -> type_specifier .)
    TYPEDEF         reduce using rule 56 (declaration_specifiers -> type_specifier .)
    EXTERN          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    STATIC          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    REGISTER        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    AUTO            reduce using rule 56 (declaration_specifiers -> type_specifier .)
    ATOMIC_         reduce using rule 56 (declaration_specifiers -> type_specifier .)
    VOLATILE        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    RESTRICT        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    CONST           reduce using rule 56 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 56 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 56 (declaration_specifiers -> type_specifier .)
    TYPEID          reduce using rule 56 (declaration_specifiers -> type_specifier .)
    ;               reduce using rule 56 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 56 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 56 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 56 (declaration_specifiers -> type_specifier .)


state 22

    (82) type_specifier -> type_specifier_no_typeid .
    ALIGNAS_        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    INT128          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    SIGNED          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    COMPLEX_        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    DOUBLE          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    FLOAT           reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    LONG            reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    INT             reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    SHORT           reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    CHAR            reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    BOOL_           reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    VOID            reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    NORETURN_       reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    INLINE          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    THREAD_LOCAL_   reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    TYPEDEF         reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    EXTERN          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    STATIC          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    REGISTER        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    AUTO            reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    ATOMIC_         reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    VOLATILE        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    RESTRICT        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    CONST           reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    TIMES           reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    LPAREN          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    ID              reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    TYPEID          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    ;               reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    LBRACKET        reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    ,               reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    RPAREN          reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)
    :               reduce using rule 82 (type_specifier -> type_specifier_no_typeid .)


state 23

    (49) declaration_specifiers_no_type -> function_specifier . declaration_specifiers_no_type_opt
    (52) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (53) declaration_specifiers_no_type_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    INT128          reduce using rule 393 (empty -> .)
    UNSIGNED        reduce using rule 393 (empty -> .)
    SIGNED          reduce using rule 393 (empty -> .)
    COMPLEX_        reduce using rule 393 (empty -> .)
    DOUBLE          reduce using rule 393 (empty -> .)
    FLOAT           reduce using rule 393 (empty -> .)
    LONG            reduce using rule 393 (empty -> .)
    INT             reduce using rule 393 (empty -> .)
    SHORT           reduce using rule 393 (empty -> .)
    CHAR            reduce using rule 393 (empty -> .)
    BOOL_           reduce using rule 393 (empty -> .)
    VOID            reduce using rule 393 (empty -> .)
    ENUM            reduce using rule 393 (empty -> .)
    TYPEID          reduce using rule 393 (empty -> .)
    UNION           reduce using rule 393 (empty -> .)
    STRUCT          reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ;               reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    function_specifier             shift and go to state 23
    declaration_specifiers_no_type_opt shift and go to state 104
    declaration_specifiers_no_type shift and go to state 101
    empty                          shift and go to state 102
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 103
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25

state 24

    (50) declaration_specifiers_no_type -> storage_class_specifier . declaration_specifiers_no_type_opt
    (52) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (53) declaration_specifiers_no_type_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    INT128          reduce using rule 393 (empty -> .)
    UNSIGNED        reduce using rule 393 (empty -> .)
    SIGNED          reduce using rule 393 (empty -> .)
    COMPLEX_        reduce using rule 393 (empty -> .)
    DOUBLE          reduce using rule 393 (empty -> .)
    FLOAT           reduce using rule 393 (empty -> .)
    LONG            reduce using rule 393 (empty -> .)
    INT             reduce using rule 393 (empty -> .)
    SHORT           reduce using rule 393 (empty -> .)
    CHAR            reduce using rule 393 (empty -> .)
    BOOL_           reduce using rule 393 (empty -> .)
    VOID            reduce using rule 393 (empty -> .)
    ENUM            reduce using rule 393 (empty -> .)
    TYPEID          reduce using rule 393 (empty -> .)
    UNION           reduce using rule 393 (empty -> .)
    STRUCT          reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ;               reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    storage_class_specifier        shift and go to state 24
    declaration_specifiers_no_type_opt shift and go to state 105
    declaration_specifiers_no_type shift and go to state 101
    empty                          shift and go to state 102
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 103
    function_specifier             shift and go to state 23
    type_qualifier                 shift and go to state 25

state 25

    (51) declaration_specifiers_no_type -> type_qualifier . declaration_specifiers_no_type_opt
    (52) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (53) declaration_specifiers_no_type_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    INT128          reduce using rule 393 (empty -> .)
    UNSIGNED        reduce using rule 393 (empty -> .)
    SIGNED          reduce using rule 393 (empty -> .)
    COMPLEX_        reduce using rule 393 (empty -> .)
    DOUBLE          reduce using rule 393 (empty -> .)
    FLOAT           reduce using rule 393 (empty -> .)
    LONG            reduce using rule 393 (empty -> .)
    INT             reduce using rule 393 (empty -> .)
    SHORT           reduce using rule 393 (empty -> .)
    CHAR            reduce using rule 393 (empty -> .)
    BOOL_           reduce using rule 393 (empty -> .)
    VOID            reduce using rule 393 (empty -> .)
    ENUM            reduce using rule 393 (empty -> .)
    TYPEID          reduce using rule 393 (empty -> .)
    UNION           reduce using rule 393 (empty -> .)
    STRUCT          reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ;               reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier                 shift and go to state 25
    declaration_specifiers_no_type_opt shift and go to state 106
    declaration_specifiers_no_type shift and go to state 101
    empty                          shift and go to state 102
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 103
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24

state 26

    (163) id_declarator -> pointer . direct_id_declarator
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    LPAREN          shift and go to state 12
    ID              shift and go to state 34

    direct_id_declarator           shift and go to state 107

state 27

    (164) id_declarator -> direct_id_declarator .
    (169) direct_id_declarator -> direct_id_declarator . LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> direct_id_declarator . LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> direct_id_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    ALIGNAS_        reduce using rule 164 (id_declarator -> direct_id_declarator .)
    ATOMIC_         reduce using rule 164 (id_declarator -> direct_id_declarator .)
    NORETURN_       reduce using rule 164 (id_declarator -> direct_id_declarator .)
    INLINE          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    THREAD_LOCAL_   reduce using rule 164 (id_declarator -> direct_id_declarator .)
    TYPEDEF         reduce using rule 164 (id_declarator -> direct_id_declarator .)
    EXTERN          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    STATIC          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    REGISTER        reduce using rule 164 (id_declarator -> direct_id_declarator .)
    AUTO            reduce using rule 164 (id_declarator -> direct_id_declarator .)
    VOLATILE        reduce using rule 164 (id_declarator -> direct_id_declarator .)
    RESTRICT        reduce using rule 164 (id_declarator -> direct_id_declarator .)
    CONST           reduce using rule 164 (id_declarator -> direct_id_declarator .)
    INT128          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    UNSIGNED        reduce using rule 164 (id_declarator -> direct_id_declarator .)
    SIGNED          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    COMPLEX_        reduce using rule 164 (id_declarator -> direct_id_declarator .)
    DOUBLE          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    FLOAT           reduce using rule 164 (id_declarator -> direct_id_declarator .)
    LONG            reduce using rule 164 (id_declarator -> direct_id_declarator .)
    INT             reduce using rule 164 (id_declarator -> direct_id_declarator .)
    SHORT           reduce using rule 164 (id_declarator -> direct_id_declarator .)
    CHAR            reduce using rule 164 (id_declarator -> direct_id_declarator .)
    BOOL_           reduce using rule 164 (id_declarator -> direct_id_declarator .)
    VOID            reduce using rule 164 (id_declarator -> direct_id_declarator .)
    ENUM            reduce using rule 164 (id_declarator -> direct_id_declarator .)
    TYPEID          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    UNION           reduce using rule 164 (id_declarator -> direct_id_declarator .)
    STRUCT          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    LBRACE          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    RPAREN          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    EQUALS          reduce using rule 164 (id_declarator -> direct_id_declarator .)
    ,               reduce using rule 164 (id_declarator -> direct_id_declarator .)
    ;               reduce using rule 164 (id_declarator -> direct_id_declarator .)
    :               reduce using rule 164 (id_declarator -> direct_id_declarator .)
    LPAREN          shift and go to state 108
    LBRACKET        shift and go to state 109


state 28

    (48) declaration_specifiers_no_type -> atomic_specifier . declaration_specifiers_no_type_opt
    (81) type_specifier -> atomic_specifier .
    (52) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (53) declaration_specifiers_no_type_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! reduce/reduce conflict for ATOMIC_ resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for INT128 resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SIGNED resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for COMPLEX_ resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for LONG resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for INT resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SHORT resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for BOOL_ resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for VOID resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for TYPEID resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for ID resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for ; resolved using rule 81 (type_specifier -> atomic_specifier .)
  ! shift/reduce conflict for ALIGNAS_ resolved as shift
  ! shift/reduce conflict for ATOMIC_ resolved as shift
  ! shift/reduce conflict for NORETURN_ resolved as shift
  ! shift/reduce conflict for INLINE resolved as shift
  ! shift/reduce conflict for THREAD_LOCAL_ resolved as shift
  ! shift/reduce conflict for TYPEDEF resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
  ! shift/reduce conflict for RESTRICT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
    INT128          reduce using rule 81 (type_specifier -> atomic_specifier .)
    UNSIGNED        reduce using rule 81 (type_specifier -> atomic_specifier .)
    SIGNED          reduce using rule 81 (type_specifier -> atomic_specifier .)
    COMPLEX_        reduce using rule 81 (type_specifier -> atomic_specifier .)
    DOUBLE          reduce using rule 81 (type_specifier -> atomic_specifier .)
    FLOAT           reduce using rule 81 (type_specifier -> atomic_specifier .)
    LONG            reduce using rule 81 (type_specifier -> atomic_specifier .)
    INT             reduce using rule 81 (type_specifier -> atomic_specifier .)
    SHORT           reduce using rule 81 (type_specifier -> atomic_specifier .)
    CHAR            reduce using rule 81 (type_specifier -> atomic_specifier .)
    BOOL_           reduce using rule 81 (type_specifier -> atomic_specifier .)
    VOID            reduce using rule 81 (type_specifier -> atomic_specifier .)
    TIMES           reduce using rule 81 (type_specifier -> atomic_specifier .)
    LPAREN          reduce using rule 81 (type_specifier -> atomic_specifier .)
    ID              reduce using rule 81 (type_specifier -> atomic_specifier .)
    TYPEID          reduce using rule 81 (type_specifier -> atomic_specifier .)
    ;               reduce using rule 81 (type_specifier -> atomic_specifier .)
    LBRACKET        reduce using rule 81 (type_specifier -> atomic_specifier .)
    ,               reduce using rule 81 (type_specifier -> atomic_specifier .)
    RPAREN          reduce using rule 81 (type_specifier -> atomic_specifier .)
    ENUM            reduce using rule 393 (empty -> .)
    UNION           reduce using rule 393 (empty -> .)
    STRUCT          reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    atomic_specifier               shift and go to state 103
    declaration_specifiers_no_type_opt shift and go to state 110
    declaration_specifiers_no_type shift and go to state 101
    empty                          shift and go to state 102
    alignment_specifier            shift and go to state 20
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25

state 29

    (83) type_specifier -> struct_or_union_specifier .
    ALIGNAS_        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    INT128          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    COMPLEX_        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    BOOL_           reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    NORETURN_       reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    THREAD_LOCAL_   reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    ATOMIC_         reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 83 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 83 (type_specifier -> struct_or_union_specifier .)


state 30

    (84) type_specifier -> enum_specifier .
    ALIGNAS_        reduce using rule 84 (type_specifier -> enum_specifier .)
    INT128          reduce using rule 84 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 84 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 84 (type_specifier -> enum_specifier .)
    COMPLEX_        reduce using rule 84 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 84 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 84 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 84 (type_specifier -> enum_specifier .)
    INT             reduce using rule 84 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 84 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 84 (type_specifier -> enum_specifier .)
    BOOL_           reduce using rule 84 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 84 (type_specifier -> enum_specifier .)
    NORETURN_       reduce using rule 84 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 84 (type_specifier -> enum_specifier .)
    THREAD_LOCAL_   reduce using rule 84 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 84 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 84 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 84 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 84 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 84 (type_specifier -> enum_specifier .)
    ATOMIC_         reduce using rule 84 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 84 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 84 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 84 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 84 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 84 (type_specifier -> enum_specifier .)
    ID              reduce using rule 84 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 84 (type_specifier -> enum_specifier .)
    ;               reduce using rule 84 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 84 (type_specifier -> enum_specifier .)
    ,               reduce using rule 84 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 84 (type_specifier -> enum_specifier .)
    :               reduce using rule 84 (type_specifier -> enum_specifier .)


state 31

    (85) type_specifier -> typedef_name .
    ALIGNAS_        reduce using rule 85 (type_specifier -> typedef_name .)
    INT128          reduce using rule 85 (type_specifier -> typedef_name .)
    UNSIGNED        reduce using rule 85 (type_specifier -> typedef_name .)
    SIGNED          reduce using rule 85 (type_specifier -> typedef_name .)
    COMPLEX_        reduce using rule 85 (type_specifier -> typedef_name .)
    DOUBLE          reduce using rule 85 (type_specifier -> typedef_name .)
    FLOAT           reduce using rule 85 (type_specifier -> typedef_name .)
    LONG            reduce using rule 85 (type_specifier -> typedef_name .)
    INT             reduce using rule 85 (type_specifier -> typedef_name .)
    SHORT           reduce using rule 85 (type_specifier -> typedef_name .)
    CHAR            reduce using rule 85 (type_specifier -> typedef_name .)
    BOOL_           reduce using rule 85 (type_specifier -> typedef_name .)
    VOID            reduce using rule 85 (type_specifier -> typedef_name .)
    NORETURN_       reduce using rule 85 (type_specifier -> typedef_name .)
    INLINE          reduce using rule 85 (type_specifier -> typedef_name .)
    THREAD_LOCAL_   reduce using rule 85 (type_specifier -> typedef_name .)
    TYPEDEF         reduce using rule 85 (type_specifier -> typedef_name .)
    EXTERN          reduce using rule 85 (type_specifier -> typedef_name .)
    STATIC          reduce using rule 85 (type_specifier -> typedef_name .)
    REGISTER        reduce using rule 85 (type_specifier -> typedef_name .)
    AUTO            reduce using rule 85 (type_specifier -> typedef_name .)
    ATOMIC_         reduce using rule 85 (type_specifier -> typedef_name .)
    VOLATILE        reduce using rule 85 (type_specifier -> typedef_name .)
    RESTRICT        reduce using rule 85 (type_specifier -> typedef_name .)
    CONST           reduce using rule 85 (type_specifier -> typedef_name .)
    TIMES           reduce using rule 85 (type_specifier -> typedef_name .)
    LPAREN          reduce using rule 85 (type_specifier -> typedef_name .)
    ID              reduce using rule 85 (type_specifier -> typedef_name .)
    TYPEID          reduce using rule 85 (type_specifier -> typedef_name .)
    ;               reduce using rule 85 (type_specifier -> typedef_name .)
    LBRACKET        reduce using rule 85 (type_specifier -> typedef_name .)
    ,               reduce using rule 85 (type_specifier -> typedef_name .)
    RPAREN          reduce using rule 85 (type_specifier -> typedef_name .)
    :               reduce using rule 85 (type_specifier -> typedef_name .)


state 32

    (192) pointer -> TIMES . type_qualifier_list_opt pointer
    (193) pointer -> TIMES . type_qualifier_list_opt
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    TYPEID          reduce using rule 393 (empty -> .)
    LBRACKET        reduce using rule 393 (empty -> .)
    ,               reduce using rule 393 (empty -> .)
    RPAREN          reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 111
    type_qualifier_list            shift and go to state 112
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 33

    (64) storage_class_specifier -> STATIC .
    ALIGNAS_        reduce using rule 64 (storage_class_specifier -> STATIC .)
    ATOMIC_         reduce using rule 64 (storage_class_specifier -> STATIC .)
    NORETURN_       reduce using rule 64 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 64 (storage_class_specifier -> STATIC .)
    THREAD_LOCAL_   reduce using rule 64 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 64 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 64 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 64 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 64 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 64 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 64 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 64 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 64 (storage_class_specifier -> STATIC .)
    INT128          reduce using rule 64 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 64 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 64 (storage_class_specifier -> STATIC .)
    COMPLEX_        reduce using rule 64 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 64 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 64 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 64 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 64 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 64 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 64 (storage_class_specifier -> STATIC .)
    BOOL_           reduce using rule 64 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 64 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 64 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 64 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 64 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 64 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 64 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 64 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 64 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 64 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 64 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 64 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 64 (storage_class_specifier -> STATIC .)


state 34

    (176) direct_id_declarator -> ID .
    LPAREN          reduce using rule 176 (direct_id_declarator -> ID .)
    LBRACKET        reduce using rule 176 (direct_id_declarator -> ID .)
    ALIGNAS_        reduce using rule 176 (direct_id_declarator -> ID .)
    ATOMIC_         reduce using rule 176 (direct_id_declarator -> ID .)
    NORETURN_       reduce using rule 176 (direct_id_declarator -> ID .)
    INLINE          reduce using rule 176 (direct_id_declarator -> ID .)
    THREAD_LOCAL_   reduce using rule 176 (direct_id_declarator -> ID .)
    TYPEDEF         reduce using rule 176 (direct_id_declarator -> ID .)
    EXTERN          reduce using rule 176 (direct_id_declarator -> ID .)
    STATIC          reduce using rule 176 (direct_id_declarator -> ID .)
    REGISTER        reduce using rule 176 (direct_id_declarator -> ID .)
    AUTO            reduce using rule 176 (direct_id_declarator -> ID .)
    VOLATILE        reduce using rule 176 (direct_id_declarator -> ID .)
    RESTRICT        reduce using rule 176 (direct_id_declarator -> ID .)
    CONST           reduce using rule 176 (direct_id_declarator -> ID .)
    INT128          reduce using rule 176 (direct_id_declarator -> ID .)
    UNSIGNED        reduce using rule 176 (direct_id_declarator -> ID .)
    SIGNED          reduce using rule 176 (direct_id_declarator -> ID .)
    COMPLEX_        reduce using rule 176 (direct_id_declarator -> ID .)
    DOUBLE          reduce using rule 176 (direct_id_declarator -> ID .)
    FLOAT           reduce using rule 176 (direct_id_declarator -> ID .)
    LONG            reduce using rule 176 (direct_id_declarator -> ID .)
    INT             reduce using rule 176 (direct_id_declarator -> ID .)
    SHORT           reduce using rule 176 (direct_id_declarator -> ID .)
    CHAR            reduce using rule 176 (direct_id_declarator -> ID .)
    BOOL_           reduce using rule 176 (direct_id_declarator -> ID .)
    VOID            reduce using rule 176 (direct_id_declarator -> ID .)
    ENUM            reduce using rule 176 (direct_id_declarator -> ID .)
    TYPEID          reduce using rule 176 (direct_id_declarator -> ID .)
    UNION           reduce using rule 176 (direct_id_declarator -> ID .)
    STRUCT          reduce using rule 176 (direct_id_declarator -> ID .)
    LBRACE          reduce using rule 176 (direct_id_declarator -> ID .)
    RPAREN          reduce using rule 176 (direct_id_declarator -> ID .)
    EQUALS          reduce using rule 176 (direct_id_declarator -> ID .)
    ,               reduce using rule 176 (direct_id_declarator -> ID .)
    ;               reduce using rule 176 (direct_id_declarator -> ID .)
    :               reduce using rule 176 (direct_id_declarator -> ID .)


state 35

    (156) alignment_specifier -> ALIGNAS_ . LPAREN constant_expression RPAREN
    (157) alignment_specifier -> ALIGNAS_ . LPAREN type_name RPAREN
    LPAREN          shift and go to state 115


state 36

    (86) atomic_specifier -> ATOMIC_ . LPAREN type_name RPAREN
    (87) type_qualifier -> ATOMIC_ .
  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 116
    ALIGNAS_        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ATOMIC_         reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    NORETURN_       reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INLINE          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    THREAD_LOCAL_   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TYPEDEF         reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    EXTERN          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    STATIC          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    REGISTER        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    AUTO            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    VOLATILE        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    RESTRICT        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CONST           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT128          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    UNSIGNED        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SIGNED          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    COMPLEX_        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    DOUBLE          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    FLOAT           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LONG            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT             reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SHORT           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CHAR            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    BOOL_           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    VOID            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ENUM            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TYPEID          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    UNION           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    STRUCT          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TIMES           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ID              reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ;               reduce using rule 87 (type_qualifier -> ATOMIC_ .)


state 37

    (67) function_specifier -> NORETURN_ .
    ALIGNAS_        reduce using rule 67 (function_specifier -> NORETURN_ .)
    ATOMIC_         reduce using rule 67 (function_specifier -> NORETURN_ .)
    NORETURN_       reduce using rule 67 (function_specifier -> NORETURN_ .)
    INLINE          reduce using rule 67 (function_specifier -> NORETURN_ .)
    THREAD_LOCAL_   reduce using rule 67 (function_specifier -> NORETURN_ .)
    TYPEDEF         reduce using rule 67 (function_specifier -> NORETURN_ .)
    EXTERN          reduce using rule 67 (function_specifier -> NORETURN_ .)
    STATIC          reduce using rule 67 (function_specifier -> NORETURN_ .)
    REGISTER        reduce using rule 67 (function_specifier -> NORETURN_ .)
    AUTO            reduce using rule 67 (function_specifier -> NORETURN_ .)
    VOLATILE        reduce using rule 67 (function_specifier -> NORETURN_ .)
    RESTRICT        reduce using rule 67 (function_specifier -> NORETURN_ .)
    CONST           reduce using rule 67 (function_specifier -> NORETURN_ .)
    INT128          reduce using rule 67 (function_specifier -> NORETURN_ .)
    UNSIGNED        reduce using rule 67 (function_specifier -> NORETURN_ .)
    SIGNED          reduce using rule 67 (function_specifier -> NORETURN_ .)
    COMPLEX_        reduce using rule 67 (function_specifier -> NORETURN_ .)
    DOUBLE          reduce using rule 67 (function_specifier -> NORETURN_ .)
    FLOAT           reduce using rule 67 (function_specifier -> NORETURN_ .)
    LONG            reduce using rule 67 (function_specifier -> NORETURN_ .)
    INT             reduce using rule 67 (function_specifier -> NORETURN_ .)
    SHORT           reduce using rule 67 (function_specifier -> NORETURN_ .)
    CHAR            reduce using rule 67 (function_specifier -> NORETURN_ .)
    BOOL_           reduce using rule 67 (function_specifier -> NORETURN_ .)
    VOID            reduce using rule 67 (function_specifier -> NORETURN_ .)
    ENUM            reduce using rule 67 (function_specifier -> NORETURN_ .)
    TYPEID          reduce using rule 67 (function_specifier -> NORETURN_ .)
    UNION           reduce using rule 67 (function_specifier -> NORETURN_ .)
    STRUCT          reduce using rule 67 (function_specifier -> NORETURN_ .)
    TIMES           reduce using rule 67 (function_specifier -> NORETURN_ .)
    LPAREN          reduce using rule 67 (function_specifier -> NORETURN_ .)
    ID              reduce using rule 67 (function_specifier -> NORETURN_ .)
    ;               reduce using rule 67 (function_specifier -> NORETURN_ .)
    LBRACKET        reduce using rule 67 (function_specifier -> NORETURN_ .)
    ,               reduce using rule 67 (function_specifier -> NORETURN_ .)
    RPAREN          reduce using rule 67 (function_specifier -> NORETURN_ .)


state 38

    (68) function_specifier -> INLINE .
    ALIGNAS_        reduce using rule 68 (function_specifier -> INLINE .)
    ATOMIC_         reduce using rule 68 (function_specifier -> INLINE .)
    NORETURN_       reduce using rule 68 (function_specifier -> INLINE .)
    INLINE          reduce using rule 68 (function_specifier -> INLINE .)
    THREAD_LOCAL_   reduce using rule 68 (function_specifier -> INLINE .)
    TYPEDEF         reduce using rule 68 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 68 (function_specifier -> INLINE .)
    STATIC          reduce using rule 68 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 68 (function_specifier -> INLINE .)
    AUTO            reduce using rule 68 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 68 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 68 (function_specifier -> INLINE .)
    CONST           reduce using rule 68 (function_specifier -> INLINE .)
    INT128          reduce using rule 68 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 68 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 68 (function_specifier -> INLINE .)
    COMPLEX_        reduce using rule 68 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 68 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 68 (function_specifier -> INLINE .)
    LONG            reduce using rule 68 (function_specifier -> INLINE .)
    INT             reduce using rule 68 (function_specifier -> INLINE .)
    SHORT           reduce using rule 68 (function_specifier -> INLINE .)
    CHAR            reduce using rule 68 (function_specifier -> INLINE .)
    BOOL_           reduce using rule 68 (function_specifier -> INLINE .)
    VOID            reduce using rule 68 (function_specifier -> INLINE .)
    ENUM            reduce using rule 68 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 68 (function_specifier -> INLINE .)
    UNION           reduce using rule 68 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 68 (function_specifier -> INLINE .)
    TIMES           reduce using rule 68 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 68 (function_specifier -> INLINE .)
    ID              reduce using rule 68 (function_specifier -> INLINE .)
    ;               reduce using rule 68 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 68 (function_specifier -> INLINE .)
    ,               reduce using rule 68 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 68 (function_specifier -> INLINE .)


state 39

    (61) storage_class_specifier -> THREAD_LOCAL_ .
    ALIGNAS_        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    ATOMIC_         reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    NORETURN_       reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    INLINE          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    THREAD_LOCAL_   reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    TYPEDEF         reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    EXTERN          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    STATIC          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    REGISTER        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    AUTO            reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    VOLATILE        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    RESTRICT        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    CONST           reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    INT128          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    UNSIGNED        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    SIGNED          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    COMPLEX_        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    DOUBLE          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    FLOAT           reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    LONG            reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    INT             reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    SHORT           reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    CHAR            reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    BOOL_           reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    VOID            reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    ENUM            reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    TYPEID          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    UNION           reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    STRUCT          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    TIMES           reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    LPAREN          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    ID              reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    ;               reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    LBRACKET        reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    ,               reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)
    RPAREN          reduce using rule 61 (storage_class_specifier -> THREAD_LOCAL_ .)


state 40

    (62) storage_class_specifier -> TYPEDEF .
    ALIGNAS_        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ATOMIC_         reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    NORETURN_       reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    THREAD_LOCAL_   reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    INT128          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    COMPLEX_        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    BOOL_           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)


state 41

    (63) storage_class_specifier -> EXTERN .
    ALIGNAS_        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    ATOMIC_         reduce using rule 63 (storage_class_specifier -> EXTERN .)
    NORETURN_       reduce using rule 63 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    THREAD_LOCAL_   reduce using rule 63 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 63 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 63 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 63 (storage_class_specifier -> EXTERN .)
    INT128          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    COMPLEX_        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 63 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 63 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 63 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 63 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 63 (storage_class_specifier -> EXTERN .)
    BOOL_           reduce using rule 63 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 63 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 63 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 63 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 63 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 63 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 63 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 63 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 63 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 63 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 63 (storage_class_specifier -> EXTERN .)


state 42

    (65) storage_class_specifier -> REGISTER .
    ALIGNAS_        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    ATOMIC_         reduce using rule 65 (storage_class_specifier -> REGISTER .)
    NORETURN_       reduce using rule 65 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    THREAD_LOCAL_   reduce using rule 65 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 65 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 65 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 65 (storage_class_specifier -> REGISTER .)
    INT128          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    COMPLEX_        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 65 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 65 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 65 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 65 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 65 (storage_class_specifier -> REGISTER .)
    BOOL_           reduce using rule 65 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 65 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 65 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 65 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 65 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 65 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 65 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 65 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 65 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 65 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 65 (storage_class_specifier -> REGISTER .)


state 43

    (66) storage_class_specifier -> AUTO .
    ALIGNAS_        reduce using rule 66 (storage_class_specifier -> AUTO .)
    ATOMIC_         reduce using rule 66 (storage_class_specifier -> AUTO .)
    NORETURN_       reduce using rule 66 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 66 (storage_class_specifier -> AUTO .)
    THREAD_LOCAL_   reduce using rule 66 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 66 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 66 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 66 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 66 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 66 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 66 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 66 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 66 (storage_class_specifier -> AUTO .)
    INT128          reduce using rule 66 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 66 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 66 (storage_class_specifier -> AUTO .)
    COMPLEX_        reduce using rule 66 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 66 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 66 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 66 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 66 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 66 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 66 (storage_class_specifier -> AUTO .)
    BOOL_           reduce using rule 66 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 66 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 66 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 66 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 66 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 66 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 66 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 66 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 66 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 66 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 66 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 66 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 66 (storage_class_specifier -> AUTO .)


state 44

    (88) type_qualifier -> VOLATILE .
    ALIGNAS_        reduce using rule 88 (type_qualifier -> VOLATILE .)
    ATOMIC_         reduce using rule 88 (type_qualifier -> VOLATILE .)
    NORETURN_       reduce using rule 88 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 88 (type_qualifier -> VOLATILE .)
    THREAD_LOCAL_   reduce using rule 88 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 88 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 88 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 88 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 88 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 88 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 88 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 88 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT128          reduce using rule 88 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 88 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 88 (type_qualifier -> VOLATILE .)
    COMPLEX_        reduce using rule 88 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 88 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 88 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 88 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 88 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 88 (type_qualifier -> VOLATILE .)
    BOOL_           reduce using rule 88 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 88 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 88 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 88 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 88 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 88 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 88 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 88 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 88 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 88 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 88 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 88 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 88 (type_qualifier -> VOLATILE .)
    ALIGNOF_        reduce using rule 88 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 88 (type_qualifier -> VOLATILE .)
    MINUSMINUS      reduce using rule 88 (type_qualifier -> VOLATILE .)
    PLUSPLUS        reduce using rule 88 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 88 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 88 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 88 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 88 (type_qualifier -> VOLATILE .)
    AND             reduce using rule 88 (type_qualifier -> VOLATILE .)
    OFFSETOF        reduce using rule 88 (type_qualifier -> VOLATILE .)
    U32STRING_LITERAL reduce using rule 88 (type_qualifier -> VOLATILE .)
    U16STRING_LITERAL reduce using rule 88 (type_qualifier -> VOLATILE .)
    U8STRING_LITERAL reduce using rule 88 (type_qualifier -> VOLATILE .)
    WSTRING_LITERAL reduce using rule 88 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 88 (type_qualifier -> VOLATILE .)
    U32CHAR_CONST   reduce using rule 88 (type_qualifier -> VOLATILE .)
    U16CHAR_CONST   reduce using rule 88 (type_qualifier -> VOLATILE .)
    U8CHAR_CONST    reduce using rule 88 (type_qualifier -> VOLATILE .)
    WCHAR_CONST     reduce using rule 88 (type_qualifier -> VOLATILE .)
    CHAR_CONST      reduce using rule 88 (type_qualifier -> VOLATILE .)
    HEX_FLOAT_CONST reduce using rule 88 (type_qualifier -> VOLATILE .)
    FLOAT_CONST     reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT_CONST_CHAR  reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT_CONST_BIN   reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT_CONST_HEX   reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT_CONST_OCT   reduce using rule 88 (type_qualifier -> VOLATILE .)
    INT_CONST_DEC   reduce using rule 88 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 88 (type_qualifier -> VOLATILE .)
    :               reduce using rule 88 (type_qualifier -> VOLATILE .)


state 45

    (89) type_qualifier -> RESTRICT .
    ALIGNAS_        reduce using rule 89 (type_qualifier -> RESTRICT .)
    ATOMIC_         reduce using rule 89 (type_qualifier -> RESTRICT .)
    NORETURN_       reduce using rule 89 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 89 (type_qualifier -> RESTRICT .)
    THREAD_LOCAL_   reduce using rule 89 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 89 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 89 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 89 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 89 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 89 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 89 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 89 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT128          reduce using rule 89 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 89 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 89 (type_qualifier -> RESTRICT .)
    COMPLEX_        reduce using rule 89 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 89 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 89 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 89 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 89 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 89 (type_qualifier -> RESTRICT .)
    BOOL_           reduce using rule 89 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 89 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 89 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 89 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 89 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 89 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 89 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 89 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 89 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 89 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 89 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 89 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 89 (type_qualifier -> RESTRICT .)
    ALIGNOF_        reduce using rule 89 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 89 (type_qualifier -> RESTRICT .)
    MINUSMINUS      reduce using rule 89 (type_qualifier -> RESTRICT .)
    PLUSPLUS        reduce using rule 89 (type_qualifier -> RESTRICT .)
    LNOT            reduce using rule 89 (type_qualifier -> RESTRICT .)
    NOT             reduce using rule 89 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 89 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 89 (type_qualifier -> RESTRICT .)
    AND             reduce using rule 89 (type_qualifier -> RESTRICT .)
    OFFSETOF        reduce using rule 89 (type_qualifier -> RESTRICT .)
    U32STRING_LITERAL reduce using rule 89 (type_qualifier -> RESTRICT .)
    U16STRING_LITERAL reduce using rule 89 (type_qualifier -> RESTRICT .)
    U8STRING_LITERAL reduce using rule 89 (type_qualifier -> RESTRICT .)
    WSTRING_LITERAL reduce using rule 89 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 89 (type_qualifier -> RESTRICT .)
    U32CHAR_CONST   reduce using rule 89 (type_qualifier -> RESTRICT .)
    U16CHAR_CONST   reduce using rule 89 (type_qualifier -> RESTRICT .)
    U8CHAR_CONST    reduce using rule 89 (type_qualifier -> RESTRICT .)
    WCHAR_CONST     reduce using rule 89 (type_qualifier -> RESTRICT .)
    CHAR_CONST      reduce using rule 89 (type_qualifier -> RESTRICT .)
    HEX_FLOAT_CONST reduce using rule 89 (type_qualifier -> RESTRICT .)
    FLOAT_CONST     reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT_CONST_CHAR  reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT_CONST_BIN   reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT_CONST_HEX   reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT_CONST_OCT   reduce using rule 89 (type_qualifier -> RESTRICT .)
    INT_CONST_DEC   reduce using rule 89 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 89 (type_qualifier -> RESTRICT .)
    :               reduce using rule 89 (type_qualifier -> RESTRICT .)


state 46

    (90) type_qualifier -> CONST .
    ALIGNAS_        reduce using rule 90 (type_qualifier -> CONST .)
    ATOMIC_         reduce using rule 90 (type_qualifier -> CONST .)
    NORETURN_       reduce using rule 90 (type_qualifier -> CONST .)
    INLINE          reduce using rule 90 (type_qualifier -> CONST .)
    THREAD_LOCAL_   reduce using rule 90 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 90 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 90 (type_qualifier -> CONST .)
    STATIC          reduce using rule 90 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 90 (type_qualifier -> CONST .)
    AUTO            reduce using rule 90 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 90 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 90 (type_qualifier -> CONST .)
    CONST           reduce using rule 90 (type_qualifier -> CONST .)
    INT128          reduce using rule 90 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 90 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 90 (type_qualifier -> CONST .)
    COMPLEX_        reduce using rule 90 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 90 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 90 (type_qualifier -> CONST .)
    LONG            reduce using rule 90 (type_qualifier -> CONST .)
    INT             reduce using rule 90 (type_qualifier -> CONST .)
    SHORT           reduce using rule 90 (type_qualifier -> CONST .)
    CHAR            reduce using rule 90 (type_qualifier -> CONST .)
    BOOL_           reduce using rule 90 (type_qualifier -> CONST .)
    VOID            reduce using rule 90 (type_qualifier -> CONST .)
    ENUM            reduce using rule 90 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 90 (type_qualifier -> CONST .)
    UNION           reduce using rule 90 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 90 (type_qualifier -> CONST .)
    TIMES           reduce using rule 90 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 90 (type_qualifier -> CONST .)
    ID              reduce using rule 90 (type_qualifier -> CONST .)
    ;               reduce using rule 90 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 90 (type_qualifier -> CONST .)
    ,               reduce using rule 90 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 90 (type_qualifier -> CONST .)
    ALIGNOF_        reduce using rule 90 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 90 (type_qualifier -> CONST .)
    MINUSMINUS      reduce using rule 90 (type_qualifier -> CONST .)
    PLUSPLUS        reduce using rule 90 (type_qualifier -> CONST .)
    LNOT            reduce using rule 90 (type_qualifier -> CONST .)
    NOT             reduce using rule 90 (type_qualifier -> CONST .)
    MINUS           reduce using rule 90 (type_qualifier -> CONST .)
    PLUS            reduce using rule 90 (type_qualifier -> CONST .)
    AND             reduce using rule 90 (type_qualifier -> CONST .)
    OFFSETOF        reduce using rule 90 (type_qualifier -> CONST .)
    U32STRING_LITERAL reduce using rule 90 (type_qualifier -> CONST .)
    U16STRING_LITERAL reduce using rule 90 (type_qualifier -> CONST .)
    U8STRING_LITERAL reduce using rule 90 (type_qualifier -> CONST .)
    WSTRING_LITERAL reduce using rule 90 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 90 (type_qualifier -> CONST .)
    U32CHAR_CONST   reduce using rule 90 (type_qualifier -> CONST .)
    U16CHAR_CONST   reduce using rule 90 (type_qualifier -> CONST .)
    U8CHAR_CONST    reduce using rule 90 (type_qualifier -> CONST .)
    WCHAR_CONST     reduce using rule 90 (type_qualifier -> CONST .)
    CHAR_CONST      reduce using rule 90 (type_qualifier -> CONST .)
    HEX_FLOAT_CONST reduce using rule 90 (type_qualifier -> CONST .)
    FLOAT_CONST     reduce using rule 90 (type_qualifier -> CONST .)
    INT_CONST_CHAR  reduce using rule 90 (type_qualifier -> CONST .)
    INT_CONST_BIN   reduce using rule 90 (type_qualifier -> CONST .)
    INT_CONST_HEX   reduce using rule 90 (type_qualifier -> CONST .)
    INT_CONST_OCT   reduce using rule 90 (type_qualifier -> CONST .)
    INT_CONST_DEC   reduce using rule 90 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 90 (type_qualifier -> CONST .)
    :               reduce using rule 90 (type_qualifier -> CONST .)


state 47

    (69) type_specifier_no_typeid -> INT128 .
    ALIGNAS_        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    INT128          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    UNSIGNED        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    SIGNED          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    COMPLEX_        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    DOUBLE          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    FLOAT           reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    LONG            reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    INT             reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    SHORT           reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    CHAR            reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    BOOL_           reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    VOID            reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    NORETURN_       reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    INLINE          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    THREAD_LOCAL_   reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    TYPEDEF         reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    EXTERN          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    STATIC          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    REGISTER        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    AUTO            reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    ATOMIC_         reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    VOLATILE        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    RESTRICT        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    CONST           reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    TIMES           reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    LPAREN          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    ID              reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    TYPEID          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    ;               reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    LBRACKET        reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    ,               reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    RPAREN          reduce using rule 69 (type_specifier_no_typeid -> INT128 .)
    :               reduce using rule 69 (type_specifier_no_typeid -> INT128 .)


state 48

    (70) type_specifier_no_typeid -> UNSIGNED .
    ALIGNAS_        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    INT128          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    UNSIGNED        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    SIGNED          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    COMPLEX_        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    DOUBLE          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    FLOAT           reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    LONG            reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    INT             reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    SHORT           reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    CHAR            reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    BOOL_           reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    VOID            reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    NORETURN_       reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    INLINE          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    THREAD_LOCAL_   reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    TYPEDEF         reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    EXTERN          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    STATIC          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    REGISTER        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    AUTO            reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    ATOMIC_         reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    VOLATILE        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    RESTRICT        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    CONST           reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    TIMES           reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    LPAREN          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    ID              reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    TYPEID          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    ;               reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    LBRACKET        reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    ,               reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    RPAREN          reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)
    :               reduce using rule 70 (type_specifier_no_typeid -> UNSIGNED .)


state 49

    (71) type_specifier_no_typeid -> SIGNED .
    ALIGNAS_        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    INT128          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    UNSIGNED        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    SIGNED          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    COMPLEX_        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    DOUBLE          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    FLOAT           reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    LONG            reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    INT             reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    SHORT           reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    CHAR            reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    BOOL_           reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    VOID            reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    NORETURN_       reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    INLINE          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    THREAD_LOCAL_   reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    TYPEDEF         reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    EXTERN          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    STATIC          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    REGISTER        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    AUTO            reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    ATOMIC_         reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    VOLATILE        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    RESTRICT        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    CONST           reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    TIMES           reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    LPAREN          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    ID              reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    TYPEID          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    ;               reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    LBRACKET        reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    ,               reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    RPAREN          reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)
    :               reduce using rule 71 (type_specifier_no_typeid -> SIGNED .)


state 50

    (72) type_specifier_no_typeid -> COMPLEX_ .
    ALIGNAS_        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    INT128          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    UNSIGNED        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    SIGNED          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    COMPLEX_        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    DOUBLE          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    FLOAT           reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    LONG            reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    INT             reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    SHORT           reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    CHAR            reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    BOOL_           reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    VOID            reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    NORETURN_       reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    INLINE          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    THREAD_LOCAL_   reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    TYPEDEF         reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    EXTERN          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    STATIC          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    REGISTER        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    AUTO            reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    ATOMIC_         reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    VOLATILE        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    RESTRICT        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    CONST           reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    TIMES           reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    LPAREN          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    ID              reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    TYPEID          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    ;               reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    LBRACKET        reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    ,               reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    RPAREN          reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)
    :               reduce using rule 72 (type_specifier_no_typeid -> COMPLEX_ .)


state 51

    (73) type_specifier_no_typeid -> DOUBLE .
    ALIGNAS_        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    INT128          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    UNSIGNED        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    SIGNED          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    COMPLEX_        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    DOUBLE          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    FLOAT           reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    LONG            reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    INT             reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    SHORT           reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    CHAR            reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    BOOL_           reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    VOID            reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    NORETURN_       reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    INLINE          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    THREAD_LOCAL_   reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    TYPEDEF         reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    EXTERN          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    STATIC          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    REGISTER        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    AUTO            reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    ATOMIC_         reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    VOLATILE        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    RESTRICT        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    CONST           reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    TIMES           reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    LPAREN          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    ID              reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    TYPEID          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    ;               reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    LBRACKET        reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    ,               reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    RPAREN          reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)
    :               reduce using rule 73 (type_specifier_no_typeid -> DOUBLE .)


state 52

    (74) type_specifier_no_typeid -> FLOAT .
    ALIGNAS_        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    INT128          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    UNSIGNED        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    SIGNED          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    COMPLEX_        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    DOUBLE          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    FLOAT           reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    LONG            reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    INT             reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    SHORT           reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    CHAR            reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    BOOL_           reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    VOID            reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    NORETURN_       reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    INLINE          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    THREAD_LOCAL_   reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    TYPEDEF         reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    EXTERN          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    STATIC          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    REGISTER        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    AUTO            reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    ATOMIC_         reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    VOLATILE        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    RESTRICT        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    CONST           reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    TIMES           reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    LPAREN          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    ID              reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    TYPEID          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    ;               reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    LBRACKET        reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    ,               reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    RPAREN          reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)
    :               reduce using rule 74 (type_specifier_no_typeid -> FLOAT .)


state 53

    (75) type_specifier_no_typeid -> LONG .
    ALIGNAS_        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    INT128          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    UNSIGNED        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    SIGNED          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    COMPLEX_        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    DOUBLE          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    FLOAT           reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    LONG            reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    INT             reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    SHORT           reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    CHAR            reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    BOOL_           reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    VOID            reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    NORETURN_       reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    INLINE          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    THREAD_LOCAL_   reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    TYPEDEF         reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    EXTERN          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    STATIC          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    REGISTER        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    AUTO            reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    ATOMIC_         reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    VOLATILE        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    RESTRICT        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    CONST           reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    TIMES           reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    LPAREN          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    ID              reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    TYPEID          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    ;               reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    LBRACKET        reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    ,               reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    RPAREN          reduce using rule 75 (type_specifier_no_typeid -> LONG .)
    :               reduce using rule 75 (type_specifier_no_typeid -> LONG .)


state 54

    (76) type_specifier_no_typeid -> INT .
    ALIGNAS_        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    INT128          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    UNSIGNED        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    SIGNED          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    COMPLEX_        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    DOUBLE          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    FLOAT           reduce using rule 76 (type_specifier_no_typeid -> INT .)
    LONG            reduce using rule 76 (type_specifier_no_typeid -> INT .)
    INT             reduce using rule 76 (type_specifier_no_typeid -> INT .)
    SHORT           reduce using rule 76 (type_specifier_no_typeid -> INT .)
    CHAR            reduce using rule 76 (type_specifier_no_typeid -> INT .)
    BOOL_           reduce using rule 76 (type_specifier_no_typeid -> INT .)
    VOID            reduce using rule 76 (type_specifier_no_typeid -> INT .)
    NORETURN_       reduce using rule 76 (type_specifier_no_typeid -> INT .)
    INLINE          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    THREAD_LOCAL_   reduce using rule 76 (type_specifier_no_typeid -> INT .)
    TYPEDEF         reduce using rule 76 (type_specifier_no_typeid -> INT .)
    EXTERN          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    STATIC          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    REGISTER        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    AUTO            reduce using rule 76 (type_specifier_no_typeid -> INT .)
    ATOMIC_         reduce using rule 76 (type_specifier_no_typeid -> INT .)
    VOLATILE        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    RESTRICT        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    CONST           reduce using rule 76 (type_specifier_no_typeid -> INT .)
    TIMES           reduce using rule 76 (type_specifier_no_typeid -> INT .)
    LPAREN          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    ID              reduce using rule 76 (type_specifier_no_typeid -> INT .)
    TYPEID          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    ;               reduce using rule 76 (type_specifier_no_typeid -> INT .)
    LBRACKET        reduce using rule 76 (type_specifier_no_typeid -> INT .)
    ,               reduce using rule 76 (type_specifier_no_typeid -> INT .)
    RPAREN          reduce using rule 76 (type_specifier_no_typeid -> INT .)
    :               reduce using rule 76 (type_specifier_no_typeid -> INT .)


state 55

    (77) type_specifier_no_typeid -> SHORT .
    ALIGNAS_        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    INT128          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    UNSIGNED        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    SIGNED          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    COMPLEX_        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    DOUBLE          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    FLOAT           reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    LONG            reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    INT             reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    SHORT           reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    CHAR            reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    BOOL_           reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    VOID            reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    NORETURN_       reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    INLINE          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    THREAD_LOCAL_   reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    TYPEDEF         reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    EXTERN          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    STATIC          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    REGISTER        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    AUTO            reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    ATOMIC_         reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    VOLATILE        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    RESTRICT        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    CONST           reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    TIMES           reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    LPAREN          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    ID              reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    TYPEID          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    ;               reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    LBRACKET        reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    ,               reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    RPAREN          reduce using rule 77 (type_specifier_no_typeid -> SHORT .)
    :               reduce using rule 77 (type_specifier_no_typeid -> SHORT .)


state 56

    (78) type_specifier_no_typeid -> CHAR .
    ALIGNAS_        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    INT128          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    UNSIGNED        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    SIGNED          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    COMPLEX_        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    DOUBLE          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    FLOAT           reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    LONG            reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    INT             reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    SHORT           reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    CHAR            reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    BOOL_           reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    VOID            reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    NORETURN_       reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    INLINE          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    THREAD_LOCAL_   reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    TYPEDEF         reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    EXTERN          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    STATIC          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    REGISTER        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    AUTO            reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    ATOMIC_         reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    VOLATILE        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    RESTRICT        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    CONST           reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    TIMES           reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    LPAREN          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    ID              reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    TYPEID          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    ;               reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    LBRACKET        reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    ,               reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    RPAREN          reduce using rule 78 (type_specifier_no_typeid -> CHAR .)
    :               reduce using rule 78 (type_specifier_no_typeid -> CHAR .)


state 57

    (79) type_specifier_no_typeid -> BOOL_ .
    ALIGNAS_        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    INT128          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    UNSIGNED        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    SIGNED          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    COMPLEX_        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    DOUBLE          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    FLOAT           reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    LONG            reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    INT             reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    SHORT           reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    CHAR            reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    BOOL_           reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    VOID            reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    NORETURN_       reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    INLINE          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    THREAD_LOCAL_   reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    TYPEDEF         reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    EXTERN          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    STATIC          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    REGISTER        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    AUTO            reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    ATOMIC_         reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    VOLATILE        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    RESTRICT        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    CONST           reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    TIMES           reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    LPAREN          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    ID              reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    TYPEID          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    ;               reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    LBRACKET        reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    ,               reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    RPAREN          reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)
    :               reduce using rule 79 (type_specifier_no_typeid -> BOOL_ .)


state 58

    (80) type_specifier_no_typeid -> VOID .
    ALIGNAS_        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    INT128          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    UNSIGNED        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    SIGNED          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    COMPLEX_        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    DOUBLE          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    FLOAT           reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    LONG            reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    INT             reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    SHORT           reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    CHAR            reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    BOOL_           reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    VOID            reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    NORETURN_       reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    INLINE          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    THREAD_LOCAL_   reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    TYPEDEF         reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    EXTERN          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    STATIC          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    REGISTER        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    AUTO            reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    ATOMIC_         reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    VOLATILE        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    RESTRICT        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    CONST           reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    TIMES           reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    LPAREN          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    ID              reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    TYPEID          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    ;               reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    LBRACKET        reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    ,               reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    RPAREN          reduce using rule 80 (type_specifier_no_typeid -> VOID .)
    :               reduce using rule 80 (type_specifier_no_typeid -> VOID .)


state 59

    (115) struct_or_union_specifier -> struct_or_union . TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> struct_or_union . ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> struct_or_union . brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> struct_or_union . TYPEID
    (125) struct_or_union_specifier -> struct_or_union . ID
    (391) brace_open -> . LBRACE
    TYPEID          shift and go to state 117
    ID              shift and go to state 119
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 118

state 60

    (285) typedef_name -> TYPEID .
    ALIGNAS_        reduce using rule 285 (typedef_name -> TYPEID .)
    INT128          reduce using rule 285 (typedef_name -> TYPEID .)
    UNSIGNED        reduce using rule 285 (typedef_name -> TYPEID .)
    SIGNED          reduce using rule 285 (typedef_name -> TYPEID .)
    COMPLEX_        reduce using rule 285 (typedef_name -> TYPEID .)
    DOUBLE          reduce using rule 285 (typedef_name -> TYPEID .)
    FLOAT           reduce using rule 285 (typedef_name -> TYPEID .)
    LONG            reduce using rule 285 (typedef_name -> TYPEID .)
    INT             reduce using rule 285 (typedef_name -> TYPEID .)
    SHORT           reduce using rule 285 (typedef_name -> TYPEID .)
    CHAR            reduce using rule 285 (typedef_name -> TYPEID .)
    BOOL_           reduce using rule 285 (typedef_name -> TYPEID .)
    VOID            reduce using rule 285 (typedef_name -> TYPEID .)
    NORETURN_       reduce using rule 285 (typedef_name -> TYPEID .)
    INLINE          reduce using rule 285 (typedef_name -> TYPEID .)
    THREAD_LOCAL_   reduce using rule 285 (typedef_name -> TYPEID .)
    TYPEDEF         reduce using rule 285 (typedef_name -> TYPEID .)
    EXTERN          reduce using rule 285 (typedef_name -> TYPEID .)
    STATIC          reduce using rule 285 (typedef_name -> TYPEID .)
    REGISTER        reduce using rule 285 (typedef_name -> TYPEID .)
    AUTO            reduce using rule 285 (typedef_name -> TYPEID .)
    ATOMIC_         reduce using rule 285 (typedef_name -> TYPEID .)
    VOLATILE        reduce using rule 285 (typedef_name -> TYPEID .)
    RESTRICT        reduce using rule 285 (typedef_name -> TYPEID .)
    CONST           reduce using rule 285 (typedef_name -> TYPEID .)
    TIMES           reduce using rule 285 (typedef_name -> TYPEID .)
    LPAREN          reduce using rule 285 (typedef_name -> TYPEID .)
    ID              reduce using rule 285 (typedef_name -> TYPEID .)
    TYPEID          reduce using rule 285 (typedef_name -> TYPEID .)
    ;               reduce using rule 285 (typedef_name -> TYPEID .)
    LBRACKET        reduce using rule 285 (typedef_name -> TYPEID .)
    ,               reduce using rule 285 (typedef_name -> TYPEID .)
    RPAREN          reduce using rule 285 (typedef_name -> TYPEID .)
    :               reduce using rule 285 (typedef_name -> TYPEID .)


state 61

    (148) enum_specifier -> ENUM . TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> ENUM . ID brace_open enumerator_list brace_close
    (150) enum_specifier -> ENUM . brace_open enumerator_list brace_close
    (151) enum_specifier -> ENUM . TYPEID
    (152) enum_specifier -> ENUM . ID
    (391) brace_open -> . LBRACE
    TYPEID          shift and go to state 121
    ID              shift and go to state 123
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 122

state 62

    (126) struct_or_union -> UNION .
    TYPEID          reduce using rule 126 (struct_or_union -> UNION .)
    ID              reduce using rule 126 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 126 (struct_or_union -> UNION .)


state 63

    (127) struct_or_union -> STRUCT .
    TYPEID          reduce using rule 127 (struct_or_union -> STRUCT .)
    ID              reduce using rule 127 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 127 (struct_or_union -> STRUCT .)


state 64

    (3) translation_unit -> translation_unit external_declaration .
    ;               reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STATIC_ASSERT_  reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    PRAGMA_         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    PPPRAGMA        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    PPHASH          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ALIGNAS_        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ATOMIC_         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    NORETURN_       reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    THREAD_LOCAL_   reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT128          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    COMPLEX_        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    BOOL_           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 65

    (11) static_assert -> STATIC_ASSERT_ LPAREN . constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (302) constant_expression -> . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 125
    conditional_expression         shift and go to state 126
    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 66

    (175) direct_id_declarator -> LPAREN id_declarator . RPAREN
    RPAREN          shift and go to state 166


state 67

    (15) pppragma_directive -> PRAGMA_ LPAREN . unified_string_literal RPAREN
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    STRING_LITERAL  shift and go to state 153

    unified_string_literal         shift and go to state 167

state 68

    (16) pppragma_directive -> PPPRAGMA PPPRAGMASTR .
    ;               reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STATIC_ASSERT_  reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PRAGMA_         reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPPRAGMA        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPHASH          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TIMES           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LPAREN          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ID              reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ALIGNAS_        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ATOMIC_         reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    NORETURN_       reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INLINE          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    THREAD_LOCAL_   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEDEF         reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    EXTERN          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STATIC          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    REGISTER        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AUTO            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOLATILE        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RESTRICT        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONST           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT128          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNSIGNED        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIGNED          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    COMPLEX_        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DOUBLE          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LONG            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT             reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SHORT           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    BOOL_           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOID            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ENUM            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEID          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNION           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRUCT          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    $end            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RBRACE          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RETURN          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONTINUE        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    BREAK           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    GOTO            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FOR             reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DO              reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WHILE           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SWITCH          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    IF              reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DEFAULT         reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CASE            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LBRACE          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ALIGNOF_        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIZEOF          reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUSMINUS      reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUSPLUS        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LNOT            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    NOT             reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUS           reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUS            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AND             reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    OFFSETOF        reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U32STRING_LITERAL reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U16STRING_LITERAL reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U8STRING_LITERAL reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WSTRING_LITERAL reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRING_LITERAL  reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U32CHAR_CONST   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U16CHAR_CONST   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U8CHAR_CONST    reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WCHAR_CONST     reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR_CONST      reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    HEX_FLOAT_CONST reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT_CONST     reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_CHAR  reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_BIN   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_HEX   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_OCT   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_DEC   reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ELSE            reduce using rule 16 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)


state 69

    (38) declaration -> decl_body ; .
    ;               reduce using rule 38 (declaration -> decl_body ; .)
    STATIC_ASSERT_  reduce using rule 38 (declaration -> decl_body ; .)
    PRAGMA_         reduce using rule 38 (declaration -> decl_body ; .)
    PPPRAGMA        reduce using rule 38 (declaration -> decl_body ; .)
    PPHASH          reduce using rule 38 (declaration -> decl_body ; .)
    TIMES           reduce using rule 38 (declaration -> decl_body ; .)
    LPAREN          reduce using rule 38 (declaration -> decl_body ; .)
    ID              reduce using rule 38 (declaration -> decl_body ; .)
    ALIGNAS_        reduce using rule 38 (declaration -> decl_body ; .)
    ATOMIC_         reduce using rule 38 (declaration -> decl_body ; .)
    NORETURN_       reduce using rule 38 (declaration -> decl_body ; .)
    INLINE          reduce using rule 38 (declaration -> decl_body ; .)
    THREAD_LOCAL_   reduce using rule 38 (declaration -> decl_body ; .)
    TYPEDEF         reduce using rule 38 (declaration -> decl_body ; .)
    EXTERN          reduce using rule 38 (declaration -> decl_body ; .)
    STATIC          reduce using rule 38 (declaration -> decl_body ; .)
    REGISTER        reduce using rule 38 (declaration -> decl_body ; .)
    AUTO            reduce using rule 38 (declaration -> decl_body ; .)
    VOLATILE        reduce using rule 38 (declaration -> decl_body ; .)
    RESTRICT        reduce using rule 38 (declaration -> decl_body ; .)
    CONST           reduce using rule 38 (declaration -> decl_body ; .)
    INT128          reduce using rule 38 (declaration -> decl_body ; .)
    UNSIGNED        reduce using rule 38 (declaration -> decl_body ; .)
    SIGNED          reduce using rule 38 (declaration -> decl_body ; .)
    COMPLEX_        reduce using rule 38 (declaration -> decl_body ; .)
    DOUBLE          reduce using rule 38 (declaration -> decl_body ; .)
    FLOAT           reduce using rule 38 (declaration -> decl_body ; .)
    LONG            reduce using rule 38 (declaration -> decl_body ; .)
    INT             reduce using rule 38 (declaration -> decl_body ; .)
    SHORT           reduce using rule 38 (declaration -> decl_body ; .)
    CHAR            reduce using rule 38 (declaration -> decl_body ; .)
    BOOL_           reduce using rule 38 (declaration -> decl_body ; .)
    VOID            reduce using rule 38 (declaration -> decl_body ; .)
    ENUM            reduce using rule 38 (declaration -> decl_body ; .)
    TYPEID          reduce using rule 38 (declaration -> decl_body ; .)
    UNION           reduce using rule 38 (declaration -> decl_body ; .)
    STRUCT          reduce using rule 38 (declaration -> decl_body ; .)
    $end            reduce using rule 38 (declaration -> decl_body ; .)
    LBRACE          reduce using rule 38 (declaration -> decl_body ; .)
    RETURN          reduce using rule 38 (declaration -> decl_body ; .)
    CONTINUE        reduce using rule 38 (declaration -> decl_body ; .)
    BREAK           reduce using rule 38 (declaration -> decl_body ; .)
    GOTO            reduce using rule 38 (declaration -> decl_body ; .)
    FOR             reduce using rule 38 (declaration -> decl_body ; .)
    DO              reduce using rule 38 (declaration -> decl_body ; .)
    WHILE           reduce using rule 38 (declaration -> decl_body ; .)
    SWITCH          reduce using rule 38 (declaration -> decl_body ; .)
    IF              reduce using rule 38 (declaration -> decl_body ; .)
    DEFAULT         reduce using rule 38 (declaration -> decl_body ; .)
    CASE            reduce using rule 38 (declaration -> decl_body ; .)
    ALIGNOF_        reduce using rule 38 (declaration -> decl_body ; .)
    SIZEOF          reduce using rule 38 (declaration -> decl_body ; .)
    MINUSMINUS      reduce using rule 38 (declaration -> decl_body ; .)
    PLUSPLUS        reduce using rule 38 (declaration -> decl_body ; .)
    LNOT            reduce using rule 38 (declaration -> decl_body ; .)
    NOT             reduce using rule 38 (declaration -> decl_body ; .)
    MINUS           reduce using rule 38 (declaration -> decl_body ; .)
    PLUS            reduce using rule 38 (declaration -> decl_body ; .)
    AND             reduce using rule 38 (declaration -> decl_body ; .)
    OFFSETOF        reduce using rule 38 (declaration -> decl_body ; .)
    U32STRING_LITERAL reduce using rule 38 (declaration -> decl_body ; .)
    U16STRING_LITERAL reduce using rule 38 (declaration -> decl_body ; .)
    U8STRING_LITERAL reduce using rule 38 (declaration -> decl_body ; .)
    WSTRING_LITERAL reduce using rule 38 (declaration -> decl_body ; .)
    STRING_LITERAL  reduce using rule 38 (declaration -> decl_body ; .)
    U32CHAR_CONST   reduce using rule 38 (declaration -> decl_body ; .)
    U16CHAR_CONST   reduce using rule 38 (declaration -> decl_body ; .)
    U8CHAR_CONST    reduce using rule 38 (declaration -> decl_body ; .)
    WCHAR_CONST     reduce using rule 38 (declaration -> decl_body ; .)
    CHAR_CONST      reduce using rule 38 (declaration -> decl_body ; .)
    HEX_FLOAT_CONST reduce using rule 38 (declaration -> decl_body ; .)
    FLOAT_CONST     reduce using rule 38 (declaration -> decl_body ; .)
    INT_CONST_CHAR  reduce using rule 38 (declaration -> decl_body ; .)
    INT_CONST_BIN   reduce using rule 38 (declaration -> decl_body ; .)
    INT_CONST_HEX   reduce using rule 38 (declaration -> decl_body ; .)
    INT_CONST_OCT   reduce using rule 38 (declaration -> decl_body ; .)
    INT_CONST_DEC   reduce using rule 38 (declaration -> decl_body ; .)
    RBRACE          reduce using rule 38 (declaration -> decl_body ; .)


state 70

    (24) function_definition -> declaration_specifiers id_declarator . declaration_list_opt compound_statement
    (162) declarator -> id_declarator .
    (45) declaration_list_opt -> . declaration_list
    (46) declaration_list_opt -> . empty
    (39) declaration_list -> . declaration _3_declaration_repeat
    (393) empty -> .
    (38) declaration -> . decl_body ;
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    EQUALS          reduce using rule 162 (declarator -> id_declarator .)
    ,               reduce using rule 162 (declarator -> id_declarator .)
    ;               reduce using rule 162 (declarator -> id_declarator .)
    LBRACE          reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    declaration_specifiers         shift and go to state 91
    declaration_list_opt           shift and go to state 168
    declaration_list               shift and go to state 88
    empty                          shift and go to state 89
    declaration                    shift and go to state 90
    decl_body                      shift and go to state 16
    declaration_specifiers_no_type shift and go to state 19
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 71

    (37) decl_body -> declaration_specifiers init_declarator_list_opt .
    ;               reduce using rule 37 (decl_body -> declaration_specifiers init_declarator_list_opt .)


state 72

    (54) declaration_specifiers -> declaration_specifiers alignment_specifier .
    ALIGNAS_        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    INT128          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    UNSIGNED        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    SIGNED          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    COMPLEX_        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    DOUBLE          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    FLOAT           reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    LONG            reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    INT             reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    SHORT           reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    CHAR            reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    BOOL_           reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    VOID            reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    NORETURN_       reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    INLINE          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    THREAD_LOCAL_   reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    TYPEDEF         reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    EXTERN          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    STATIC          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    REGISTER        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    AUTO            reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    ATOMIC_         reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    VOLATILE        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    RESTRICT        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    CONST           reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    TIMES           reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    LPAREN          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    ID              reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    TYPEID          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    ;               reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    LBRACKET        reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    ,               reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    RPAREN          reduce using rule 54 (declaration_specifiers -> declaration_specifiers alignment_specifier .)


state 73

    (57) declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .
    ALIGNAS_        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INT128          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SIGNED          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    COMPLEX_        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    DOUBLE          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    FLOAT           reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LONG            reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INT             reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SHORT           reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    CHAR            reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    BOOL_           reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    VOID            reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    NORETURN_       reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INLINE          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    THREAD_LOCAL_   reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TYPEDEF         reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    EXTERN          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    STATIC          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    REGISTER        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    AUTO            reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    ATOMIC_         reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    VOLATILE        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    RESTRICT        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    CONST           reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TIMES           reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LPAREN          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    ID              reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TYPEID          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    ;               reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LBRACKET        reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    ,               reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    RPAREN          reduce using rule 57 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)


state 74

    (58) declaration_specifiers -> declaration_specifiers function_specifier .
    ALIGNAS_        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INT128          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    UNSIGNED        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SIGNED          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    COMPLEX_        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    DOUBLE          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    FLOAT           reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LONG            reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INT             reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SHORT           reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    CHAR            reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    BOOL_           reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    VOID            reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    NORETURN_       reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INLINE          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    THREAD_LOCAL_   reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TYPEDEF         reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    EXTERN          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    STATIC          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    REGISTER        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    AUTO            reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    ATOMIC_         reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    VOLATILE        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    RESTRICT        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    CONST           reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TIMES           reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LPAREN          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    ID              reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TYPEID          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    ;               reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LBRACKET        reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    ,               reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)
    RPAREN          reduce using rule 58 (declaration_specifiers -> declaration_specifiers function_specifier .)


state 75

    (59) declaration_specifiers -> declaration_specifiers storage_class_specifier .
    ALIGNAS_        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INT128          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    UNSIGNED        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SIGNED          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    COMPLEX_        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    DOUBLE          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    FLOAT           reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LONG            reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INT             reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SHORT           reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    CHAR            reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    BOOL_           reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    VOID            reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    NORETURN_       reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INLINE          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    THREAD_LOCAL_   reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TYPEDEF         reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    EXTERN          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    STATIC          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    REGISTER        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    AUTO            reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    ATOMIC_         reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    VOLATILE        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    RESTRICT        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    CONST           reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TIMES           reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LPAREN          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    ID              reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TYPEID          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    ;               reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LBRACKET        reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    ,               reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    RPAREN          reduce using rule 59 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)


state 76

    (60) declaration_specifiers -> declaration_specifiers type_qualifier .
    ALIGNAS_        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INT128          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    UNSIGNED        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SIGNED          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    COMPLEX_        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    DOUBLE          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    FLOAT           reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LONG            reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INT             reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SHORT           reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    CHAR            reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    BOOL_           reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    VOID            reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    NORETURN_       reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INLINE          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    THREAD_LOCAL_   reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TYPEDEF         reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    EXTERN          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    STATIC          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    REGISTER        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    AUTO            reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    ATOMIC_         reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    VOLATILE        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    RESTRICT        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    CONST           reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TIMES           reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LPAREN          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    ID              reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TYPEID          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    ;               reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LBRACKET        reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    ,               reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    RPAREN          reduce using rule 60 (declaration_specifiers -> declaration_specifiers type_qualifier .)


state 77

    (163) id_declarator -> pointer . direct_id_declarator
    (165) typeid_declarator -> pointer . direct_typeid_declarator
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    LPAREN          shift and go to state 80
    ID              shift and go to state 34
    TYPEID          shift and go to state 86

    direct_id_declarator           shift and go to state 107
    direct_typeid_declarator       shift and go to state 169

state 78

    (97) init_declarator_list_opt -> init_declarator_list .
    ;               reduce using rule 97 (init_declarator_list_opt -> init_declarator_list .)


state 79

    (98) init_declarator_list_opt -> empty .
    ;               reduce using rule 98 (init_declarator_list_opt -> empty .)


state 80

    (175) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (183) direct_typeid_declarator -> LPAREN . typeid_declarator RPAREN
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 80
    ID              shift and go to state 34
    TYPEID          shift and go to state 86

    id_declarator                  shift and go to state 66
    typeid_declarator              shift and go to state 170
    pointer                        shift and go to state 77
    direct_id_declarator           shift and go to state 27
    direct_typeid_declarator       shift and go to state 85

state 81

    (87) type_qualifier -> ATOMIC_ .
    ALIGNAS_        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT128          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    UNSIGNED        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SIGNED          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    COMPLEX_        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    DOUBLE          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    FLOAT           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LONG            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT             reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SHORT           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CHAR            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    BOOL_           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    VOID            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    NORETURN_       reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INLINE          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    THREAD_LOCAL_   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TYPEDEF         reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    EXTERN          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    STATIC          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    REGISTER        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    AUTO            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ATOMIC_         reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    VOLATILE        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    RESTRICT        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CONST           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TIMES           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LPAREN          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ID              reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TYPEID          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ;               reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LBRACKET        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ,               reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    RPAREN          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ALIGNOF_        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SIZEOF          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    MINUSMINUS      reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    PLUSPLUS        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LNOT            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    NOT             reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    MINUS           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    PLUS            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    AND             reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    OFFSETOF        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    U32STRING_LITERAL reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    U16STRING_LITERAL reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    U8STRING_LITERAL reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    WSTRING_LITERAL reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    STRING_LITERAL  reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    U32CHAR_CONST   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    U16CHAR_CONST   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    U8CHAR_CONST    reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    WCHAR_CONST     reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CHAR_CONST      reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    HEX_FLOAT_CONST reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    FLOAT_CONST     reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT_CONST_CHAR  reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT_CONST_BIN   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT_CONST_HEX   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT_CONST_OCT   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT_CONST_DEC   reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    RBRACKET        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ENUM            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    UNION           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    STRUCT          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    :               reduce using rule 87 (type_qualifier -> ATOMIC_ .)


state 82

    (91) init_declarator_list -> init_declarator . _4_222c22_init_declarator_repeat
    (92) _4_222c22_init_declarator_repeat -> . _4_222c22_init_declarator_items
    (93) _4_222c22_init_declarator_repeat -> .
    (94) _4_222c22_init_declarator_items -> . _4_222c22_init_declarator_items _4_222c22_init_declarator_item
    (95) _4_222c22_init_declarator_items -> . _4_222c22_init_declarator_item
    (96) _4_222c22_init_declarator_item -> . , init_declarator
    ;               reduce using rule 93 (_4_222c22_init_declarator_repeat -> .)
    ,               shift and go to state 174

    _4_222c22_init_declarator_repeat shift and go to state 171
    _4_222c22_init_declarator_items shift and go to state 172
    _4_222c22_init_declarator_item shift and go to state 173

state 83

    (99) init_declarator -> declarator . _5_EQUALS_initializer_optional
    (100) _5_EQUALS_initializer_optional -> . EQUALS initializer
    (101) _5_EQUALS_initializer_optional -> .
    EQUALS          shift and go to state 176
    ,               reduce using rule 101 (_5_EQUALS_initializer_optional -> .)
    ;               reduce using rule 101 (_5_EQUALS_initializer_optional -> .)

    _5_EQUALS_initializer_optional shift and go to state 175

state 84

    (161) declarator -> typeid_declarator .
    EQUALS          reduce using rule 161 (declarator -> typeid_declarator .)
    ,               reduce using rule 161 (declarator -> typeid_declarator .)
    ;               reduce using rule 161 (declarator -> typeid_declarator .)
    :               reduce using rule 161 (declarator -> typeid_declarator .)


state 85

    (166) typeid_declarator -> direct_typeid_declarator .
    (177) direct_typeid_declarator -> direct_typeid_declarator . LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> direct_typeid_declarator . LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    EQUALS          reduce using rule 166 (typeid_declarator -> direct_typeid_declarator .)
    ,               reduce using rule 166 (typeid_declarator -> direct_typeid_declarator .)
    ;               reduce using rule 166 (typeid_declarator -> direct_typeid_declarator .)
    RPAREN          reduce using rule 166 (typeid_declarator -> direct_typeid_declarator .)
    :               reduce using rule 166 (typeid_declarator -> direct_typeid_declarator .)
    LPAREN          shift and go to state 177
    LBRACKET        shift and go to state 178


state 86

    (184) direct_typeid_declarator -> TYPEID .
    LPAREN          reduce using rule 184 (direct_typeid_declarator -> TYPEID .)
    LBRACKET        reduce using rule 184 (direct_typeid_declarator -> TYPEID .)
    EQUALS          reduce using rule 184 (direct_typeid_declarator -> TYPEID .)
    ,               reduce using rule 184 (direct_typeid_declarator -> TYPEID .)
    ;               reduce using rule 184 (direct_typeid_declarator -> TYPEID .)
    RPAREN          reduce using rule 184 (direct_typeid_declarator -> TYPEID .)
    :               reduce using rule 184 (direct_typeid_declarator -> TYPEID .)


state 87

    (25) function_definition -> id_declarator declaration_list_opt . compound_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (391) brace_open -> . LBRACE
    LBRACE          shift and go to state 120

    compound_statement             shift and go to state 179
    brace_open                     shift and go to state 180

state 88

    (45) declaration_list_opt -> declaration_list .
    LBRACE          reduce using rule 45 (declaration_list_opt -> declaration_list .)


state 89

    (46) declaration_list_opt -> empty .
    LBRACE          reduce using rule 46 (declaration_list_opt -> empty .)


state 90

    (39) declaration_list -> declaration . _3_declaration_repeat
    (40) _3_declaration_repeat -> . _3_declaration_items
    (41) _3_declaration_repeat -> .
    (42) _3_declaration_items -> . _3_declaration_items _3_declaration_item
    (43) _3_declaration_items -> . _3_declaration_item
    (44) _3_declaration_item -> . declaration
    (38) declaration -> . decl_body ;
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    LBRACE          reduce using rule 41 (_3_declaration_repeat -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    declaration                    shift and go to state 181
    _3_declaration_repeat          shift and go to state 182
    _3_declaration_items           shift and go to state 183
    _3_declaration_item            shift and go to state 184
    decl_body                      shift and go to state 16
    declaration_specifiers_no_type shift and go to state 19
    declaration_specifiers         shift and go to state 91
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 91

    (37) decl_body -> declaration_specifiers . init_declarator_list_opt
    (54) declaration_specifiers -> declaration_specifiers . alignment_specifier
    (57) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (58) declaration_specifiers -> declaration_specifiers . function_specifier
    (59) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (60) declaration_specifiers -> declaration_specifiers . type_qualifier
    (97) init_declarator_list_opt -> . init_declarator_list
    (98) init_declarator_list_opt -> . empty
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (91) init_declarator_list -> . init_declarator _4_222c22_init_declarator_repeat
    (393) empty -> .
    (99) init_declarator -> . declarator _5_EQUALS_initializer_optional
    (161) declarator -> . typeid_declarator
    (162) declarator -> . id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    ALIGNAS_        shift and go to state 35
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    ;               reduce using rule 393 (empty -> .)
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    init_declarator_list_opt       shift and go to state 71
    alignment_specifier            shift and go to state 72
    type_specifier_no_typeid       shift and go to state 73
    function_specifier             shift and go to state 74
    storage_class_specifier        shift and go to state 75
    type_qualifier                 shift and go to state 76
    init_declarator_list           shift and go to state 78
    empty                          shift and go to state 79
    init_declarator                shift and go to state 82
    declarator                     shift and go to state 83
    typeid_declarator              shift and go to state 84
    id_declarator                  shift and go to state 186
    pointer                        shift and go to state 187
    direct_typeid_declarator       shift and go to state 85
    direct_id_declarator           shift and go to state 27

state 92

    (36) decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt .
    ;               reduce using rule 36 (decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt .)


state 93

    (55) declaration_specifiers -> declaration_specifiers_no_type type_specifier .
    ALIGNAS_        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INT128          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    UNSIGNED        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SIGNED          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    COMPLEX_        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    DOUBLE          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    FLOAT           reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LONG            reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INT             reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SHORT           reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    CHAR            reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    BOOL_           reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    VOID            reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    NORETURN_       reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INLINE          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    THREAD_LOCAL_   reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TYPEDEF         reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    EXTERN          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    STATIC          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    REGISTER        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    AUTO            reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    ATOMIC_         reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    VOLATILE        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    RESTRICT        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    CONST           reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TIMES           reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LPAREN          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    ID              reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TYPEID          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    ;               reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LBRACKET        reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    ,               reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    RPAREN          reduce using rule 55 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)


state 94

    (104) id_init_declarator_list_opt -> id_init_declarator_list .
    (102) id_init_declarator_list -> id_init_declarator_list . , init_declarator
    ;               reduce using rule 104 (id_init_declarator_list_opt -> id_init_declarator_list .)
    ,               shift and go to state 188


state 95

    (105) id_init_declarator_list_opt -> empty .
    ;               reduce using rule 105 (id_init_declarator_list_opt -> empty .)


state 96

    (81) type_specifier -> atomic_specifier .
    ALIGNAS_        reduce using rule 81 (type_specifier -> atomic_specifier .)
    INT128          reduce using rule 81 (type_specifier -> atomic_specifier .)
    UNSIGNED        reduce using rule 81 (type_specifier -> atomic_specifier .)
    SIGNED          reduce using rule 81 (type_specifier -> atomic_specifier .)
    COMPLEX_        reduce using rule 81 (type_specifier -> atomic_specifier .)
    DOUBLE          reduce using rule 81 (type_specifier -> atomic_specifier .)
    FLOAT           reduce using rule 81 (type_specifier -> atomic_specifier .)
    LONG            reduce using rule 81 (type_specifier -> atomic_specifier .)
    INT             reduce using rule 81 (type_specifier -> atomic_specifier .)
    SHORT           reduce using rule 81 (type_specifier -> atomic_specifier .)
    CHAR            reduce using rule 81 (type_specifier -> atomic_specifier .)
    BOOL_           reduce using rule 81 (type_specifier -> atomic_specifier .)
    VOID            reduce using rule 81 (type_specifier -> atomic_specifier .)
    NORETURN_       reduce using rule 81 (type_specifier -> atomic_specifier .)
    INLINE          reduce using rule 81 (type_specifier -> atomic_specifier .)
    THREAD_LOCAL_   reduce using rule 81 (type_specifier -> atomic_specifier .)
    TYPEDEF         reduce using rule 81 (type_specifier -> atomic_specifier .)
    EXTERN          reduce using rule 81 (type_specifier -> atomic_specifier .)
    STATIC          reduce using rule 81 (type_specifier -> atomic_specifier .)
    REGISTER        reduce using rule 81 (type_specifier -> atomic_specifier .)
    AUTO            reduce using rule 81 (type_specifier -> atomic_specifier .)
    ATOMIC_         reduce using rule 81 (type_specifier -> atomic_specifier .)
    VOLATILE        reduce using rule 81 (type_specifier -> atomic_specifier .)
    RESTRICT        reduce using rule 81 (type_specifier -> atomic_specifier .)
    CONST           reduce using rule 81 (type_specifier -> atomic_specifier .)
    TIMES           reduce using rule 81 (type_specifier -> atomic_specifier .)
    LPAREN          reduce using rule 81 (type_specifier -> atomic_specifier .)
    ID              reduce using rule 81 (type_specifier -> atomic_specifier .)
    TYPEID          reduce using rule 81 (type_specifier -> atomic_specifier .)
    ;               reduce using rule 81 (type_specifier -> atomic_specifier .)
    LBRACKET        reduce using rule 81 (type_specifier -> atomic_specifier .)
    RPAREN          reduce using rule 81 (type_specifier -> atomic_specifier .)
    :               reduce using rule 81 (type_specifier -> atomic_specifier .)
    ,               reduce using rule 81 (type_specifier -> atomic_specifier .)


state 97

    (103) id_init_declarator_list -> id_init_declarator .
    ,               reduce using rule 103 (id_init_declarator_list -> id_init_declarator .)
    ;               reduce using rule 103 (id_init_declarator_list -> id_init_declarator .)


state 98

    (86) atomic_specifier -> ATOMIC_ . LPAREN type_name RPAREN
    LPAREN          shift and go to state 116


state 99

    (106) id_init_declarator -> id_declarator . _6_EQUALS_initializer_optional
    (107) _6_EQUALS_initializer_optional -> . EQUALS initializer
    (108) _6_EQUALS_initializer_optional -> .
    EQUALS          shift and go to state 190
    ,               reduce using rule 108 (_6_EQUALS_initializer_optional -> .)
    ;               reduce using rule 108 (_6_EQUALS_initializer_optional -> .)

    _6_EQUALS_initializer_optional shift and go to state 189

state 100

    (47) declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .
    ATOMIC_         reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    INT128          reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    COMPLEX_        reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    BOOL_           reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    TYPEID          reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    ;               reduce using rule 47 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)


state 101

    (52) declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .
    ATOMIC_         reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    INT128          reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    UNSIGNED        reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SIGNED          reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    COMPLEX_        reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    DOUBLE          reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    FLOAT           reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    LONG            reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    INT             reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SHORT           reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    CHAR            reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    BOOL_           reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    VOID            reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ENUM            reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    TYPEID          reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    UNION           reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    STRUCT          reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    TIMES           reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    LPAREN          reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ID              reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ;               reduce using rule 52 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)


state 102

    (53) declaration_specifiers_no_type_opt -> empty .
    ATOMIC_         reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    INT128          reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    UNSIGNED        reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    SIGNED          reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    COMPLEX_        reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    DOUBLE          reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    FLOAT           reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    LONG            reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    INT             reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    SHORT           reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    CHAR            reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    BOOL_           reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    VOID            reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    ENUM            reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    TYPEID          reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    UNION           reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    STRUCT          reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    TIMES           reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    LPAREN          reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    ID              reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)
    ;               reduce using rule 53 (declaration_specifiers_no_type_opt -> empty .)


state 103

    (48) declaration_specifiers_no_type -> atomic_specifier . declaration_specifiers_no_type_opt
    (52) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (53) declaration_specifiers_no_type_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    INT128          reduce using rule 393 (empty -> .)
    UNSIGNED        reduce using rule 393 (empty -> .)
    SIGNED          reduce using rule 393 (empty -> .)
    COMPLEX_        reduce using rule 393 (empty -> .)
    DOUBLE          reduce using rule 393 (empty -> .)
    FLOAT           reduce using rule 393 (empty -> .)
    LONG            reduce using rule 393 (empty -> .)
    INT             reduce using rule 393 (empty -> .)
    SHORT           reduce using rule 393 (empty -> .)
    CHAR            reduce using rule 393 (empty -> .)
    BOOL_           reduce using rule 393 (empty -> .)
    VOID            reduce using rule 393 (empty -> .)
    ENUM            reduce using rule 393 (empty -> .)
    TYPEID          reduce using rule 393 (empty -> .)
    UNION           reduce using rule 393 (empty -> .)
    STRUCT          reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ;               reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    atomic_specifier               shift and go to state 103
    declaration_specifiers_no_type_opt shift and go to state 110
    declaration_specifiers_no_type shift and go to state 101
    empty                          shift and go to state 102
    alignment_specifier            shift and go to state 20
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25

state 104

    (49) declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .
    ATOMIC_         reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    INT128          reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    COMPLEX_        reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    BOOL_           reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    TYPEID          reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ;               reduce using rule 49 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)


state 105

    (50) declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .
    ATOMIC_         reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    INT128          reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    COMPLEX_        reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    BOOL_           reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    TYPEID          reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ;               reduce using rule 50 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)


state 106

    (51) declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .
    ATOMIC_         reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    INT128          reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    COMPLEX_        reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    BOOL_           reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    TYPEID          reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ;               reduce using rule 51 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)


state 107

    (163) id_declarator -> pointer direct_id_declarator .
    (169) direct_id_declarator -> direct_id_declarator . LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> direct_id_declarator . LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> direct_id_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    ALIGNAS_        reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    ATOMIC_         reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    NORETURN_       reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    INLINE          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    THREAD_LOCAL_   reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    TYPEDEF         reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    EXTERN          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    STATIC          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    REGISTER        reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    AUTO            reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    VOLATILE        reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    RESTRICT        reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    CONST           reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    INT128          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    UNSIGNED        reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    SIGNED          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    COMPLEX_        reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    DOUBLE          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    FLOAT           reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    LONG            reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    INT             reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    SHORT           reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    CHAR            reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    BOOL_           reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    VOID            reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    ENUM            reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    TYPEID          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    UNION           reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    STRUCT          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    LBRACE          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    RPAREN          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    EQUALS          reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    ,               reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    ;               reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    :               reduce using rule 163 (id_declarator -> pointer direct_id_declarator .)
    LPAREN          shift and go to state 108
    LBRACKET        shift and go to state 109


state 108

    (169) direct_id_declarator -> direct_id_declarator LPAREN . identifier_list_opt RPAREN
    (170) direct_id_declarator -> direct_id_declarator LPAREN . parameter_type_list RPAREN
    (221) identifier_list_opt -> . identifier_list
    (222) identifier_list_opt -> . empty
    (202) parameter_type_list -> . parameter_list , ELLIPSIS
    (203) parameter_type_list -> . parameter_list
    (215) identifier_list -> . identifier _15_222c22_identifier_repeat
    (393) empty -> .
    (206) parameter_list -> . parameter_declaration _14_222c22_parameter_declaration_repeat
    (368) identifier -> . ID
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RPAREN          reduce using rule 393 (empty -> .)
    ID              shift and go to state 142
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    identifier_list_opt            shift and go to state 191
    parameter_type_list            shift and go to state 192
    identifier_list                shift and go to state 193
    empty                          shift and go to state 194
    parameter_list                 shift and go to state 195
    identifier                     shift and go to state 196
    parameter_declaration          shift and go to state 197
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 109

    (171) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> direct_id_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    STATIC          shift and go to state 202
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    RBRACKET        reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 200
    type_qualifier_list            shift and go to state 201
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 110

    (48) declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .
    ATOMIC_         reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    INT128          reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    COMPLEX_        reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    BOOL_           reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    TYPEID          reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    ;               reduce using rule 48 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)


state 111

    (192) pointer -> TIMES type_qualifier_list_opt . pointer
    (193) pointer -> TIMES type_qualifier_list_opt .
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    LPAREN          reduce using rule 193 (pointer -> TIMES type_qualifier_list_opt .)
    ID              reduce using rule 193 (pointer -> TIMES type_qualifier_list_opt .)
    TYPEID          reduce using rule 193 (pointer -> TIMES type_qualifier_list_opt .)
    LBRACKET        reduce using rule 193 (pointer -> TIMES type_qualifier_list_opt .)
    ,               reduce using rule 193 (pointer -> TIMES type_qualifier_list_opt .)
    RPAREN          reduce using rule 193 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 32

    pointer                        shift and go to state 203

state 112

    (200) type_qualifier_list_opt -> type_qualifier_list .
    TIMES           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    TYPEID          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LBRACKET        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ,               reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    RPAREN          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ALIGNOF_        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)


state 113

    (201) type_qualifier_list_opt -> empty .
    TIMES           reduce using rule 201 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 201 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 201 (type_qualifier_list_opt -> empty .)
    TYPEID          reduce using rule 201 (type_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 201 (type_qualifier_list_opt -> empty .)
    ,               reduce using rule 201 (type_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 201 (type_qualifier_list_opt -> empty .)
    ALIGNOF_        reduce using rule 201 (type_qualifier_list_opt -> empty .)
    SIZEOF          reduce using rule 201 (type_qualifier_list_opt -> empty .)
    MINUSMINUS      reduce using rule 201 (type_qualifier_list_opt -> empty .)
    PLUSPLUS        reduce using rule 201 (type_qualifier_list_opt -> empty .)
    LNOT            reduce using rule 201 (type_qualifier_list_opt -> empty .)
    NOT             reduce using rule 201 (type_qualifier_list_opt -> empty .)
    MINUS           reduce using rule 201 (type_qualifier_list_opt -> empty .)
    PLUS            reduce using rule 201 (type_qualifier_list_opt -> empty .)
    AND             reduce using rule 201 (type_qualifier_list_opt -> empty .)
    OFFSETOF        reduce using rule 201 (type_qualifier_list_opt -> empty .)
    U32STRING_LITERAL reduce using rule 201 (type_qualifier_list_opt -> empty .)
    U16STRING_LITERAL reduce using rule 201 (type_qualifier_list_opt -> empty .)
    U8STRING_LITERAL reduce using rule 201 (type_qualifier_list_opt -> empty .)
    WSTRING_LITERAL reduce using rule 201 (type_qualifier_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 201 (type_qualifier_list_opt -> empty .)
    U32CHAR_CONST   reduce using rule 201 (type_qualifier_list_opt -> empty .)
    U16CHAR_CONST   reduce using rule 201 (type_qualifier_list_opt -> empty .)
    U8CHAR_CONST    reduce using rule 201 (type_qualifier_list_opt -> empty .)
    WCHAR_CONST     reduce using rule 201 (type_qualifier_list_opt -> empty .)
    CHAR_CONST      reduce using rule 201 (type_qualifier_list_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 201 (type_qualifier_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 201 (type_qualifier_list_opt -> empty .)
    INT_CONST_CHAR  reduce using rule 201 (type_qualifier_list_opt -> empty .)
    INT_CONST_BIN   reduce using rule 201 (type_qualifier_list_opt -> empty .)
    INT_CONST_HEX   reduce using rule 201 (type_qualifier_list_opt -> empty .)
    INT_CONST_OCT   reduce using rule 201 (type_qualifier_list_opt -> empty .)
    INT_CONST_DEC   reduce using rule 201 (type_qualifier_list_opt -> empty .)
    RBRACKET        reduce using rule 201 (type_qualifier_list_opt -> empty .)


state 114

    (194) type_qualifier_list -> type_qualifier . _13_type_qualifier_repeat
    (195) _13_type_qualifier_repeat -> . _13_type_qualifier_items
    (196) _13_type_qualifier_repeat -> .
    (197) _13_type_qualifier_items -> . _13_type_qualifier_items _13_type_qualifier_item
    (198) _13_type_qualifier_items -> . _13_type_qualifier_item
    (199) _13_type_qualifier_item -> . type_qualifier
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    TIMES           reduce using rule 196 (_13_type_qualifier_repeat -> .)
    LPAREN          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    ID              reduce using rule 196 (_13_type_qualifier_repeat -> .)
    TYPEID          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    LBRACKET        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    ,               reduce using rule 196 (_13_type_qualifier_repeat -> .)
    RPAREN          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    STATIC          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    ALIGNOF_        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    SIZEOF          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    MINUSMINUS      reduce using rule 196 (_13_type_qualifier_repeat -> .)
    PLUSPLUS        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    LNOT            reduce using rule 196 (_13_type_qualifier_repeat -> .)
    NOT             reduce using rule 196 (_13_type_qualifier_repeat -> .)
    MINUS           reduce using rule 196 (_13_type_qualifier_repeat -> .)
    PLUS            reduce using rule 196 (_13_type_qualifier_repeat -> .)
    AND             reduce using rule 196 (_13_type_qualifier_repeat -> .)
    OFFSETOF        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    U32STRING_LITERAL reduce using rule 196 (_13_type_qualifier_repeat -> .)
    U16STRING_LITERAL reduce using rule 196 (_13_type_qualifier_repeat -> .)
    U8STRING_LITERAL reduce using rule 196 (_13_type_qualifier_repeat -> .)
    WSTRING_LITERAL reduce using rule 196 (_13_type_qualifier_repeat -> .)
    STRING_LITERAL  reduce using rule 196 (_13_type_qualifier_repeat -> .)
    U32CHAR_CONST   reduce using rule 196 (_13_type_qualifier_repeat -> .)
    U16CHAR_CONST   reduce using rule 196 (_13_type_qualifier_repeat -> .)
    U8CHAR_CONST    reduce using rule 196 (_13_type_qualifier_repeat -> .)
    WCHAR_CONST     reduce using rule 196 (_13_type_qualifier_repeat -> .)
    CHAR_CONST      reduce using rule 196 (_13_type_qualifier_repeat -> .)
    HEX_FLOAT_CONST reduce using rule 196 (_13_type_qualifier_repeat -> .)
    FLOAT_CONST     reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT_CONST_CHAR  reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT_CONST_BIN   reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT_CONST_HEX   reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT_CONST_OCT   reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT_CONST_DEC   reduce using rule 196 (_13_type_qualifier_repeat -> .)
    RBRACKET        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT128          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    UNSIGNED        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    SIGNED          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    COMPLEX_        reduce using rule 196 (_13_type_qualifier_repeat -> .)
    DOUBLE          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    FLOAT           reduce using rule 196 (_13_type_qualifier_repeat -> .)
    LONG            reduce using rule 196 (_13_type_qualifier_repeat -> .)
    INT             reduce using rule 196 (_13_type_qualifier_repeat -> .)
    SHORT           reduce using rule 196 (_13_type_qualifier_repeat -> .)
    CHAR            reduce using rule 196 (_13_type_qualifier_repeat -> .)
    BOOL_           reduce using rule 196 (_13_type_qualifier_repeat -> .)
    VOID            reduce using rule 196 (_13_type_qualifier_repeat -> .)
    ENUM            reduce using rule 196 (_13_type_qualifier_repeat -> .)
    UNION           reduce using rule 196 (_13_type_qualifier_repeat -> .)
    STRUCT          reduce using rule 196 (_13_type_qualifier_repeat -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier                 shift and go to state 204
    _13_type_qualifier_repeat      shift and go to state 205
    _13_type_qualifier_items       shift and go to state 206
    _13_type_qualifier_item        shift and go to state 207

state 115

    (156) alignment_specifier -> ALIGNAS_ LPAREN . constant_expression RPAREN
    (157) alignment_specifier -> ALIGNAS_ LPAREN . type_name RPAREN
    (302) constant_expression -> . conditional_expression
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ALIGNAS_        shift and go to state 35
    LPAREN          shift and go to state 124
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 208
    type_name                      shift and go to state 209
    conditional_expression         shift and go to state 126
    specifier_qualifier_list       shift and go to state 210
    binary_expression              shift and go to state 127
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    cast_expression                shift and go to state 132
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_expression               shift and go to state 133
    struct_or_union                shift and go to state 59
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 116

    (86) atomic_specifier -> ATOMIC_ LPAREN . type_name RPAREN
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    type_name                      shift and go to state 215
    specifier_qualifier_list       shift and go to state 210
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 117

    (115) struct_or_union_specifier -> struct_or_union TYPEID . brace_open _7_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> struct_or_union TYPEID .
    (391) brace_open -> . LBRACE
    ALIGNAS_        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT128          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNSIGNED        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SIGNED          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COMPLEX_        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    DOUBLE          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    FLOAT           reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LONG            reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT             reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SHORT           reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CHAR            reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    BOOL_           reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOID            reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    NORETURN_       reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INLINE          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    THREAD_LOCAL_   reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEDEF         reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EXTERN          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STATIC          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    REGISTER        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    AUTO            reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ATOMIC_         reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOLATILE        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RESTRICT        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CONST           reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TIMES           reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LPAREN          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ID              reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEID          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ;               reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACKET        reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ,               reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RPAREN          reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    :               reduce using rule 124 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 216

state 118

    (121) struct_or_union_specifier -> struct_or_union brace_open . _9_struct_declaration_list_optional brace_close
    (122) _9_struct_declaration_list_optional -> . struct_declaration_list
    (123) _9_struct_declaration_list_optional -> .
    (128) struct_declaration_list -> . struct_declaration _10_struct_declaration_repeat
    (134) struct_declaration -> . pppragma_directive
    (135) struct_declaration -> . ;
    (136) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt ;
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RBRACE          reduce using rule 123 (_9_struct_declaration_list_optional -> .)
    ;               shift and go to state 221
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    struct_or_union                shift and go to state 59
    _9_struct_declaration_list_optional shift and go to state 217
    struct_declaration_list        shift and go to state 218
    struct_declaration             shift and go to state 219
    pppragma_directive             shift and go to state 220
    specifier_qualifier_list       shift and go to state 222
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31

state 119

    (118) struct_or_union_specifier -> struct_or_union ID . brace_open _8_struct_declaration_list_optional brace_close
    (125) struct_or_union_specifier -> struct_or_union ID .
    (391) brace_open -> . LBRACE
    ALIGNAS_        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    INT128          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    COMPLEX_        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    BOOL_           reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    NORETURN_       reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    INLINE          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    THREAD_LOCAL_   reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEDEF         reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    ATOMIC_         reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    RESTRICT        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    CONST           reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEID          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    ;               reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACKET        reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    ,               reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    :               reduce using rule 125 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 223

state 120

    (391) brace_open -> LBRACE .
    ;               reduce using rule 391 (brace_open -> LBRACE .)
    PRAGMA_         reduce using rule 391 (brace_open -> LBRACE .)
    PPPRAGMA        reduce using rule 391 (brace_open -> LBRACE .)
    ALIGNAS_        reduce using rule 391 (brace_open -> LBRACE .)
    ATOMIC_         reduce using rule 391 (brace_open -> LBRACE .)
    VOLATILE        reduce using rule 391 (brace_open -> LBRACE .)
    RESTRICT        reduce using rule 391 (brace_open -> LBRACE .)
    CONST           reduce using rule 391 (brace_open -> LBRACE .)
    INT128          reduce using rule 391 (brace_open -> LBRACE .)
    UNSIGNED        reduce using rule 391 (brace_open -> LBRACE .)
    SIGNED          reduce using rule 391 (brace_open -> LBRACE .)
    COMPLEX_        reduce using rule 391 (brace_open -> LBRACE .)
    DOUBLE          reduce using rule 391 (brace_open -> LBRACE .)
    FLOAT           reduce using rule 391 (brace_open -> LBRACE .)
    LONG            reduce using rule 391 (brace_open -> LBRACE .)
    INT             reduce using rule 391 (brace_open -> LBRACE .)
    SHORT           reduce using rule 391 (brace_open -> LBRACE .)
    CHAR            reduce using rule 391 (brace_open -> LBRACE .)
    BOOL_           reduce using rule 391 (brace_open -> LBRACE .)
    VOID            reduce using rule 391 (brace_open -> LBRACE .)
    ENUM            reduce using rule 391 (brace_open -> LBRACE .)
    TYPEID          reduce using rule 391 (brace_open -> LBRACE .)
    UNION           reduce using rule 391 (brace_open -> LBRACE .)
    STRUCT          reduce using rule 391 (brace_open -> LBRACE .)
    RBRACE          reduce using rule 391 (brace_open -> LBRACE .)
    ID              reduce using rule 391 (brace_open -> LBRACE .)
    STATIC_ASSERT_  reduce using rule 391 (brace_open -> LBRACE .)
    RETURN          reduce using rule 391 (brace_open -> LBRACE .)
    CONTINUE        reduce using rule 391 (brace_open -> LBRACE .)
    BREAK           reduce using rule 391 (brace_open -> LBRACE .)
    GOTO            reduce using rule 391 (brace_open -> LBRACE .)
    FOR             reduce using rule 391 (brace_open -> LBRACE .)
    DO              reduce using rule 391 (brace_open -> LBRACE .)
    WHILE           reduce using rule 391 (brace_open -> LBRACE .)
    SWITCH          reduce using rule 391 (brace_open -> LBRACE .)
    IF              reduce using rule 391 (brace_open -> LBRACE .)
    DEFAULT         reduce using rule 391 (brace_open -> LBRACE .)
    CASE            reduce using rule 391 (brace_open -> LBRACE .)
    LBRACE          reduce using rule 391 (brace_open -> LBRACE .)
    NORETURN_       reduce using rule 391 (brace_open -> LBRACE .)
    INLINE          reduce using rule 391 (brace_open -> LBRACE .)
    THREAD_LOCAL_   reduce using rule 391 (brace_open -> LBRACE .)
    TYPEDEF         reduce using rule 391 (brace_open -> LBRACE .)
    EXTERN          reduce using rule 391 (brace_open -> LBRACE .)
    STATIC          reduce using rule 391 (brace_open -> LBRACE .)
    REGISTER        reduce using rule 391 (brace_open -> LBRACE .)
    AUTO            reduce using rule 391 (brace_open -> LBRACE .)
    LPAREN          reduce using rule 391 (brace_open -> LBRACE .)
    ALIGNOF_        reduce using rule 391 (brace_open -> LBRACE .)
    SIZEOF          reduce using rule 391 (brace_open -> LBRACE .)
    MINUSMINUS      reduce using rule 391 (brace_open -> LBRACE .)
    PLUSPLUS        reduce using rule 391 (brace_open -> LBRACE .)
    LNOT            reduce using rule 391 (brace_open -> LBRACE .)
    NOT             reduce using rule 391 (brace_open -> LBRACE .)
    MINUS           reduce using rule 391 (brace_open -> LBRACE .)
    PLUS            reduce using rule 391 (brace_open -> LBRACE .)
    TIMES           reduce using rule 391 (brace_open -> LBRACE .)
    AND             reduce using rule 391 (brace_open -> LBRACE .)
    OFFSETOF        reduce using rule 391 (brace_open -> LBRACE .)
    U32STRING_LITERAL reduce using rule 391 (brace_open -> LBRACE .)
    U16STRING_LITERAL reduce using rule 391 (brace_open -> LBRACE .)
    U8STRING_LITERAL reduce using rule 391 (brace_open -> LBRACE .)
    WSTRING_LITERAL reduce using rule 391 (brace_open -> LBRACE .)
    STRING_LITERAL  reduce using rule 391 (brace_open -> LBRACE .)
    U32CHAR_CONST   reduce using rule 391 (brace_open -> LBRACE .)
    U16CHAR_CONST   reduce using rule 391 (brace_open -> LBRACE .)
    U8CHAR_CONST    reduce using rule 391 (brace_open -> LBRACE .)
    WCHAR_CONST     reduce using rule 391 (brace_open -> LBRACE .)
    CHAR_CONST      reduce using rule 391 (brace_open -> LBRACE .)
    HEX_FLOAT_CONST reduce using rule 391 (brace_open -> LBRACE .)
    FLOAT_CONST     reduce using rule 391 (brace_open -> LBRACE .)
    INT_CONST_CHAR  reduce using rule 391 (brace_open -> LBRACE .)
    INT_CONST_BIN   reduce using rule 391 (brace_open -> LBRACE .)
    INT_CONST_HEX   reduce using rule 391 (brace_open -> LBRACE .)
    INT_CONST_OCT   reduce using rule 391 (brace_open -> LBRACE .)
    INT_CONST_DEC   reduce using rule 391 (brace_open -> LBRACE .)
    .               reduce using rule 391 (brace_open -> LBRACE .)
    LBRACKET        reduce using rule 391 (brace_open -> LBRACE .)


state 121

    (148) enum_specifier -> ENUM TYPEID . brace_open enumerator_list brace_close
    (151) enum_specifier -> ENUM TYPEID .
    (391) brace_open -> . LBRACE
    ALIGNAS_        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    INT128          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    UNSIGNED        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    SIGNED          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    COMPLEX_        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    DOUBLE          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    FLOAT           reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    LONG            reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    INT             reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    SHORT           reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    CHAR            reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    BOOL_           reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    VOID            reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    NORETURN_       reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    INLINE          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    THREAD_LOCAL_   reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    TYPEDEF         reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    EXTERN          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    STATIC          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    REGISTER        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    AUTO            reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    ATOMIC_         reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    VOLATILE        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    RESTRICT        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    CONST           reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    TIMES           reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    LPAREN          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    ID              reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    TYPEID          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    ;               reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    LBRACKET        reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    ,               reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    RPAREN          reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    :               reduce using rule 151 (enum_specifier -> ENUM TYPEID .)
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 224

state 122

    (150) enum_specifier -> ENUM brace_open . enumerator_list brace_close
    (153) enumerator_list -> . enumerator_list , enumerator
    (154) enumerator_list -> . enumerator_list ,
    (155) enumerator_list -> . enumerator
    (158) enumerator -> . ID _12_EQUALS_constant_expression_optional
    ID              shift and go to state 227

    enumerator_list                shift and go to state 225
    enumerator                     shift and go to state 226

state 123

    (149) enum_specifier -> ENUM ID . brace_open enumerator_list brace_close
    (152) enum_specifier -> ENUM ID .
    (391) brace_open -> . LBRACE
    ALIGNAS_        reduce using rule 152 (enum_specifier -> ENUM ID .)
    INT128          reduce using rule 152 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 152 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 152 (enum_specifier -> ENUM ID .)
    COMPLEX_        reduce using rule 152 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 152 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 152 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 152 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 152 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 152 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 152 (enum_specifier -> ENUM ID .)
    BOOL_           reduce using rule 152 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 152 (enum_specifier -> ENUM ID .)
    NORETURN_       reduce using rule 152 (enum_specifier -> ENUM ID .)
    INLINE          reduce using rule 152 (enum_specifier -> ENUM ID .)
    THREAD_LOCAL_   reduce using rule 152 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 152 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 152 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 152 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 152 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 152 (enum_specifier -> ENUM ID .)
    ATOMIC_         reduce using rule 152 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 152 (enum_specifier -> ENUM ID .)
    RESTRICT        reduce using rule 152 (enum_specifier -> ENUM ID .)
    CONST           reduce using rule 152 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 152 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 152 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 152 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 152 (enum_specifier -> ENUM ID .)
    ;               reduce using rule 152 (enum_specifier -> ENUM ID .)
    LBRACKET        reduce using rule 152 (enum_specifier -> ENUM ID .)
    ,               reduce using rule 152 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 152 (enum_specifier -> ENUM ID .)
    :               reduce using rule 152 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 228

state 124

    (324) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (339) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (354) primary_expression -> LPAREN . expression RPAREN
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNAS_        shift and go to state 35
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    type_name                      shift and go to state 230
    cast_expression                shift and go to state 132
    expression                     shift and go to state 231
    specifier_qualifier_list       shift and go to state 210
    assignment_expression          shift and go to state 232
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    struct_or_union                shift and go to state 59
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 125

    (11) static_assert -> STATIC_ASSERT_ LPAREN constant_expression . _1_222c22_unified_string_literal_optional RPAREN
    (12) _1_222c22_unified_string_literal_optional -> . , unified_string_literal
    (13) _1_222c22_unified_string_literal_optional -> .
    ,               shift and go to state 236
    RPAREN          reduce using rule 13 (_1_222c22_unified_string_literal_optional -> .)

    _1_222c22_unified_string_literal_optional shift and go to state 235

state 126

    (302) constant_expression -> conditional_expression .
    ,               reduce using rule 302 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 302 (constant_expression -> conditional_expression .)
    :               reduce using rule 302 (constant_expression -> conditional_expression .)
    ;               reduce using rule 302 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 302 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 302 (constant_expression -> conditional_expression .)


state 127

    (303) conditional_expression -> binary_expression . CONDOP expression : conditional_expression
    (304) conditional_expression -> binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          shift and go to state 237
    ,               reduce using rule 304 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 304 (conditional_expression -> binary_expression .)
    ;               reduce using rule 304 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 304 (conditional_expression -> binary_expression .)
    :               reduce using rule 304 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 304 (conditional_expression -> binary_expression .)
    LOR             shift and go to state 238
    LAND            shift and go to state 239
    XOR             shift and go to state 240
    OR              shift and go to state 241
    AND             shift and go to state 242
    NE              shift and go to state 243
    EQ              shift and go to state 244
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 128

    (338) unary_operator -> AND .
    LPAREN          reduce using rule 338 (unary_operator -> AND .)
    ALIGNOF_        reduce using rule 338 (unary_operator -> AND .)
    SIZEOF          reduce using rule 338 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 338 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 338 (unary_operator -> AND .)
    LNOT            reduce using rule 338 (unary_operator -> AND .)
    NOT             reduce using rule 338 (unary_operator -> AND .)
    MINUS           reduce using rule 338 (unary_operator -> AND .)
    PLUS            reduce using rule 338 (unary_operator -> AND .)
    TIMES           reduce using rule 338 (unary_operator -> AND .)
    AND             reduce using rule 338 (unary_operator -> AND .)
    OFFSETOF        reduce using rule 338 (unary_operator -> AND .)
    U32STRING_LITERAL reduce using rule 338 (unary_operator -> AND .)
    U16STRING_LITERAL reduce using rule 338 (unary_operator -> AND .)
    U8STRING_LITERAL reduce using rule 338 (unary_operator -> AND .)
    WSTRING_LITERAL reduce using rule 338 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 338 (unary_operator -> AND .)
    U32CHAR_CONST   reduce using rule 338 (unary_operator -> AND .)
    U16CHAR_CONST   reduce using rule 338 (unary_operator -> AND .)
    U8CHAR_CONST    reduce using rule 338 (unary_operator -> AND .)
    WCHAR_CONST     reduce using rule 338 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 338 (unary_operator -> AND .)
    HEX_FLOAT_CONST reduce using rule 338 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 338 (unary_operator -> AND .)
    INT_CONST_CHAR  reduce using rule 338 (unary_operator -> AND .)
    INT_CONST_BIN   reduce using rule 338 (unary_operator -> AND .)
    INT_CONST_HEX   reduce using rule 338 (unary_operator -> AND .)
    INT_CONST_OCT   reduce using rule 338 (unary_operator -> AND .)
    INT_CONST_DEC   reduce using rule 338 (unary_operator -> AND .)
    ID              reduce using rule 338 (unary_operator -> AND .)


state 129

    (335) unary_operator -> MINUS .
    LPAREN          reduce using rule 335 (unary_operator -> MINUS .)
    ALIGNOF_        reduce using rule 335 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 335 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 335 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 335 (unary_operator -> MINUS .)
    LNOT            reduce using rule 335 (unary_operator -> MINUS .)
    NOT             reduce using rule 335 (unary_operator -> MINUS .)
    MINUS           reduce using rule 335 (unary_operator -> MINUS .)
    PLUS            reduce using rule 335 (unary_operator -> MINUS .)
    TIMES           reduce using rule 335 (unary_operator -> MINUS .)
    AND             reduce using rule 335 (unary_operator -> MINUS .)
    OFFSETOF        reduce using rule 335 (unary_operator -> MINUS .)
    U32STRING_LITERAL reduce using rule 335 (unary_operator -> MINUS .)
    U16STRING_LITERAL reduce using rule 335 (unary_operator -> MINUS .)
    U8STRING_LITERAL reduce using rule 335 (unary_operator -> MINUS .)
    WSTRING_LITERAL reduce using rule 335 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 335 (unary_operator -> MINUS .)
    U32CHAR_CONST   reduce using rule 335 (unary_operator -> MINUS .)
    U16CHAR_CONST   reduce using rule 335 (unary_operator -> MINUS .)
    U8CHAR_CONST    reduce using rule 335 (unary_operator -> MINUS .)
    WCHAR_CONST     reduce using rule 335 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 335 (unary_operator -> MINUS .)
    HEX_FLOAT_CONST reduce using rule 335 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 335 (unary_operator -> MINUS .)
    INT_CONST_CHAR  reduce using rule 335 (unary_operator -> MINUS .)
    INT_CONST_BIN   reduce using rule 335 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 335 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 335 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 335 (unary_operator -> MINUS .)
    ID              reduce using rule 335 (unary_operator -> MINUS .)


state 130

    (336) unary_operator -> PLUS .
    LPAREN          reduce using rule 336 (unary_operator -> PLUS .)
    ALIGNOF_        reduce using rule 336 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 336 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 336 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 336 (unary_operator -> PLUS .)
    LNOT            reduce using rule 336 (unary_operator -> PLUS .)
    NOT             reduce using rule 336 (unary_operator -> PLUS .)
    MINUS           reduce using rule 336 (unary_operator -> PLUS .)
    PLUS            reduce using rule 336 (unary_operator -> PLUS .)
    TIMES           reduce using rule 336 (unary_operator -> PLUS .)
    AND             reduce using rule 336 (unary_operator -> PLUS .)
    OFFSETOF        reduce using rule 336 (unary_operator -> PLUS .)
    U32STRING_LITERAL reduce using rule 336 (unary_operator -> PLUS .)
    U16STRING_LITERAL reduce using rule 336 (unary_operator -> PLUS .)
    U8STRING_LITERAL reduce using rule 336 (unary_operator -> PLUS .)
    WSTRING_LITERAL reduce using rule 336 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 336 (unary_operator -> PLUS .)
    U32CHAR_CONST   reduce using rule 336 (unary_operator -> PLUS .)
    U16CHAR_CONST   reduce using rule 336 (unary_operator -> PLUS .)
    U8CHAR_CONST    reduce using rule 336 (unary_operator -> PLUS .)
    WCHAR_CONST     reduce using rule 336 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 336 (unary_operator -> PLUS .)
    HEX_FLOAT_CONST reduce using rule 336 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 336 (unary_operator -> PLUS .)
    INT_CONST_CHAR  reduce using rule 336 (unary_operator -> PLUS .)
    INT_CONST_BIN   reduce using rule 336 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 336 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 336 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 336 (unary_operator -> PLUS .)
    ID              reduce using rule 336 (unary_operator -> PLUS .)


state 131

    (337) unary_operator -> TIMES .
    LPAREN          reduce using rule 337 (unary_operator -> TIMES .)
    ALIGNOF_        reduce using rule 337 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 337 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 337 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 337 (unary_operator -> TIMES .)
    LNOT            reduce using rule 337 (unary_operator -> TIMES .)
    NOT             reduce using rule 337 (unary_operator -> TIMES .)
    MINUS           reduce using rule 337 (unary_operator -> TIMES .)
    PLUS            reduce using rule 337 (unary_operator -> TIMES .)
    TIMES           reduce using rule 337 (unary_operator -> TIMES .)
    AND             reduce using rule 337 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 337 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 337 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 337 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 337 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 337 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 337 (unary_operator -> TIMES .)
    ID              reduce using rule 337 (unary_operator -> TIMES .)


state 132

    (323) binary_expression -> cast_expression .
    CONDOP          reduce using rule 323 (binary_expression -> cast_expression .)
    LOR             reduce using rule 323 (binary_expression -> cast_expression .)
    LAND            reduce using rule 323 (binary_expression -> cast_expression .)
    XOR             reduce using rule 323 (binary_expression -> cast_expression .)
    OR              reduce using rule 323 (binary_expression -> cast_expression .)
    AND             reduce using rule 323 (binary_expression -> cast_expression .)
    NE              reduce using rule 323 (binary_expression -> cast_expression .)
    EQ              reduce using rule 323 (binary_expression -> cast_expression .)
    GT              reduce using rule 323 (binary_expression -> cast_expression .)
    GE              reduce using rule 323 (binary_expression -> cast_expression .)
    LE              reduce using rule 323 (binary_expression -> cast_expression .)
    LT              reduce using rule 323 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 323 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 323 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 323 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 323 (binary_expression -> cast_expression .)
    MOD             reduce using rule 323 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 323 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 323 (binary_expression -> cast_expression .)
    ,               reduce using rule 323 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 323 (binary_expression -> cast_expression .)
    ;               reduce using rule 323 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 323 (binary_expression -> cast_expression .)
    :               reduce using rule 323 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 323 (binary_expression -> cast_expression .)


state 133

    (325) cast_expression -> unary_expression .
    CONDOP          reduce using rule 325 (cast_expression -> unary_expression .)
    LOR             reduce using rule 325 (cast_expression -> unary_expression .)
    LAND            reduce using rule 325 (cast_expression -> unary_expression .)
    XOR             reduce using rule 325 (cast_expression -> unary_expression .)
    OR              reduce using rule 325 (cast_expression -> unary_expression .)
    AND             reduce using rule 325 (cast_expression -> unary_expression .)
    NE              reduce using rule 325 (cast_expression -> unary_expression .)
    EQ              reduce using rule 325 (cast_expression -> unary_expression .)
    GT              reduce using rule 325 (cast_expression -> unary_expression .)
    GE              reduce using rule 325 (cast_expression -> unary_expression .)
    LE              reduce using rule 325 (cast_expression -> unary_expression .)
    LT              reduce using rule 325 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 325 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 325 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 325 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 325 (cast_expression -> unary_expression .)
    MOD             reduce using rule 325 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 325 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 325 (cast_expression -> unary_expression .)
    ,               reduce using rule 325 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 325 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 325 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 325 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 325 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 325 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 325 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 325 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 325 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 325 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 325 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 325 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 325 (cast_expression -> unary_expression .)
    ;               reduce using rule 325 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 325 (cast_expression -> unary_expression .)
    :               reduce using rule 325 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 325 (cast_expression -> unary_expression .)


state 134

    (326) unary_expression -> ALIGNOF_ . LPAREN type_name RPAREN
    LPAREN          shift and go to state 256


state 135

    (327) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (328) unary_expression -> SIZEOF . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 257
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    unary_expression               shift and go to state 258
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 136

    (329) unary_expression -> unary_operator . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 259
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 137

    (330) unary_expression -> MINUSMINUS . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    LPAREN          shift and go to state 261
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    unary_expression               shift and go to state 260
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 138

    (331) unary_expression -> PLUSPLUS . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    LPAREN          shift and go to state 261
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    unary_expression               shift and go to state 262
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 139

    (332) unary_expression -> postfix_expression .
    (342) postfix_expression -> postfix_expression . MINUSMINUS
    (343) postfix_expression -> postfix_expression . PLUSPLUS
    (344) postfix_expression -> postfix_expression . ARROW TYPEID
    (345) postfix_expression -> postfix_expression . ARROW ID
    (346) postfix_expression -> postfix_expression . . TYPEID
    (347) postfix_expression -> postfix_expression . . ID
    (348) postfix_expression -> postfix_expression . LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    CONDOP          reduce using rule 332 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 332 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 332 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 332 (unary_expression -> postfix_expression .)
    OR              reduce using rule 332 (unary_expression -> postfix_expression .)
    AND             reduce using rule 332 (unary_expression -> postfix_expression .)
    NE              reduce using rule 332 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 332 (unary_expression -> postfix_expression .)
    GT              reduce using rule 332 (unary_expression -> postfix_expression .)
    GE              reduce using rule 332 (unary_expression -> postfix_expression .)
    LE              reduce using rule 332 (unary_expression -> postfix_expression .)
    LT              reduce using rule 332 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 332 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 332 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 332 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 332 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 332 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 332 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 332 (unary_expression -> postfix_expression .)
    ,               reduce using rule 332 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 332 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 332 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 332 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 332 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 332 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 332 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 332 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 332 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 332 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 332 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 332 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 332 (unary_expression -> postfix_expression .)
    ;               reduce using rule 332 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 332 (unary_expression -> postfix_expression .)
    :               reduce using rule 332 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 332 (unary_expression -> postfix_expression .)
    MINUSMINUS      shift and go to state 263
    PLUSPLUS        shift and go to state 264
    ARROW           shift and go to state 265
    .               shift and go to state 266
    LPAREN          shift and go to state 267
    LBRACKET        shift and go to state 268


state 140

    (333) unary_operator -> LNOT .
    LPAREN          reduce using rule 333 (unary_operator -> LNOT .)
    ALIGNOF_        reduce using rule 333 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 333 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 333 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 333 (unary_operator -> LNOT .)
    LNOT            reduce using rule 333 (unary_operator -> LNOT .)
    NOT             reduce using rule 333 (unary_operator -> LNOT .)
    MINUS           reduce using rule 333 (unary_operator -> LNOT .)
    PLUS            reduce using rule 333 (unary_operator -> LNOT .)
    TIMES           reduce using rule 333 (unary_operator -> LNOT .)
    AND             reduce using rule 333 (unary_operator -> LNOT .)
    OFFSETOF        reduce using rule 333 (unary_operator -> LNOT .)
    U32STRING_LITERAL reduce using rule 333 (unary_operator -> LNOT .)
    U16STRING_LITERAL reduce using rule 333 (unary_operator -> LNOT .)
    U8STRING_LITERAL reduce using rule 333 (unary_operator -> LNOT .)
    WSTRING_LITERAL reduce using rule 333 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 333 (unary_operator -> LNOT .)
    U32CHAR_CONST   reduce using rule 333 (unary_operator -> LNOT .)
    U16CHAR_CONST   reduce using rule 333 (unary_operator -> LNOT .)
    U8CHAR_CONST    reduce using rule 333 (unary_operator -> LNOT .)
    WCHAR_CONST     reduce using rule 333 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 333 (unary_operator -> LNOT .)
    HEX_FLOAT_CONST reduce using rule 333 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 333 (unary_operator -> LNOT .)
    INT_CONST_CHAR  reduce using rule 333 (unary_operator -> LNOT .)
    INT_CONST_BIN   reduce using rule 333 (unary_operator -> LNOT .)
    INT_CONST_HEX   reduce using rule 333 (unary_operator -> LNOT .)
    INT_CONST_OCT   reduce using rule 333 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 333 (unary_operator -> LNOT .)
    ID              reduce using rule 333 (unary_operator -> LNOT .)


state 141

    (334) unary_operator -> NOT .
    LPAREN          reduce using rule 334 (unary_operator -> NOT .)
    ALIGNOF_        reduce using rule 334 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 334 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 334 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 334 (unary_operator -> NOT .)
    LNOT            reduce using rule 334 (unary_operator -> NOT .)
    NOT             reduce using rule 334 (unary_operator -> NOT .)
    MINUS           reduce using rule 334 (unary_operator -> NOT .)
    PLUS            reduce using rule 334 (unary_operator -> NOT .)
    TIMES           reduce using rule 334 (unary_operator -> NOT .)
    AND             reduce using rule 334 (unary_operator -> NOT .)
    OFFSETOF        reduce using rule 334 (unary_operator -> NOT .)
    U32STRING_LITERAL reduce using rule 334 (unary_operator -> NOT .)
    U16STRING_LITERAL reduce using rule 334 (unary_operator -> NOT .)
    U8STRING_LITERAL reduce using rule 334 (unary_operator -> NOT .)
    WSTRING_LITERAL reduce using rule 334 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 334 (unary_operator -> NOT .)
    U32CHAR_CONST   reduce using rule 334 (unary_operator -> NOT .)
    U16CHAR_CONST   reduce using rule 334 (unary_operator -> NOT .)
    U8CHAR_CONST    reduce using rule 334 (unary_operator -> NOT .)
    WCHAR_CONST     reduce using rule 334 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 334 (unary_operator -> NOT .)
    HEX_FLOAT_CONST reduce using rule 334 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 334 (unary_operator -> NOT .)
    INT_CONST_CHAR  reduce using rule 334 (unary_operator -> NOT .)
    INT_CONST_BIN   reduce using rule 334 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 334 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 334 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 334 (unary_operator -> NOT .)
    ID              reduce using rule 334 (unary_operator -> NOT .)


state 142

    (368) identifier -> ID .
    MINUSMINUS      reduce using rule 368 (identifier -> ID .)
    PLUSPLUS        reduce using rule 368 (identifier -> ID .)
    ARROW           reduce using rule 368 (identifier -> ID .)
    .               reduce using rule 368 (identifier -> ID .)
    LPAREN          reduce using rule 368 (identifier -> ID .)
    LBRACKET        reduce using rule 368 (identifier -> ID .)
    CONDOP          reduce using rule 368 (identifier -> ID .)
    LOR             reduce using rule 368 (identifier -> ID .)
    LAND            reduce using rule 368 (identifier -> ID .)
    XOR             reduce using rule 368 (identifier -> ID .)
    OR              reduce using rule 368 (identifier -> ID .)
    AND             reduce using rule 368 (identifier -> ID .)
    NE              reduce using rule 368 (identifier -> ID .)
    EQ              reduce using rule 368 (identifier -> ID .)
    GT              reduce using rule 368 (identifier -> ID .)
    GE              reduce using rule 368 (identifier -> ID .)
    LE              reduce using rule 368 (identifier -> ID .)
    LT              reduce using rule 368 (identifier -> ID .)
    LSHIFT          reduce using rule 368 (identifier -> ID .)
    RSHIFT          reduce using rule 368 (identifier -> ID .)
    MINUS           reduce using rule 368 (identifier -> ID .)
    PLUS            reduce using rule 368 (identifier -> ID .)
    MOD             reduce using rule 368 (identifier -> ID .)
    DIVIDE          reduce using rule 368 (identifier -> ID .)
    TIMES           reduce using rule 368 (identifier -> ID .)
    ,               reduce using rule 368 (identifier -> ID .)
    RPAREN          reduce using rule 368 (identifier -> ID .)
    OREQUAL         reduce using rule 368 (identifier -> ID .)
    ANDEQUAL        reduce using rule 368 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 368 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 368 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 368 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 368 (identifier -> ID .)
    MODEQUAL        reduce using rule 368 (identifier -> ID .)
    DIVEQUAL        reduce using rule 368 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 368 (identifier -> ID .)
    XOREQUAL        reduce using rule 368 (identifier -> ID .)
    EQUALS          reduce using rule 368 (identifier -> ID .)
    ;               reduce using rule 368 (identifier -> ID .)
    RBRACKET        reduce using rule 368 (identifier -> ID .)
    :               reduce using rule 368 (identifier -> ID .)
    RBRACE          reduce using rule 368 (identifier -> ID .)


state 143

    (352) postfix_expression -> primary_expression .
    MINUSMINUS      reduce using rule 352 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 352 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 352 (postfix_expression -> primary_expression .)
    .               reduce using rule 352 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 352 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 352 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 352 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 352 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 352 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 352 (postfix_expression -> primary_expression .)
    OR              reduce using rule 352 (postfix_expression -> primary_expression .)
    AND             reduce using rule 352 (postfix_expression -> primary_expression .)
    NE              reduce using rule 352 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 352 (postfix_expression -> primary_expression .)
    GT              reduce using rule 352 (postfix_expression -> primary_expression .)
    GE              reduce using rule 352 (postfix_expression -> primary_expression .)
    LE              reduce using rule 352 (postfix_expression -> primary_expression .)
    LT              reduce using rule 352 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 352 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 352 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 352 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 352 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 352 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 352 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 352 (postfix_expression -> primary_expression .)
    ,               reduce using rule 352 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 352 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 352 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 352 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 352 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 352 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 352 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 352 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 352 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 352 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 352 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 352 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 352 (postfix_expression -> primary_expression .)
    ;               reduce using rule 352 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 352 (postfix_expression -> primary_expression .)
    :               reduce using rule 352 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 352 (postfix_expression -> primary_expression .)


state 144

    (353) primary_expression -> OFFSETOF . LPAREN type_name , offsetof_member_designator RPAREN
    LPAREN          shift and go to state 269


state 145

    (355) primary_expression -> unified_wstring_literal .
    (383) unified_wstring_literal -> unified_wstring_literal . U32STRING_LITERAL
    (384) unified_wstring_literal -> unified_wstring_literal . U16STRING_LITERAL
    (385) unified_wstring_literal -> unified_wstring_literal . U8STRING_LITERAL
    (386) unified_wstring_literal -> unified_wstring_literal . WSTRING_LITERAL
    MINUSMINUS      reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    PLUSPLUS        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    ARROW           reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    .               reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LPAREN          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LBRACKET        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    CONDOP          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LOR             reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LAND            reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    XOR             reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    OR              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    AND             reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    NE              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    EQ              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    GT              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    GE              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LE              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LT              reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LSHIFT          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    RSHIFT          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    MINUS           reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    PLUS            reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    MOD             reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    DIVIDE          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    TIMES           reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    ,               reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    RPAREN          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    OREQUAL         reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    ANDEQUAL        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    RSHIFTEQUAL     reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    LSHIFTEQUAL     reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    MINUSEQUAL      reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    PLUSEQUAL       reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    MODEQUAL        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    DIVEQUAL        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    TIMESEQUAL      reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    XOREQUAL        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    EQUALS          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    ;               reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    RBRACKET        reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    :               reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    RBRACE          reduce using rule 355 (primary_expression -> unified_wstring_literal .)
    U32STRING_LITERAL shift and go to state 270
    U16STRING_LITERAL shift and go to state 271
    U8STRING_LITERAL shift and go to state 272
    WSTRING_LITERAL shift and go to state 273


state 146

    (356) primary_expression -> unified_string_literal .
    (381) unified_string_literal -> unified_string_literal . STRING_LITERAL
    MINUSMINUS      reduce using rule 356 (primary_expression -> unified_string_literal .)
    PLUSPLUS        reduce using rule 356 (primary_expression -> unified_string_literal .)
    ARROW           reduce using rule 356 (primary_expression -> unified_string_literal .)
    .               reduce using rule 356 (primary_expression -> unified_string_literal .)
    LPAREN          reduce using rule 356 (primary_expression -> unified_string_literal .)
    LBRACKET        reduce using rule 356 (primary_expression -> unified_string_literal .)
    CONDOP          reduce using rule 356 (primary_expression -> unified_string_literal .)
    LOR             reduce using rule 356 (primary_expression -> unified_string_literal .)
    LAND            reduce using rule 356 (primary_expression -> unified_string_literal .)
    XOR             reduce using rule 356 (primary_expression -> unified_string_literal .)
    OR              reduce using rule 356 (primary_expression -> unified_string_literal .)
    AND             reduce using rule 356 (primary_expression -> unified_string_literal .)
    NE              reduce using rule 356 (primary_expression -> unified_string_literal .)
    EQ              reduce using rule 356 (primary_expression -> unified_string_literal .)
    GT              reduce using rule 356 (primary_expression -> unified_string_literal .)
    GE              reduce using rule 356 (primary_expression -> unified_string_literal .)
    LE              reduce using rule 356 (primary_expression -> unified_string_literal .)
    LT              reduce using rule 356 (primary_expression -> unified_string_literal .)
    LSHIFT          reduce using rule 356 (primary_expression -> unified_string_literal .)
    RSHIFT          reduce using rule 356 (primary_expression -> unified_string_literal .)
    MINUS           reduce using rule 356 (primary_expression -> unified_string_literal .)
    PLUS            reduce using rule 356 (primary_expression -> unified_string_literal .)
    MOD             reduce using rule 356 (primary_expression -> unified_string_literal .)
    DIVIDE          reduce using rule 356 (primary_expression -> unified_string_literal .)
    TIMES           reduce using rule 356 (primary_expression -> unified_string_literal .)
    ,               reduce using rule 356 (primary_expression -> unified_string_literal .)
    RPAREN          reduce using rule 356 (primary_expression -> unified_string_literal .)
    OREQUAL         reduce using rule 356 (primary_expression -> unified_string_literal .)
    ANDEQUAL        reduce using rule 356 (primary_expression -> unified_string_literal .)
    RSHIFTEQUAL     reduce using rule 356 (primary_expression -> unified_string_literal .)
    LSHIFTEQUAL     reduce using rule 356 (primary_expression -> unified_string_literal .)
    MINUSEQUAL      reduce using rule 356 (primary_expression -> unified_string_literal .)
    PLUSEQUAL       reduce using rule 356 (primary_expression -> unified_string_literal .)
    MODEQUAL        reduce using rule 356 (primary_expression -> unified_string_literal .)
    DIVEQUAL        reduce using rule 356 (primary_expression -> unified_string_literal .)
    TIMESEQUAL      reduce using rule 356 (primary_expression -> unified_string_literal .)
    XOREQUAL        reduce using rule 356 (primary_expression -> unified_string_literal .)
    EQUALS          reduce using rule 356 (primary_expression -> unified_string_literal .)
    ;               reduce using rule 356 (primary_expression -> unified_string_literal .)
    RBRACKET        reduce using rule 356 (primary_expression -> unified_string_literal .)
    :               reduce using rule 356 (primary_expression -> unified_string_literal .)
    RBRACE          reduce using rule 356 (primary_expression -> unified_string_literal .)
    STRING_LITERAL  shift and go to state 274


state 147

    (357) primary_expression -> constant .
    MINUSMINUS      reduce using rule 357 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 357 (primary_expression -> constant .)
    ARROW           reduce using rule 357 (primary_expression -> constant .)
    .               reduce using rule 357 (primary_expression -> constant .)
    LPAREN          reduce using rule 357 (primary_expression -> constant .)
    LBRACKET        reduce using rule 357 (primary_expression -> constant .)
    CONDOP          reduce using rule 357 (primary_expression -> constant .)
    LOR             reduce using rule 357 (primary_expression -> constant .)
    LAND            reduce using rule 357 (primary_expression -> constant .)
    XOR             reduce using rule 357 (primary_expression -> constant .)
    OR              reduce using rule 357 (primary_expression -> constant .)
    AND             reduce using rule 357 (primary_expression -> constant .)
    NE              reduce using rule 357 (primary_expression -> constant .)
    EQ              reduce using rule 357 (primary_expression -> constant .)
    GT              reduce using rule 357 (primary_expression -> constant .)
    GE              reduce using rule 357 (primary_expression -> constant .)
    LE              reduce using rule 357 (primary_expression -> constant .)
    LT              reduce using rule 357 (primary_expression -> constant .)
    LSHIFT          reduce using rule 357 (primary_expression -> constant .)
    RSHIFT          reduce using rule 357 (primary_expression -> constant .)
    MINUS           reduce using rule 357 (primary_expression -> constant .)
    PLUS            reduce using rule 357 (primary_expression -> constant .)
    MOD             reduce using rule 357 (primary_expression -> constant .)
    DIVIDE          reduce using rule 357 (primary_expression -> constant .)
    TIMES           reduce using rule 357 (primary_expression -> constant .)
    ,               reduce using rule 357 (primary_expression -> constant .)
    RPAREN          reduce using rule 357 (primary_expression -> constant .)
    OREQUAL         reduce using rule 357 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 357 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 357 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 357 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 357 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 357 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 357 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 357 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 357 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 357 (primary_expression -> constant .)
    EQUALS          reduce using rule 357 (primary_expression -> constant .)
    ;               reduce using rule 357 (primary_expression -> constant .)
    RBRACKET        reduce using rule 357 (primary_expression -> constant .)
    :               reduce using rule 357 (primary_expression -> constant .)
    RBRACE          reduce using rule 357 (primary_expression -> constant .)


state 148

    (358) primary_expression -> identifier .
    MINUSMINUS      reduce using rule 358 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 358 (primary_expression -> identifier .)
    ARROW           reduce using rule 358 (primary_expression -> identifier .)
    .               reduce using rule 358 (primary_expression -> identifier .)
    LPAREN          reduce using rule 358 (primary_expression -> identifier .)
    LBRACKET        reduce using rule 358 (primary_expression -> identifier .)
    CONDOP          reduce using rule 358 (primary_expression -> identifier .)
    LOR             reduce using rule 358 (primary_expression -> identifier .)
    LAND            reduce using rule 358 (primary_expression -> identifier .)
    XOR             reduce using rule 358 (primary_expression -> identifier .)
    OR              reduce using rule 358 (primary_expression -> identifier .)
    AND             reduce using rule 358 (primary_expression -> identifier .)
    NE              reduce using rule 358 (primary_expression -> identifier .)
    EQ              reduce using rule 358 (primary_expression -> identifier .)
    GT              reduce using rule 358 (primary_expression -> identifier .)
    GE              reduce using rule 358 (primary_expression -> identifier .)
    LE              reduce using rule 358 (primary_expression -> identifier .)
    LT              reduce using rule 358 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 358 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 358 (primary_expression -> identifier .)
    MINUS           reduce using rule 358 (primary_expression -> identifier .)
    PLUS            reduce using rule 358 (primary_expression -> identifier .)
    MOD             reduce using rule 358 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 358 (primary_expression -> identifier .)
    TIMES           reduce using rule 358 (primary_expression -> identifier .)
    ,               reduce using rule 358 (primary_expression -> identifier .)
    RPAREN          reduce using rule 358 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 358 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 358 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 358 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 358 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 358 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 358 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 358 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 358 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 358 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 358 (primary_expression -> identifier .)
    EQUALS          reduce using rule 358 (primary_expression -> identifier .)
    ;               reduce using rule 358 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 358 (primary_expression -> identifier .)
    :               reduce using rule 358 (primary_expression -> identifier .)
    RBRACE          reduce using rule 358 (primary_expression -> identifier .)


state 149

    (387) unified_wstring_literal -> U32STRING_LITERAL .
    U32STRING_LITERAL reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    MINUSMINUS      reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    PLUSPLUS        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    ARROW           reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    .               reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LPAREN          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LBRACKET        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    CONDOP          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LOR             reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LAND            reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    XOR             reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    OR              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    AND             reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    NE              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    EQ              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    GT              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    GE              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LE              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LT              reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LSHIFT          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    RSHIFT          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    MINUS           reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    PLUS            reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    MOD             reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    DIVIDE          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    TIMES           reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    ,               reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    RPAREN          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    OREQUAL         reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    ANDEQUAL        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    MODEQUAL        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    DIVEQUAL        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    XOREQUAL        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    EQUALS          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    ;               reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    RBRACKET        reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    :               reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)
    RBRACE          reduce using rule 387 (unified_wstring_literal -> U32STRING_LITERAL .)


state 150

    (388) unified_wstring_literal -> U16STRING_LITERAL .
    U32STRING_LITERAL reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    MINUSMINUS      reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    PLUSPLUS        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    ARROW           reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    .               reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LPAREN          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LBRACKET        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    CONDOP          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LOR             reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LAND            reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    XOR             reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    OR              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    AND             reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    NE              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    EQ              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    GT              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    GE              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LE              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LT              reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LSHIFT          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    RSHIFT          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    MINUS           reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    PLUS            reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    MOD             reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    DIVIDE          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    TIMES           reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    ,               reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    RPAREN          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    OREQUAL         reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    ANDEQUAL        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    MODEQUAL        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    DIVEQUAL        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    XOREQUAL        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    EQUALS          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    ;               reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    RBRACKET        reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    :               reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)
    RBRACE          reduce using rule 388 (unified_wstring_literal -> U16STRING_LITERAL .)


state 151

    (389) unified_wstring_literal -> U8STRING_LITERAL .
    U32STRING_LITERAL reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    MINUSMINUS      reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    PLUSPLUS        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    ARROW           reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    .               reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LPAREN          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LBRACKET        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    CONDOP          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LOR             reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LAND            reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    XOR             reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    OR              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    AND             reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    NE              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    EQ              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    GT              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    GE              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LE              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LT              reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LSHIFT          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    RSHIFT          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    MINUS           reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    PLUS            reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    MOD             reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    DIVIDE          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    TIMES           reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    ,               reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    RPAREN          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    OREQUAL         reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    ANDEQUAL        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    MODEQUAL        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    DIVEQUAL        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    XOREQUAL        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    EQUALS          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    ;               reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    RBRACKET        reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    :               reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)
    RBRACE          reduce using rule 389 (unified_wstring_literal -> U8STRING_LITERAL .)


state 152

    (390) unified_wstring_literal -> WSTRING_LITERAL .
    U32STRING_LITERAL reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    ARROW           reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    .               reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LPAREN          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LBRACKET        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    CONDOP          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LOR             reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LAND            reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOR             reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    OR              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    AND             reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    NE              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQ              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    GT              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    GE              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LE              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LT              reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFT          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFT          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUS           reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUS            reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    MOD             reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVIDE          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMES           reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    ,               reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    RPAREN          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    OREQUAL         reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQUALS          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    ;               reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACKET        reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    :               reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACE          reduce using rule 390 (unified_wstring_literal -> WSTRING_LITERAL .)


state 153

    (382) unified_string_literal -> STRING_LITERAL .
    STRING_LITERAL  reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    .               reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LBRACKET        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    OR              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    AND             reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    NE              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    GT              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    GE              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LE              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LT              reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    ,               reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    ;               reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    :               reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 382 (unified_string_literal -> STRING_LITERAL .)


state 154

    (369) constant -> U32CHAR_CONST .
    MINUSMINUS      reduce using rule 369 (constant -> U32CHAR_CONST .)
    PLUSPLUS        reduce using rule 369 (constant -> U32CHAR_CONST .)
    ARROW           reduce using rule 369 (constant -> U32CHAR_CONST .)
    .               reduce using rule 369 (constant -> U32CHAR_CONST .)
    LPAREN          reduce using rule 369 (constant -> U32CHAR_CONST .)
    LBRACKET        reduce using rule 369 (constant -> U32CHAR_CONST .)
    CONDOP          reduce using rule 369 (constant -> U32CHAR_CONST .)
    LOR             reduce using rule 369 (constant -> U32CHAR_CONST .)
    LAND            reduce using rule 369 (constant -> U32CHAR_CONST .)
    XOR             reduce using rule 369 (constant -> U32CHAR_CONST .)
    OR              reduce using rule 369 (constant -> U32CHAR_CONST .)
    AND             reduce using rule 369 (constant -> U32CHAR_CONST .)
    NE              reduce using rule 369 (constant -> U32CHAR_CONST .)
    EQ              reduce using rule 369 (constant -> U32CHAR_CONST .)
    GT              reduce using rule 369 (constant -> U32CHAR_CONST .)
    GE              reduce using rule 369 (constant -> U32CHAR_CONST .)
    LE              reduce using rule 369 (constant -> U32CHAR_CONST .)
    LT              reduce using rule 369 (constant -> U32CHAR_CONST .)
    LSHIFT          reduce using rule 369 (constant -> U32CHAR_CONST .)
    RSHIFT          reduce using rule 369 (constant -> U32CHAR_CONST .)
    MINUS           reduce using rule 369 (constant -> U32CHAR_CONST .)
    PLUS            reduce using rule 369 (constant -> U32CHAR_CONST .)
    MOD             reduce using rule 369 (constant -> U32CHAR_CONST .)
    DIVIDE          reduce using rule 369 (constant -> U32CHAR_CONST .)
    TIMES           reduce using rule 369 (constant -> U32CHAR_CONST .)
    ,               reduce using rule 369 (constant -> U32CHAR_CONST .)
    RPAREN          reduce using rule 369 (constant -> U32CHAR_CONST .)
    OREQUAL         reduce using rule 369 (constant -> U32CHAR_CONST .)
    ANDEQUAL        reduce using rule 369 (constant -> U32CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 369 (constant -> U32CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 369 (constant -> U32CHAR_CONST .)
    MINUSEQUAL      reduce using rule 369 (constant -> U32CHAR_CONST .)
    PLUSEQUAL       reduce using rule 369 (constant -> U32CHAR_CONST .)
    MODEQUAL        reduce using rule 369 (constant -> U32CHAR_CONST .)
    DIVEQUAL        reduce using rule 369 (constant -> U32CHAR_CONST .)
    TIMESEQUAL      reduce using rule 369 (constant -> U32CHAR_CONST .)
    XOREQUAL        reduce using rule 369 (constant -> U32CHAR_CONST .)
    EQUALS          reduce using rule 369 (constant -> U32CHAR_CONST .)
    ;               reduce using rule 369 (constant -> U32CHAR_CONST .)
    RBRACKET        reduce using rule 369 (constant -> U32CHAR_CONST .)
    :               reduce using rule 369 (constant -> U32CHAR_CONST .)
    RBRACE          reduce using rule 369 (constant -> U32CHAR_CONST .)


state 155

    (370) constant -> U16CHAR_CONST .
    MINUSMINUS      reduce using rule 370 (constant -> U16CHAR_CONST .)
    PLUSPLUS        reduce using rule 370 (constant -> U16CHAR_CONST .)
    ARROW           reduce using rule 370 (constant -> U16CHAR_CONST .)
    .               reduce using rule 370 (constant -> U16CHAR_CONST .)
    LPAREN          reduce using rule 370 (constant -> U16CHAR_CONST .)
    LBRACKET        reduce using rule 370 (constant -> U16CHAR_CONST .)
    CONDOP          reduce using rule 370 (constant -> U16CHAR_CONST .)
    LOR             reduce using rule 370 (constant -> U16CHAR_CONST .)
    LAND            reduce using rule 370 (constant -> U16CHAR_CONST .)
    XOR             reduce using rule 370 (constant -> U16CHAR_CONST .)
    OR              reduce using rule 370 (constant -> U16CHAR_CONST .)
    AND             reduce using rule 370 (constant -> U16CHAR_CONST .)
    NE              reduce using rule 370 (constant -> U16CHAR_CONST .)
    EQ              reduce using rule 370 (constant -> U16CHAR_CONST .)
    GT              reduce using rule 370 (constant -> U16CHAR_CONST .)
    GE              reduce using rule 370 (constant -> U16CHAR_CONST .)
    LE              reduce using rule 370 (constant -> U16CHAR_CONST .)
    LT              reduce using rule 370 (constant -> U16CHAR_CONST .)
    LSHIFT          reduce using rule 370 (constant -> U16CHAR_CONST .)
    RSHIFT          reduce using rule 370 (constant -> U16CHAR_CONST .)
    MINUS           reduce using rule 370 (constant -> U16CHAR_CONST .)
    PLUS            reduce using rule 370 (constant -> U16CHAR_CONST .)
    MOD             reduce using rule 370 (constant -> U16CHAR_CONST .)
    DIVIDE          reduce using rule 370 (constant -> U16CHAR_CONST .)
    TIMES           reduce using rule 370 (constant -> U16CHAR_CONST .)
    ,               reduce using rule 370 (constant -> U16CHAR_CONST .)
    RPAREN          reduce using rule 370 (constant -> U16CHAR_CONST .)
    OREQUAL         reduce using rule 370 (constant -> U16CHAR_CONST .)
    ANDEQUAL        reduce using rule 370 (constant -> U16CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 370 (constant -> U16CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 370 (constant -> U16CHAR_CONST .)
    MINUSEQUAL      reduce using rule 370 (constant -> U16CHAR_CONST .)
    PLUSEQUAL       reduce using rule 370 (constant -> U16CHAR_CONST .)
    MODEQUAL        reduce using rule 370 (constant -> U16CHAR_CONST .)
    DIVEQUAL        reduce using rule 370 (constant -> U16CHAR_CONST .)
    TIMESEQUAL      reduce using rule 370 (constant -> U16CHAR_CONST .)
    XOREQUAL        reduce using rule 370 (constant -> U16CHAR_CONST .)
    EQUALS          reduce using rule 370 (constant -> U16CHAR_CONST .)
    ;               reduce using rule 370 (constant -> U16CHAR_CONST .)
    RBRACKET        reduce using rule 370 (constant -> U16CHAR_CONST .)
    :               reduce using rule 370 (constant -> U16CHAR_CONST .)
    RBRACE          reduce using rule 370 (constant -> U16CHAR_CONST .)


state 156

    (371) constant -> U8CHAR_CONST .
    MINUSMINUS      reduce using rule 371 (constant -> U8CHAR_CONST .)
    PLUSPLUS        reduce using rule 371 (constant -> U8CHAR_CONST .)
    ARROW           reduce using rule 371 (constant -> U8CHAR_CONST .)
    .               reduce using rule 371 (constant -> U8CHAR_CONST .)
    LPAREN          reduce using rule 371 (constant -> U8CHAR_CONST .)
    LBRACKET        reduce using rule 371 (constant -> U8CHAR_CONST .)
    CONDOP          reduce using rule 371 (constant -> U8CHAR_CONST .)
    LOR             reduce using rule 371 (constant -> U8CHAR_CONST .)
    LAND            reduce using rule 371 (constant -> U8CHAR_CONST .)
    XOR             reduce using rule 371 (constant -> U8CHAR_CONST .)
    OR              reduce using rule 371 (constant -> U8CHAR_CONST .)
    AND             reduce using rule 371 (constant -> U8CHAR_CONST .)
    NE              reduce using rule 371 (constant -> U8CHAR_CONST .)
    EQ              reduce using rule 371 (constant -> U8CHAR_CONST .)
    GT              reduce using rule 371 (constant -> U8CHAR_CONST .)
    GE              reduce using rule 371 (constant -> U8CHAR_CONST .)
    LE              reduce using rule 371 (constant -> U8CHAR_CONST .)
    LT              reduce using rule 371 (constant -> U8CHAR_CONST .)
    LSHIFT          reduce using rule 371 (constant -> U8CHAR_CONST .)
    RSHIFT          reduce using rule 371 (constant -> U8CHAR_CONST .)
    MINUS           reduce using rule 371 (constant -> U8CHAR_CONST .)
    PLUS            reduce using rule 371 (constant -> U8CHAR_CONST .)
    MOD             reduce using rule 371 (constant -> U8CHAR_CONST .)
    DIVIDE          reduce using rule 371 (constant -> U8CHAR_CONST .)
    TIMES           reduce using rule 371 (constant -> U8CHAR_CONST .)
    ,               reduce using rule 371 (constant -> U8CHAR_CONST .)
    RPAREN          reduce using rule 371 (constant -> U8CHAR_CONST .)
    OREQUAL         reduce using rule 371 (constant -> U8CHAR_CONST .)
    ANDEQUAL        reduce using rule 371 (constant -> U8CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 371 (constant -> U8CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 371 (constant -> U8CHAR_CONST .)
    MINUSEQUAL      reduce using rule 371 (constant -> U8CHAR_CONST .)
    PLUSEQUAL       reduce using rule 371 (constant -> U8CHAR_CONST .)
    MODEQUAL        reduce using rule 371 (constant -> U8CHAR_CONST .)
    DIVEQUAL        reduce using rule 371 (constant -> U8CHAR_CONST .)
    TIMESEQUAL      reduce using rule 371 (constant -> U8CHAR_CONST .)
    XOREQUAL        reduce using rule 371 (constant -> U8CHAR_CONST .)
    EQUALS          reduce using rule 371 (constant -> U8CHAR_CONST .)
    ;               reduce using rule 371 (constant -> U8CHAR_CONST .)
    RBRACKET        reduce using rule 371 (constant -> U8CHAR_CONST .)
    :               reduce using rule 371 (constant -> U8CHAR_CONST .)
    RBRACE          reduce using rule 371 (constant -> U8CHAR_CONST .)


state 157

    (372) constant -> WCHAR_CONST .
    MINUSMINUS      reduce using rule 372 (constant -> WCHAR_CONST .)
    PLUSPLUS        reduce using rule 372 (constant -> WCHAR_CONST .)
    ARROW           reduce using rule 372 (constant -> WCHAR_CONST .)
    .               reduce using rule 372 (constant -> WCHAR_CONST .)
    LPAREN          reduce using rule 372 (constant -> WCHAR_CONST .)
    LBRACKET        reduce using rule 372 (constant -> WCHAR_CONST .)
    CONDOP          reduce using rule 372 (constant -> WCHAR_CONST .)
    LOR             reduce using rule 372 (constant -> WCHAR_CONST .)
    LAND            reduce using rule 372 (constant -> WCHAR_CONST .)
    XOR             reduce using rule 372 (constant -> WCHAR_CONST .)
    OR              reduce using rule 372 (constant -> WCHAR_CONST .)
    AND             reduce using rule 372 (constant -> WCHAR_CONST .)
    NE              reduce using rule 372 (constant -> WCHAR_CONST .)
    EQ              reduce using rule 372 (constant -> WCHAR_CONST .)
    GT              reduce using rule 372 (constant -> WCHAR_CONST .)
    GE              reduce using rule 372 (constant -> WCHAR_CONST .)
    LE              reduce using rule 372 (constant -> WCHAR_CONST .)
    LT              reduce using rule 372 (constant -> WCHAR_CONST .)
    LSHIFT          reduce using rule 372 (constant -> WCHAR_CONST .)
    RSHIFT          reduce using rule 372 (constant -> WCHAR_CONST .)
    MINUS           reduce using rule 372 (constant -> WCHAR_CONST .)
    PLUS            reduce using rule 372 (constant -> WCHAR_CONST .)
    MOD             reduce using rule 372 (constant -> WCHAR_CONST .)
    DIVIDE          reduce using rule 372 (constant -> WCHAR_CONST .)
    TIMES           reduce using rule 372 (constant -> WCHAR_CONST .)
    ,               reduce using rule 372 (constant -> WCHAR_CONST .)
    RPAREN          reduce using rule 372 (constant -> WCHAR_CONST .)
    OREQUAL         reduce using rule 372 (constant -> WCHAR_CONST .)
    ANDEQUAL        reduce using rule 372 (constant -> WCHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 372 (constant -> WCHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 372 (constant -> WCHAR_CONST .)
    MINUSEQUAL      reduce using rule 372 (constant -> WCHAR_CONST .)
    PLUSEQUAL       reduce using rule 372 (constant -> WCHAR_CONST .)
    MODEQUAL        reduce using rule 372 (constant -> WCHAR_CONST .)
    DIVEQUAL        reduce using rule 372 (constant -> WCHAR_CONST .)
    TIMESEQUAL      reduce using rule 372 (constant -> WCHAR_CONST .)
    XOREQUAL        reduce using rule 372 (constant -> WCHAR_CONST .)
    EQUALS          reduce using rule 372 (constant -> WCHAR_CONST .)
    ;               reduce using rule 372 (constant -> WCHAR_CONST .)
    RBRACKET        reduce using rule 372 (constant -> WCHAR_CONST .)
    :               reduce using rule 372 (constant -> WCHAR_CONST .)
    RBRACE          reduce using rule 372 (constant -> WCHAR_CONST .)


state 158

    (373) constant -> CHAR_CONST .
    MINUSMINUS      reduce using rule 373 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 373 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 373 (constant -> CHAR_CONST .)
    .               reduce using rule 373 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 373 (constant -> CHAR_CONST .)
    LBRACKET        reduce using rule 373 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 373 (constant -> CHAR_CONST .)
    LOR             reduce using rule 373 (constant -> CHAR_CONST .)
    LAND            reduce using rule 373 (constant -> CHAR_CONST .)
    XOR             reduce using rule 373 (constant -> CHAR_CONST .)
    OR              reduce using rule 373 (constant -> CHAR_CONST .)
    AND             reduce using rule 373 (constant -> CHAR_CONST .)
    NE              reduce using rule 373 (constant -> CHAR_CONST .)
    EQ              reduce using rule 373 (constant -> CHAR_CONST .)
    GT              reduce using rule 373 (constant -> CHAR_CONST .)
    GE              reduce using rule 373 (constant -> CHAR_CONST .)
    LE              reduce using rule 373 (constant -> CHAR_CONST .)
    LT              reduce using rule 373 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 373 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 373 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 373 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 373 (constant -> CHAR_CONST .)
    MOD             reduce using rule 373 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 373 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 373 (constant -> CHAR_CONST .)
    ,               reduce using rule 373 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 373 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 373 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 373 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 373 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 373 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 373 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 373 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 373 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 373 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 373 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 373 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 373 (constant -> CHAR_CONST .)
    ;               reduce using rule 373 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 373 (constant -> CHAR_CONST .)
    :               reduce using rule 373 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 373 (constant -> CHAR_CONST .)


state 159

    (374) constant -> HEX_FLOAT_CONST .
    MINUSMINUS      reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    PLUSPLUS        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    ARROW           reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    .               reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LPAREN          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LBRACKET        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    CONDOP          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LOR             reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LAND            reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    XOR             reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    OR              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    AND             reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    NE              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    EQ              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    GT              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    GE              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LE              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LT              reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LSHIFT          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    RSHIFT          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    MINUS           reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    PLUS            reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    MOD             reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    DIVIDE          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    TIMES           reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    ,               reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    RPAREN          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    OREQUAL         reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    ANDEQUAL        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    MODEQUAL        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    DIVEQUAL        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    XOREQUAL        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    EQUALS          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    ;               reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    RBRACKET        reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    :               reduce using rule 374 (constant -> HEX_FLOAT_CONST .)
    RBRACE          reduce using rule 374 (constant -> HEX_FLOAT_CONST .)


state 160

    (375) constant -> FLOAT_CONST .
    MINUSMINUS      reduce using rule 375 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 375 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 375 (constant -> FLOAT_CONST .)
    .               reduce using rule 375 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 375 (constant -> FLOAT_CONST .)
    LBRACKET        reduce using rule 375 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 375 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 375 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 375 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 375 (constant -> FLOAT_CONST .)
    OR              reduce using rule 375 (constant -> FLOAT_CONST .)
    AND             reduce using rule 375 (constant -> FLOAT_CONST .)
    NE              reduce using rule 375 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 375 (constant -> FLOAT_CONST .)
    GT              reduce using rule 375 (constant -> FLOAT_CONST .)
    GE              reduce using rule 375 (constant -> FLOAT_CONST .)
    LE              reduce using rule 375 (constant -> FLOAT_CONST .)
    LT              reduce using rule 375 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 375 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 375 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 375 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 375 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 375 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 375 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 375 (constant -> FLOAT_CONST .)
    ,               reduce using rule 375 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 375 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 375 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 375 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 375 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 375 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 375 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 375 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 375 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 375 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 375 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 375 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 375 (constant -> FLOAT_CONST .)
    ;               reduce using rule 375 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 375 (constant -> FLOAT_CONST .)
    :               reduce using rule 375 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 375 (constant -> FLOAT_CONST .)


state 161

    (376) constant -> INT_CONST_CHAR .
    MINUSMINUS      reduce using rule 376 (constant -> INT_CONST_CHAR .)
    PLUSPLUS        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    ARROW           reduce using rule 376 (constant -> INT_CONST_CHAR .)
    .               reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LPAREN          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LBRACKET        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    CONDOP          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LOR             reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LAND            reduce using rule 376 (constant -> INT_CONST_CHAR .)
    XOR             reduce using rule 376 (constant -> INT_CONST_CHAR .)
    OR              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    AND             reduce using rule 376 (constant -> INT_CONST_CHAR .)
    NE              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    EQ              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    GT              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    GE              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LE              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LT              reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LSHIFT          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    RSHIFT          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    MINUS           reduce using rule 376 (constant -> INT_CONST_CHAR .)
    PLUS            reduce using rule 376 (constant -> INT_CONST_CHAR .)
    MOD             reduce using rule 376 (constant -> INT_CONST_CHAR .)
    DIVIDE          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    TIMES           reduce using rule 376 (constant -> INT_CONST_CHAR .)
    ,               reduce using rule 376 (constant -> INT_CONST_CHAR .)
    RPAREN          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    OREQUAL         reduce using rule 376 (constant -> INT_CONST_CHAR .)
    ANDEQUAL        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    RSHIFTEQUAL     reduce using rule 376 (constant -> INT_CONST_CHAR .)
    LSHIFTEQUAL     reduce using rule 376 (constant -> INT_CONST_CHAR .)
    MINUSEQUAL      reduce using rule 376 (constant -> INT_CONST_CHAR .)
    PLUSEQUAL       reduce using rule 376 (constant -> INT_CONST_CHAR .)
    MODEQUAL        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    DIVEQUAL        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    TIMESEQUAL      reduce using rule 376 (constant -> INT_CONST_CHAR .)
    XOREQUAL        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    EQUALS          reduce using rule 376 (constant -> INT_CONST_CHAR .)
    ;               reduce using rule 376 (constant -> INT_CONST_CHAR .)
    RBRACKET        reduce using rule 376 (constant -> INT_CONST_CHAR .)
    :               reduce using rule 376 (constant -> INT_CONST_CHAR .)
    RBRACE          reduce using rule 376 (constant -> INT_CONST_CHAR .)


state 162

    (377) constant -> INT_CONST_BIN .
    MINUSMINUS      reduce using rule 377 (constant -> INT_CONST_BIN .)
    PLUSPLUS        reduce using rule 377 (constant -> INT_CONST_BIN .)
    ARROW           reduce using rule 377 (constant -> INT_CONST_BIN .)
    .               reduce using rule 377 (constant -> INT_CONST_BIN .)
    LPAREN          reduce using rule 377 (constant -> INT_CONST_BIN .)
    LBRACKET        reduce using rule 377 (constant -> INT_CONST_BIN .)
    CONDOP          reduce using rule 377 (constant -> INT_CONST_BIN .)
    LOR             reduce using rule 377 (constant -> INT_CONST_BIN .)
    LAND            reduce using rule 377 (constant -> INT_CONST_BIN .)
    XOR             reduce using rule 377 (constant -> INT_CONST_BIN .)
    OR              reduce using rule 377 (constant -> INT_CONST_BIN .)
    AND             reduce using rule 377 (constant -> INT_CONST_BIN .)
    NE              reduce using rule 377 (constant -> INT_CONST_BIN .)
    EQ              reduce using rule 377 (constant -> INT_CONST_BIN .)
    GT              reduce using rule 377 (constant -> INT_CONST_BIN .)
    GE              reduce using rule 377 (constant -> INT_CONST_BIN .)
    LE              reduce using rule 377 (constant -> INT_CONST_BIN .)
    LT              reduce using rule 377 (constant -> INT_CONST_BIN .)
    LSHIFT          reduce using rule 377 (constant -> INT_CONST_BIN .)
    RSHIFT          reduce using rule 377 (constant -> INT_CONST_BIN .)
    MINUS           reduce using rule 377 (constant -> INT_CONST_BIN .)
    PLUS            reduce using rule 377 (constant -> INT_CONST_BIN .)
    MOD             reduce using rule 377 (constant -> INT_CONST_BIN .)
    DIVIDE          reduce using rule 377 (constant -> INT_CONST_BIN .)
    TIMES           reduce using rule 377 (constant -> INT_CONST_BIN .)
    ,               reduce using rule 377 (constant -> INT_CONST_BIN .)
    RPAREN          reduce using rule 377 (constant -> INT_CONST_BIN .)
    OREQUAL         reduce using rule 377 (constant -> INT_CONST_BIN .)
    ANDEQUAL        reduce using rule 377 (constant -> INT_CONST_BIN .)
    RSHIFTEQUAL     reduce using rule 377 (constant -> INT_CONST_BIN .)
    LSHIFTEQUAL     reduce using rule 377 (constant -> INT_CONST_BIN .)
    MINUSEQUAL      reduce using rule 377 (constant -> INT_CONST_BIN .)
    PLUSEQUAL       reduce using rule 377 (constant -> INT_CONST_BIN .)
    MODEQUAL        reduce using rule 377 (constant -> INT_CONST_BIN .)
    DIVEQUAL        reduce using rule 377 (constant -> INT_CONST_BIN .)
    TIMESEQUAL      reduce using rule 377 (constant -> INT_CONST_BIN .)
    XOREQUAL        reduce using rule 377 (constant -> INT_CONST_BIN .)
    EQUALS          reduce using rule 377 (constant -> INT_CONST_BIN .)
    ;               reduce using rule 377 (constant -> INT_CONST_BIN .)
    RBRACKET        reduce using rule 377 (constant -> INT_CONST_BIN .)
    :               reduce using rule 377 (constant -> INT_CONST_BIN .)
    RBRACE          reduce using rule 377 (constant -> INT_CONST_BIN .)


state 163

    (378) constant -> INT_CONST_HEX .
    MINUSMINUS      reduce using rule 378 (constant -> INT_CONST_HEX .)
    PLUSPLUS        reduce using rule 378 (constant -> INT_CONST_HEX .)
    ARROW           reduce using rule 378 (constant -> INT_CONST_HEX .)
    .               reduce using rule 378 (constant -> INT_CONST_HEX .)
    LPAREN          reduce using rule 378 (constant -> INT_CONST_HEX .)
    LBRACKET        reduce using rule 378 (constant -> INT_CONST_HEX .)
    CONDOP          reduce using rule 378 (constant -> INT_CONST_HEX .)
    LOR             reduce using rule 378 (constant -> INT_CONST_HEX .)
    LAND            reduce using rule 378 (constant -> INT_CONST_HEX .)
    XOR             reduce using rule 378 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 378 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 378 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 378 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 378 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 378 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 378 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 378 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 378 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 378 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 378 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 378 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 378 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 378 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 378 (constant -> INT_CONST_HEX .)
    TIMES           reduce using rule 378 (constant -> INT_CONST_HEX .)
    ,               reduce using rule 378 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 378 (constant -> INT_CONST_HEX .)
    OREQUAL         reduce using rule 378 (constant -> INT_CONST_HEX .)
    ANDEQUAL        reduce using rule 378 (constant -> INT_CONST_HEX .)
    RSHIFTEQUAL     reduce using rule 378 (constant -> INT_CONST_HEX .)
    LSHIFTEQUAL     reduce using rule 378 (constant -> INT_CONST_HEX .)
    MINUSEQUAL      reduce using rule 378 (constant -> INT_CONST_HEX .)
    PLUSEQUAL       reduce using rule 378 (constant -> INT_CONST_HEX .)
    MODEQUAL        reduce using rule 378 (constant -> INT_CONST_HEX .)
    DIVEQUAL        reduce using rule 378 (constant -> INT_CONST_HEX .)
    TIMESEQUAL      reduce using rule 378 (constant -> INT_CONST_HEX .)
    XOREQUAL        reduce using rule 378 (constant -> INT_CONST_HEX .)
    EQUALS          reduce using rule 378 (constant -> INT_CONST_HEX .)
    ;               reduce using rule 378 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 378 (constant -> INT_CONST_HEX .)
    :               reduce using rule 378 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 378 (constant -> INT_CONST_HEX .)


state 164

    (379) constant -> INT_CONST_OCT .
    MINUSMINUS      reduce using rule 379 (constant -> INT_CONST_OCT .)
    PLUSPLUS        reduce using rule 379 (constant -> INT_CONST_OCT .)
    ARROW           reduce using rule 379 (constant -> INT_CONST_OCT .)
    .               reduce using rule 379 (constant -> INT_CONST_OCT .)
    LPAREN          reduce using rule 379 (constant -> INT_CONST_OCT .)
    LBRACKET        reduce using rule 379 (constant -> INT_CONST_OCT .)
    CONDOP          reduce using rule 379 (constant -> INT_CONST_OCT .)
    LOR             reduce using rule 379 (constant -> INT_CONST_OCT .)
    LAND            reduce using rule 379 (constant -> INT_CONST_OCT .)
    XOR             reduce using rule 379 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 379 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 379 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 379 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 379 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 379 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 379 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 379 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 379 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 379 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 379 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 379 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 379 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 379 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 379 (constant -> INT_CONST_OCT .)
    TIMES           reduce using rule 379 (constant -> INT_CONST_OCT .)
    ,               reduce using rule 379 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 379 (constant -> INT_CONST_OCT .)
    OREQUAL         reduce using rule 379 (constant -> INT_CONST_OCT .)
    ANDEQUAL        reduce using rule 379 (constant -> INT_CONST_OCT .)
    RSHIFTEQUAL     reduce using rule 379 (constant -> INT_CONST_OCT .)
    LSHIFTEQUAL     reduce using rule 379 (constant -> INT_CONST_OCT .)
    MINUSEQUAL      reduce using rule 379 (constant -> INT_CONST_OCT .)
    PLUSEQUAL       reduce using rule 379 (constant -> INT_CONST_OCT .)
    MODEQUAL        reduce using rule 379 (constant -> INT_CONST_OCT .)
    DIVEQUAL        reduce using rule 379 (constant -> INT_CONST_OCT .)
    TIMESEQUAL      reduce using rule 379 (constant -> INT_CONST_OCT .)
    XOREQUAL        reduce using rule 379 (constant -> INT_CONST_OCT .)
    EQUALS          reduce using rule 379 (constant -> INT_CONST_OCT .)
    ;               reduce using rule 379 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 379 (constant -> INT_CONST_OCT .)
    :               reduce using rule 379 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 379 (constant -> INT_CONST_OCT .)


state 165

    (380) constant -> INT_CONST_DEC .
    MINUSMINUS      reduce using rule 380 (constant -> INT_CONST_DEC .)
    PLUSPLUS        reduce using rule 380 (constant -> INT_CONST_DEC .)
    ARROW           reduce using rule 380 (constant -> INT_CONST_DEC .)
    .               reduce using rule 380 (constant -> INT_CONST_DEC .)
    LPAREN          reduce using rule 380 (constant -> INT_CONST_DEC .)
    LBRACKET        reduce using rule 380 (constant -> INT_CONST_DEC .)
    CONDOP          reduce using rule 380 (constant -> INT_CONST_DEC .)
    LOR             reduce using rule 380 (constant -> INT_CONST_DEC .)
    LAND            reduce using rule 380 (constant -> INT_CONST_DEC .)
    XOR             reduce using rule 380 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 380 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 380 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 380 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 380 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 380 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 380 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 380 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 380 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 380 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 380 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 380 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 380 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 380 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 380 (constant -> INT_CONST_DEC .)
    TIMES           reduce using rule 380 (constant -> INT_CONST_DEC .)
    ,               reduce using rule 380 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 380 (constant -> INT_CONST_DEC .)
    OREQUAL         reduce using rule 380 (constant -> INT_CONST_DEC .)
    ANDEQUAL        reduce using rule 380 (constant -> INT_CONST_DEC .)
    RSHIFTEQUAL     reduce using rule 380 (constant -> INT_CONST_DEC .)
    LSHIFTEQUAL     reduce using rule 380 (constant -> INT_CONST_DEC .)
    MINUSEQUAL      reduce using rule 380 (constant -> INT_CONST_DEC .)
    PLUSEQUAL       reduce using rule 380 (constant -> INT_CONST_DEC .)
    MODEQUAL        reduce using rule 380 (constant -> INT_CONST_DEC .)
    DIVEQUAL        reduce using rule 380 (constant -> INT_CONST_DEC .)
    TIMESEQUAL      reduce using rule 380 (constant -> INT_CONST_DEC .)
    XOREQUAL        reduce using rule 380 (constant -> INT_CONST_DEC .)
    EQUALS          reduce using rule 380 (constant -> INT_CONST_DEC .)
    ;               reduce using rule 380 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 380 (constant -> INT_CONST_DEC .)
    :               reduce using rule 380 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 380 (constant -> INT_CONST_DEC .)


state 166

    (175) direct_id_declarator -> LPAREN id_declarator RPAREN .
    LPAREN          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LBRACKET        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ALIGNAS_        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ATOMIC_         reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    NORETURN_       reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INLINE          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    THREAD_LOCAL_   reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    TYPEDEF         reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    EXTERN          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    STATIC          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    REGISTER        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    AUTO            reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    VOLATILE        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    RESTRICT        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    CONST           reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INT128          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    UNSIGNED        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SIGNED          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    COMPLEX_        reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    DOUBLE          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    FLOAT           reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LONG            reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INT             reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SHORT           reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    CHAR            reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    BOOL_           reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    VOID            reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ENUM            reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    TYPEID          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    UNION           reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    STRUCT          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LBRACE          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    RPAREN          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    EQUALS          reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ,               reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ;               reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    :               reduce using rule 175 (direct_id_declarator -> LPAREN id_declarator RPAREN .)


state 167

    (15) pppragma_directive -> PRAGMA_ LPAREN unified_string_literal . RPAREN
    (381) unified_string_literal -> unified_string_literal . STRING_LITERAL
    RPAREN          shift and go to state 275
    STRING_LITERAL  shift and go to state 274


state 168

    (24) function_definition -> declaration_specifiers id_declarator declaration_list_opt . compound_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (391) brace_open -> . LBRACE
    LBRACE          shift and go to state 120

    compound_statement             shift and go to state 276
    brace_open                     shift and go to state 180

state 169

    (165) typeid_declarator -> pointer direct_typeid_declarator .
    (177) direct_typeid_declarator -> direct_typeid_declarator . LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> direct_typeid_declarator . LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    EQUALS          reduce using rule 165 (typeid_declarator -> pointer direct_typeid_declarator .)
    ,               reduce using rule 165 (typeid_declarator -> pointer direct_typeid_declarator .)
    ;               reduce using rule 165 (typeid_declarator -> pointer direct_typeid_declarator .)
    RPAREN          reduce using rule 165 (typeid_declarator -> pointer direct_typeid_declarator .)
    :               reduce using rule 165 (typeid_declarator -> pointer direct_typeid_declarator .)
    LPAREN          shift and go to state 177
    LBRACKET        shift and go to state 178


state 170

    (183) direct_typeid_declarator -> LPAREN typeid_declarator . RPAREN
    RPAREN          shift and go to state 277


state 171

    (91) init_declarator_list -> init_declarator _4_222c22_init_declarator_repeat .
    ;               reduce using rule 91 (init_declarator_list -> init_declarator _4_222c22_init_declarator_repeat .)


state 172

    (92) _4_222c22_init_declarator_repeat -> _4_222c22_init_declarator_items .
    (94) _4_222c22_init_declarator_items -> _4_222c22_init_declarator_items . _4_222c22_init_declarator_item
    (96) _4_222c22_init_declarator_item -> . , init_declarator
    ;               reduce using rule 92 (_4_222c22_init_declarator_repeat -> _4_222c22_init_declarator_items .)
    ,               shift and go to state 174

    _4_222c22_init_declarator_item shift and go to state 278

state 173

    (95) _4_222c22_init_declarator_items -> _4_222c22_init_declarator_item .
    ,               reduce using rule 95 (_4_222c22_init_declarator_items -> _4_222c22_init_declarator_item .)
    ;               reduce using rule 95 (_4_222c22_init_declarator_items -> _4_222c22_init_declarator_item .)


state 174

    (96) _4_222c22_init_declarator_item -> , . init_declarator
    (99) init_declarator -> . declarator _5_EQUALS_initializer_optional
    (161) declarator -> . typeid_declarator
    (162) declarator -> . id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    init_declarator                shift and go to state 279
    declarator                     shift and go to state 83
    typeid_declarator              shift and go to state 84
    id_declarator                  shift and go to state 186
    pointer                        shift and go to state 187
    direct_typeid_declarator       shift and go to state 85
    direct_id_declarator           shift and go to state 27

state 175

    (99) init_declarator -> declarator _5_EQUALS_initializer_optional .
    ,               reduce using rule 99 (init_declarator -> declarator _5_EQUALS_initializer_optional .)
    ;               reduce using rule 99 (init_declarator -> declarator _5_EQUALS_initializer_optional .)


state 176

    (100) _5_EQUALS_initializer_optional -> EQUALS . initializer
    (223) initializer -> . brace_open initializer_list , brace_close
    (224) initializer -> . brace_open initializer_list_opt brace_close
    (225) initializer -> . assignment_expression
    (391) brace_open -> . LBRACE
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    initializer                    shift and go to state 280
    brace_open                     shift and go to state 281
    assignment_expression          shift and go to state 282
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 177

    (177) direct_typeid_declarator -> direct_typeid_declarator LPAREN . identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> direct_typeid_declarator LPAREN . parameter_type_list RPAREN
    (221) identifier_list_opt -> . identifier_list
    (222) identifier_list_opt -> . empty
    (202) parameter_type_list -> . parameter_list , ELLIPSIS
    (203) parameter_type_list -> . parameter_list
    (215) identifier_list -> . identifier _15_222c22_identifier_repeat
    (393) empty -> .
    (206) parameter_list -> . parameter_declaration _14_222c22_parameter_declaration_repeat
    (368) identifier -> . ID
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RPAREN          reduce using rule 393 (empty -> .)
    ID              shift and go to state 142
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    identifier_list_opt            shift and go to state 283
    parameter_type_list            shift and go to state 284
    identifier_list                shift and go to state 193
    empty                          shift and go to state 194
    parameter_list                 shift and go to state 195
    identifier                     shift and go to state 196
    parameter_declaration          shift and go to state 197
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 178

    (179) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    STATIC          shift and go to state 287
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    RBRACKET        reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 285
    type_qualifier_list            shift and go to state 286
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 179

    (25) function_definition -> id_declarator declaration_list_opt compound_statement .
    ;               reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STATIC_ASSERT_  reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PRAGMA_         reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ALIGNAS_        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ATOMIC_         reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    NORETURN_       reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    THREAD_LOCAL_   reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INT128          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    COMPLEX_        reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    BOOL_           reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 25 (function_definition -> id_declarator declaration_list_opt compound_statement .)


state 180

    (264) compound_statement -> brace_open . block_item_list_opt brace_close
    (262) block_item_list_opt -> . block_item_list
    (263) block_item_list_opt -> . empty
    (260) block_item_list -> . block_item_list block_item
    (261) block_item_list -> . block_item
    (393) empty -> .
    (258) block_item -> . statement
    (259) block_item -> . declaration
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (38) declaration -> . decl_body ;
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    RBRACE          reduce using rule 393 (empty -> .)
    ;               reduce using rule 393 (empty -> .)
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    LPAREN          shift and go to state 229
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    brace_open                     shift and go to state 180
    block_item_list_opt            shift and go to state 288
    block_item_list                shift and go to state 289
    empty                          shift and go to state 290
    block_item                     shift and go to state 291
    statement                      shift and go to state 292
    declaration                    shift and go to state 293
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 295
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    decl_body                      shift and go to state 16
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    expression_opt                 shift and go to state 309
    declaration_specifiers_no_type shift and go to state 19
    declaration_specifiers         shift and go to state 91
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    assignment_expression          shift and go to state 232
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    struct_or_union                shift and go to state 59
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 181

    (44) _3_declaration_item -> declaration .
    ALIGNAS_        reduce using rule 44 (_3_declaration_item -> declaration .)
    ATOMIC_         reduce using rule 44 (_3_declaration_item -> declaration .)
    NORETURN_       reduce using rule 44 (_3_declaration_item -> declaration .)
    INLINE          reduce using rule 44 (_3_declaration_item -> declaration .)
    THREAD_LOCAL_   reduce using rule 44 (_3_declaration_item -> declaration .)
    TYPEDEF         reduce using rule 44 (_3_declaration_item -> declaration .)
    EXTERN          reduce using rule 44 (_3_declaration_item -> declaration .)
    STATIC          reduce using rule 44 (_3_declaration_item -> declaration .)
    REGISTER        reduce using rule 44 (_3_declaration_item -> declaration .)
    AUTO            reduce using rule 44 (_3_declaration_item -> declaration .)
    VOLATILE        reduce using rule 44 (_3_declaration_item -> declaration .)
    RESTRICT        reduce using rule 44 (_3_declaration_item -> declaration .)
    CONST           reduce using rule 44 (_3_declaration_item -> declaration .)
    INT128          reduce using rule 44 (_3_declaration_item -> declaration .)
    UNSIGNED        reduce using rule 44 (_3_declaration_item -> declaration .)
    SIGNED          reduce using rule 44 (_3_declaration_item -> declaration .)
    COMPLEX_        reduce using rule 44 (_3_declaration_item -> declaration .)
    DOUBLE          reduce using rule 44 (_3_declaration_item -> declaration .)
    FLOAT           reduce using rule 44 (_3_declaration_item -> declaration .)
    LONG            reduce using rule 44 (_3_declaration_item -> declaration .)
    INT             reduce using rule 44 (_3_declaration_item -> declaration .)
    SHORT           reduce using rule 44 (_3_declaration_item -> declaration .)
    CHAR            reduce using rule 44 (_3_declaration_item -> declaration .)
    BOOL_           reduce using rule 44 (_3_declaration_item -> declaration .)
    VOID            reduce using rule 44 (_3_declaration_item -> declaration .)
    ENUM            reduce using rule 44 (_3_declaration_item -> declaration .)
    TYPEID          reduce using rule 44 (_3_declaration_item -> declaration .)
    UNION           reduce using rule 44 (_3_declaration_item -> declaration .)
    STRUCT          reduce using rule 44 (_3_declaration_item -> declaration .)
    LBRACE          reduce using rule 44 (_3_declaration_item -> declaration .)


state 182

    (39) declaration_list -> declaration _3_declaration_repeat .
    LBRACE          reduce using rule 39 (declaration_list -> declaration _3_declaration_repeat .)


state 183

    (40) _3_declaration_repeat -> _3_declaration_items .
    (42) _3_declaration_items -> _3_declaration_items . _3_declaration_item
    (44) _3_declaration_item -> . declaration
    (38) declaration -> . decl_body ;
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    LBRACE          reduce using rule 40 (_3_declaration_repeat -> _3_declaration_items .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    _3_declaration_item            shift and go to state 316
    declaration                    shift and go to state 181
    decl_body                      shift and go to state 16
    declaration_specifiers_no_type shift and go to state 19
    declaration_specifiers         shift and go to state 91
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 184

    (43) _3_declaration_items -> _3_declaration_item .
    ALIGNAS_        reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    ATOMIC_         reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    NORETURN_       reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    INLINE          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    THREAD_LOCAL_   reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    TYPEDEF         reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    EXTERN          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    STATIC          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    REGISTER        reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    AUTO            reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    VOLATILE        reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    RESTRICT        reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    CONST           reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    INT128          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    UNSIGNED        reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    SIGNED          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    COMPLEX_        reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    DOUBLE          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    FLOAT           reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    LONG            reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    INT             reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    SHORT           reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    CHAR            reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    BOOL_           reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    VOID            reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    ENUM            reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    TYPEID          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    UNION           reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    STRUCT          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)
    LBRACE          reduce using rule 43 (_3_declaration_items -> _3_declaration_item .)


state 185

    (183) direct_typeid_declarator -> LPAREN . typeid_declarator RPAREN
    (175) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    typeid_declarator              shift and go to state 170
    id_declarator                  shift and go to state 66
    pointer                        shift and go to state 187
    direct_typeid_declarator       shift and go to state 85
    direct_id_declarator           shift and go to state 27

state 186

    (162) declarator -> id_declarator .
    EQUALS          reduce using rule 162 (declarator -> id_declarator .)
    ,               reduce using rule 162 (declarator -> id_declarator .)
    ;               reduce using rule 162 (declarator -> id_declarator .)
    :               reduce using rule 162 (declarator -> id_declarator .)


state 187

    (165) typeid_declarator -> pointer . direct_typeid_declarator
    (163) id_declarator -> pointer . direct_id_declarator
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    direct_typeid_declarator       shift and go to state 169
    direct_id_declarator           shift and go to state 107

state 188

    (102) id_init_declarator_list -> id_init_declarator_list , . init_declarator
    (99) init_declarator -> . declarator _5_EQUALS_initializer_optional
    (161) declarator -> . typeid_declarator
    (162) declarator -> . id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    init_declarator                shift and go to state 317
    declarator                     shift and go to state 83
    typeid_declarator              shift and go to state 84
    id_declarator                  shift and go to state 186
    pointer                        shift and go to state 187
    direct_typeid_declarator       shift and go to state 85
    direct_id_declarator           shift and go to state 27

state 189

    (106) id_init_declarator -> id_declarator _6_EQUALS_initializer_optional .
    ,               reduce using rule 106 (id_init_declarator -> id_declarator _6_EQUALS_initializer_optional .)
    ;               reduce using rule 106 (id_init_declarator -> id_declarator _6_EQUALS_initializer_optional .)


state 190

    (107) _6_EQUALS_initializer_optional -> EQUALS . initializer
    (223) initializer -> . brace_open initializer_list , brace_close
    (224) initializer -> . brace_open initializer_list_opt brace_close
    (225) initializer -> . assignment_expression
    (391) brace_open -> . LBRACE
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    initializer                    shift and go to state 318
    brace_open                     shift and go to state 281
    assignment_expression          shift and go to state 282
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 191

    (169) direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt . RPAREN
    RPAREN          shift and go to state 319


state 192

    (170) direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list . RPAREN
    RPAREN          shift and go to state 320


state 193

    (221) identifier_list_opt -> identifier_list .
    RPAREN          reduce using rule 221 (identifier_list_opt -> identifier_list .)


state 194

    (222) identifier_list_opt -> empty .
    RPAREN          reduce using rule 222 (identifier_list_opt -> empty .)


state 195

    (202) parameter_type_list -> parameter_list . , ELLIPSIS
    (203) parameter_type_list -> parameter_list .
    ,               shift and go to state 321
    RPAREN          reduce using rule 203 (parameter_type_list -> parameter_list .)


state 196

    (215) identifier_list -> identifier . _15_222c22_identifier_repeat
    (216) _15_222c22_identifier_repeat -> . _15_222c22_identifier_items
    (217) _15_222c22_identifier_repeat -> .
    (218) _15_222c22_identifier_items -> . _15_222c22_identifier_items _15_222c22_identifier_item
    (219) _15_222c22_identifier_items -> . _15_222c22_identifier_item
    (220) _15_222c22_identifier_item -> . , identifier
    RPAREN          reduce using rule 217 (_15_222c22_identifier_repeat -> .)
    ,               shift and go to state 325

    _15_222c22_identifier_repeat   shift and go to state 322
    _15_222c22_identifier_items    shift and go to state 323
    _15_222c22_identifier_item     shift and go to state 324

state 197

    (206) parameter_list -> parameter_declaration . _14_222c22_parameter_declaration_repeat
    (207) _14_222c22_parameter_declaration_repeat -> . _14_222c22_parameter_declaration_items
    (208) _14_222c22_parameter_declaration_repeat -> .
    (209) _14_222c22_parameter_declaration_items -> . _14_222c22_parameter_declaration_items _14_222c22_parameter_declaration_item
    (210) _14_222c22_parameter_declaration_items -> . _14_222c22_parameter_declaration_item
    (211) _14_222c22_parameter_declaration_item -> . , parameter_declaration
  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 208 (_14_222c22_parameter_declaration_repeat -> .)
    ,               shift and go to state 329

    _14_222c22_parameter_declaration_repeat shift and go to state 326
    _14_222c22_parameter_declaration_items shift and go to state 327
    _14_222c22_parameter_declaration_item shift and go to state 328

state 198

    (212) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (213) parameter_declaration -> declaration_specifiers . typeid_noparen_declarator
    (214) parameter_declaration -> declaration_specifiers . id_declarator
    (54) declaration_specifiers -> declaration_specifiers . alignment_specifier
    (57) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (58) declaration_specifiers -> declaration_specifiers . function_specifier
    (59) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (60) declaration_specifiers -> declaration_specifiers . type_qualifier
    (249) abstract_declarator_opt -> . abstract_declarator
    (250) abstract_declarator_opt -> . empty
    (167) typeid_noparen_declarator -> . pointer direct_typeid_noparen_declarator
    (168) typeid_noparen_declarator -> . direct_typeid_noparen_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (246) abstract_declarator -> . direct_abstract_declarator
    (247) abstract_declarator -> . pointer direct_abstract_declarator
    (248) abstract_declarator -> . pointer
    (393) empty -> .
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (185) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
    (186) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
    (187) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (188) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (189) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (190) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (191) direct_typeid_noparen_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    ALIGNAS_        shift and go to state 35
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    ,               reduce using rule 393 (empty -> .)
    RPAREN          reduce using rule 393 (empty -> .)
    TIMES           shift and go to state 32
    TYPEID          shift and go to state 340
    LPAREN          shift and go to state 337
    ID              shift and go to state 34
    LBRACKET        shift and go to state 339

    abstract_declarator_opt        shift and go to state 330
    typeid_noparen_declarator      shift and go to state 331
    id_declarator                  shift and go to state 332
    alignment_specifier            shift and go to state 72
    type_specifier_no_typeid       shift and go to state 73
    function_specifier             shift and go to state 74
    storage_class_specifier        shift and go to state 75
    type_qualifier                 shift and go to state 76
    abstract_declarator            shift and go to state 333
    empty                          shift and go to state 334
    pointer                        shift and go to state 335
    direct_typeid_noparen_declarator shift and go to state 336
    direct_id_declarator           shift and go to state 27
    direct_abstract_declarator     shift and go to state 338

state 199

    (55) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    ATOMIC_         shift and go to state 98
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    type_specifier                 shift and go to state 93
    atomic_specifier               shift and go to state 96
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 200

    (171) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (174) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (289) assignment_expression_opt -> . assignment_expression
    (290) assignment_expression_opt -> . empty
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (393) empty -> .
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    TIMES           shift and go to state 341
    LPAREN          shift and go to state 229
    RBRACKET        reduce using rule 393 (empty -> .)
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression_opt      shift and go to state 342
    assignment_expression          shift and go to state 343
    empty                          shift and go to state 344
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 201

    (172) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (200) type_qualifier_list_opt -> type_qualifier_list .
    STATIC          shift and go to state 345
    TIMES           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ALIGNOF_        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)


state 202

    (173) direct_id_declarator -> direct_id_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 346
    type_qualifier_list            shift and go to state 112
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 203

    (192) pointer -> TIMES type_qualifier_list_opt pointer .
    LPAREN          reduce using rule 192 (pointer -> TIMES type_qualifier_list_opt pointer .)
    ID              reduce using rule 192 (pointer -> TIMES type_qualifier_list_opt pointer .)
    TYPEID          reduce using rule 192 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LBRACKET        reduce using rule 192 (pointer -> TIMES type_qualifier_list_opt pointer .)
    ,               reduce using rule 192 (pointer -> TIMES type_qualifier_list_opt pointer .)
    RPAREN          reduce using rule 192 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 204

    (199) _13_type_qualifier_item -> type_qualifier .
    ATOMIC_         reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    VOLATILE        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    RESTRICT        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    CONST           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    TIMES           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    LPAREN          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    ID              reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    TYPEID          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    LBRACKET        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    ,               reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    RPAREN          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    STATIC          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    ALIGNOF_        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    SIZEOF          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    MINUSMINUS      reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    PLUSPLUS        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    LNOT            reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    NOT             reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    MINUS           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    PLUS            reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    AND             reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    OFFSETOF        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    U32STRING_LITERAL reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    U16STRING_LITERAL reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    U8STRING_LITERAL reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    WSTRING_LITERAL reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    STRING_LITERAL  reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    U32CHAR_CONST   reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    U16CHAR_CONST   reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    U8CHAR_CONST    reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    WCHAR_CONST     reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    CHAR_CONST      reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    FLOAT_CONST     reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT_CONST_CHAR  reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT_CONST_BIN   reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT_CONST_HEX   reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT_CONST_OCT   reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT_CONST_DEC   reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    RBRACKET        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT128          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    UNSIGNED        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    SIGNED          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    COMPLEX_        reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    DOUBLE          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    FLOAT           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    LONG            reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    INT             reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    SHORT           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    CHAR            reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    BOOL_           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    VOID            reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    ENUM            reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    UNION           reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)
    STRUCT          reduce using rule 199 (_13_type_qualifier_item -> type_qualifier .)


state 205

    (194) type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .
    TIMES           reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    LPAREN          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    ID              reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    TYPEID          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    LBRACKET        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    ,               reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    RPAREN          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    STATIC          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    ALIGNOF_        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    SIZEOF          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    MINUSMINUS      reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    PLUSPLUS        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    LNOT            reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    NOT             reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    MINUS           reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    PLUS            reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    AND             reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    OFFSETOF        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    U32STRING_LITERAL reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    U16STRING_LITERAL reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    U8STRING_LITERAL reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    WSTRING_LITERAL reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    STRING_LITERAL  reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    U32CHAR_CONST   reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    U16CHAR_CONST   reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    U8CHAR_CONST    reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    WCHAR_CONST     reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    CHAR_CONST      reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    HEX_FLOAT_CONST reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    FLOAT_CONST     reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT_CONST_CHAR  reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT_CONST_BIN   reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT_CONST_HEX   reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT_CONST_OCT   reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT_CONST_DEC   reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    RBRACKET        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    ATOMIC_         reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT128          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    UNSIGNED        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    SIGNED          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    COMPLEX_        reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    DOUBLE          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    FLOAT           reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    LONG            reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    INT             reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    SHORT           reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    CHAR            reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    BOOL_           reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    VOID            reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    ENUM            reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    UNION           reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)
    STRUCT          reduce using rule 194 (type_qualifier_list -> type_qualifier _13_type_qualifier_repeat .)


state 206

    (195) _13_type_qualifier_repeat -> _13_type_qualifier_items .
    (197) _13_type_qualifier_items -> _13_type_qualifier_items . _13_type_qualifier_item
    (199) _13_type_qualifier_item -> . type_qualifier
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for ATOMIC_ resolved as shift
    TIMES           reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    LPAREN          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    ID              reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    TYPEID          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    LBRACKET        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    ,               reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    RPAREN          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    STATIC          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    ALIGNOF_        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    SIZEOF          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    MINUSMINUS      reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    PLUSPLUS        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    LNOT            reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    NOT             reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    MINUS           reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    PLUS            reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    AND             reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    OFFSETOF        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    U32STRING_LITERAL reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    U16STRING_LITERAL reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    U8STRING_LITERAL reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    WSTRING_LITERAL reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    STRING_LITERAL  reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    U32CHAR_CONST   reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    U16CHAR_CONST   reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    U8CHAR_CONST    reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    WCHAR_CONST     reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    CHAR_CONST      reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    HEX_FLOAT_CONST reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    FLOAT_CONST     reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT_CONST_CHAR  reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT_CONST_BIN   reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT_CONST_HEX   reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT_CONST_OCT   reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT_CONST_DEC   reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    RBRACKET        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT128          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    UNSIGNED        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    SIGNED          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    COMPLEX_        reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    DOUBLE          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    FLOAT           reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    LONG            reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    INT             reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    SHORT           reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    CHAR            reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    BOOL_           reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    VOID            reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    ENUM            reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    UNION           reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    STRUCT          reduce using rule 195 (_13_type_qualifier_repeat -> _13_type_qualifier_items .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    _13_type_qualifier_item        shift and go to state 347
    type_qualifier                 shift and go to state 204

state 207

    (198) _13_type_qualifier_items -> _13_type_qualifier_item .
    ATOMIC_         reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    VOLATILE        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    RESTRICT        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    CONST           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    TIMES           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    LPAREN          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    ID              reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    TYPEID          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    LBRACKET        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    ,               reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    RPAREN          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    STATIC          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    ALIGNOF_        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    SIZEOF          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    MINUSMINUS      reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    PLUSPLUS        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    LNOT            reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    NOT             reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    MINUS           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    PLUS            reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    AND             reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    OFFSETOF        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    U32STRING_LITERAL reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    U16STRING_LITERAL reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    U8STRING_LITERAL reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    WSTRING_LITERAL reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    STRING_LITERAL  reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    U32CHAR_CONST   reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    U16CHAR_CONST   reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    U8CHAR_CONST    reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    WCHAR_CONST     reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    CHAR_CONST      reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    HEX_FLOAT_CONST reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    FLOAT_CONST     reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT_CONST_CHAR  reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT_CONST_BIN   reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT_CONST_HEX   reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT_CONST_OCT   reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT_CONST_DEC   reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    RBRACKET        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT128          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    UNSIGNED        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    SIGNED          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    COMPLEX_        reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    DOUBLE          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    FLOAT           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    LONG            reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    INT             reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    SHORT           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    CHAR            reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    BOOL_           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    VOID            reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    ENUM            reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    UNION           reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)
    STRUCT          reduce using rule 198 (_13_type_qualifier_items -> _13_type_qualifier_item .)


state 208

    (156) alignment_specifier -> ALIGNAS_ LPAREN constant_expression . RPAREN
    RPAREN          shift and go to state 348


state 209

    (157) alignment_specifier -> ALIGNAS_ LPAREN type_name . RPAREN
    RPAREN          shift and go to state 349


state 210

    (245) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (109) specifier_qualifier_list -> specifier_qualifier_list . alignment_specifier
    (113) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (114) specifier_qualifier_list -> specifier_qualifier_list . type_specifier_no_typeid
    (249) abstract_declarator_opt -> . abstract_declarator
    (250) abstract_declarator_opt -> . empty
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (246) abstract_declarator -> . direct_abstract_declarator
    (247) abstract_declarator -> . pointer direct_abstract_declarator
    (248) abstract_declarator -> . pointer
    (393) empty -> .
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    RPAREN          reduce using rule 393 (empty -> .)
    ,               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 354
    LBRACKET        shift and go to state 339
    TIMES           shift and go to state 32

    abstract_declarator_opt        shift and go to state 350
    alignment_specifier            shift and go to state 351
    type_qualifier                 shift and go to state 352
    type_specifier_no_typeid       shift and go to state 353
    abstract_declarator            shift and go to state 333
    empty                          shift and go to state 334
    direct_abstract_declarator     shift and go to state 338
    pointer                        shift and go to state 355

state 211

    (110) specifier_qualifier_list -> alignment_specifier .
    ALIGNAS_        reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    ATOMIC_         reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    VOLATILE        reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    RESTRICT        reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    CONST           reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    INT128          reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    UNSIGNED        reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    SIGNED          reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    COMPLEX_        reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    DOUBLE          reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    FLOAT           reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    LONG            reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    INT             reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    SHORT           reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    CHAR            reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    BOOL_           reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    VOID            reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    LPAREN          reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    LBRACKET        reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    TIMES           reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    RPAREN          reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    :               reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    TYPEID          reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    ID              reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    ;               reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)
    ,               reduce using rule 110 (specifier_qualifier_list -> alignment_specifier .)


state 212

    (111) specifier_qualifier_list -> type_qualifier_list . type_specifier
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    ATOMIC_         shift and go to state 98
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    type_specifier                 shift and go to state 356
    atomic_specifier               shift and go to state 96
    type_specifier_no_typeid       shift and go to state 22
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 213

    (112) specifier_qualifier_list -> type_specifier .
    ALIGNAS_        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ATOMIC_         reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    VOLATILE        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    RESTRICT        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    CONST           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    INT128          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    UNSIGNED        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    SIGNED          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    COMPLEX_        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    DOUBLE          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    FLOAT           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    LONG            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    INT             reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    SHORT           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    CHAR            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    BOOL_           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    VOID            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    :               reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    TYPEID          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ;               reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ,               reduce using rule 112 (specifier_qualifier_list -> type_specifier .)


state 214

    (87) type_qualifier -> ATOMIC_ .
    (86) atomic_specifier -> ATOMIC_ . LPAREN type_name RPAREN
    ATOMIC_         reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    VOLATILE        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    RESTRICT        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CONST           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT128          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    UNSIGNED        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SIGNED          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    COMPLEX_        reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    DOUBLE          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    FLOAT           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LONG            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    INT             reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    SHORT           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    CHAR            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    BOOL_           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    VOID            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    ENUM            reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    TYPEID          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    UNION           reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    STRUCT          reduce using rule 87 (type_qualifier -> ATOMIC_ .)
    LPAREN          shift and go to state 116


state 215

    (86) atomic_specifier -> ATOMIC_ LPAREN type_name . RPAREN
    RPAREN          shift and go to state 357


state 216

    (115) struct_or_union_specifier -> struct_or_union TYPEID brace_open . _7_struct_declaration_list_optional brace_close
    (116) _7_struct_declaration_list_optional -> . struct_declaration_list
    (117) _7_struct_declaration_list_optional -> .
    (128) struct_declaration_list -> . struct_declaration _10_struct_declaration_repeat
    (134) struct_declaration -> . pppragma_directive
    (135) struct_declaration -> . ;
    (136) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt ;
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RBRACE          reduce using rule 117 (_7_struct_declaration_list_optional -> .)
    ;               shift and go to state 221
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    struct_or_union                shift and go to state 59
    _7_struct_declaration_list_optional shift and go to state 358
    struct_declaration_list        shift and go to state 359
    struct_declaration             shift and go to state 219
    pppragma_directive             shift and go to state 220
    specifier_qualifier_list       shift and go to state 222
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31

state 217

    (121) struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 360

state 218

    (122) _9_struct_declaration_list_optional -> struct_declaration_list .
    RBRACE          reduce using rule 122 (_9_struct_declaration_list_optional -> struct_declaration_list .)


state 219

    (128) struct_declaration_list -> struct_declaration . _10_struct_declaration_repeat
    (129) _10_struct_declaration_repeat -> . _10_struct_declaration_items
    (130) _10_struct_declaration_repeat -> .
    (131) _10_struct_declaration_items -> . _10_struct_declaration_items _10_struct_declaration_item
    (132) _10_struct_declaration_items -> . _10_struct_declaration_item
    (133) _10_struct_declaration_item -> . struct_declaration
    (134) struct_declaration -> . pppragma_directive
    (135) struct_declaration -> . ;
    (136) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt ;
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RBRACE          reduce using rule 130 (_10_struct_declaration_repeat -> .)
    ;               shift and go to state 221
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    struct_declaration             shift and go to state 362
    _10_struct_declaration_repeat  shift and go to state 363
    _10_struct_declaration_items   shift and go to state 364
    _10_struct_declaration_item    shift and go to state 365
    pppragma_directive             shift and go to state 220
    specifier_qualifier_list       shift and go to state 222
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 220

    (134) struct_declaration -> pppragma_directive .
    ;               reduce using rule 134 (struct_declaration -> pppragma_directive .)
    PRAGMA_         reduce using rule 134 (struct_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 134 (struct_declaration -> pppragma_directive .)
    ALIGNAS_        reduce using rule 134 (struct_declaration -> pppragma_directive .)
    ATOMIC_         reduce using rule 134 (struct_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 134 (struct_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 134 (struct_declaration -> pppragma_directive .)
    CONST           reduce using rule 134 (struct_declaration -> pppragma_directive .)
    INT128          reduce using rule 134 (struct_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 134 (struct_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 134 (struct_declaration -> pppragma_directive .)
    COMPLEX_        reduce using rule 134 (struct_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 134 (struct_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 134 (struct_declaration -> pppragma_directive .)
    LONG            reduce using rule 134 (struct_declaration -> pppragma_directive .)
    INT             reduce using rule 134 (struct_declaration -> pppragma_directive .)
    SHORT           reduce using rule 134 (struct_declaration -> pppragma_directive .)
    CHAR            reduce using rule 134 (struct_declaration -> pppragma_directive .)
    BOOL_           reduce using rule 134 (struct_declaration -> pppragma_directive .)
    VOID            reduce using rule 134 (struct_declaration -> pppragma_directive .)
    ENUM            reduce using rule 134 (struct_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 134 (struct_declaration -> pppragma_directive .)
    UNION           reduce using rule 134 (struct_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 134 (struct_declaration -> pppragma_directive .)
    RBRACE          reduce using rule 134 (struct_declaration -> pppragma_directive .)


state 221

    (135) struct_declaration -> ; .
    ;               reduce using rule 135 (struct_declaration -> ; .)
    PRAGMA_         reduce using rule 135 (struct_declaration -> ; .)
    PPPRAGMA        reduce using rule 135 (struct_declaration -> ; .)
    ALIGNAS_        reduce using rule 135 (struct_declaration -> ; .)
    ATOMIC_         reduce using rule 135 (struct_declaration -> ; .)
    VOLATILE        reduce using rule 135 (struct_declaration -> ; .)
    RESTRICT        reduce using rule 135 (struct_declaration -> ; .)
    CONST           reduce using rule 135 (struct_declaration -> ; .)
    INT128          reduce using rule 135 (struct_declaration -> ; .)
    UNSIGNED        reduce using rule 135 (struct_declaration -> ; .)
    SIGNED          reduce using rule 135 (struct_declaration -> ; .)
    COMPLEX_        reduce using rule 135 (struct_declaration -> ; .)
    DOUBLE          reduce using rule 135 (struct_declaration -> ; .)
    FLOAT           reduce using rule 135 (struct_declaration -> ; .)
    LONG            reduce using rule 135 (struct_declaration -> ; .)
    INT             reduce using rule 135 (struct_declaration -> ; .)
    SHORT           reduce using rule 135 (struct_declaration -> ; .)
    CHAR            reduce using rule 135 (struct_declaration -> ; .)
    BOOL_           reduce using rule 135 (struct_declaration -> ; .)
    VOID            reduce using rule 135 (struct_declaration -> ; .)
    ENUM            reduce using rule 135 (struct_declaration -> ; .)
    TYPEID          reduce using rule 135 (struct_declaration -> ; .)
    UNION           reduce using rule 135 (struct_declaration -> ; .)
    STRUCT          reduce using rule 135 (struct_declaration -> ; .)
    RBRACE          reduce using rule 135 (struct_declaration -> ; .)


state 222

    (136) struct_declaration -> specifier_qualifier_list . struct_declarator_list_opt ;
    (109) specifier_qualifier_list -> specifier_qualifier_list . alignment_specifier
    (113) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (114) specifier_qualifier_list -> specifier_qualifier_list . type_specifier_no_typeid
    (143) struct_declarator_list_opt -> . struct_declarator_list
    (144) struct_declarator_list_opt -> . empty
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (137) struct_declarator_list -> . struct_declarator _11_222c22_struct_declarator_repeat
    (393) empty -> .
    (145) struct_declarator -> . : constant_expression
    (146) struct_declarator -> . declarator : constant_expression
    (147) struct_declarator -> . declarator
    (161) declarator -> . typeid_declarator
    (162) declarator -> . id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ;               reduce using rule 393 (empty -> .)
    :               shift and go to state 370
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    struct_declarator_list_opt     shift and go to state 366
    alignment_specifier            shift and go to state 351
    type_qualifier                 shift and go to state 352
    type_specifier_no_typeid       shift and go to state 353
    struct_declarator_list         shift and go to state 367
    empty                          shift and go to state 368
    struct_declarator              shift and go to state 369
    declarator                     shift and go to state 371
    typeid_declarator              shift and go to state 84
    id_declarator                  shift and go to state 186
    pointer                        shift and go to state 187
    direct_typeid_declarator       shift and go to state 85
    direct_id_declarator           shift and go to state 27

state 223

    (118) struct_or_union_specifier -> struct_or_union ID brace_open . _8_struct_declaration_list_optional brace_close
    (119) _8_struct_declaration_list_optional -> . struct_declaration_list
    (120) _8_struct_declaration_list_optional -> .
    (128) struct_declaration_list -> . struct_declaration _10_struct_declaration_repeat
    (134) struct_declaration -> . pppragma_directive
    (135) struct_declaration -> . ;
    (136) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt ;
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RBRACE          reduce using rule 120 (_8_struct_declaration_list_optional -> .)
    ;               shift and go to state 221
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    struct_or_union                shift and go to state 59
    _8_struct_declaration_list_optional shift and go to state 372
    struct_declaration_list        shift and go to state 373
    struct_declaration             shift and go to state 219
    pppragma_directive             shift and go to state 220
    specifier_qualifier_list       shift and go to state 222
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31

state 224

    (148) enum_specifier -> ENUM TYPEID brace_open . enumerator_list brace_close
    (153) enumerator_list -> . enumerator_list , enumerator
    (154) enumerator_list -> . enumerator_list ,
    (155) enumerator_list -> . enumerator
    (158) enumerator -> . ID _12_EQUALS_constant_expression_optional
    ID              shift and go to state 227

    enumerator_list                shift and go to state 374
    enumerator                     shift and go to state 226

state 225

    (150) enum_specifier -> ENUM brace_open enumerator_list . brace_close
    (153) enumerator_list -> enumerator_list . , enumerator
    (154) enumerator_list -> enumerator_list . ,
    (392) brace_close -> . RBRACE
    ,               shift and go to state 376
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 375

state 226

    (155) enumerator_list -> enumerator .
    ,               reduce using rule 155 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 155 (enumerator_list -> enumerator .)


state 227

    (158) enumerator -> ID . _12_EQUALS_constant_expression_optional
    (159) _12_EQUALS_constant_expression_optional -> . EQUALS constant_expression
    (160) _12_EQUALS_constant_expression_optional -> .
    EQUALS          shift and go to state 378
    ,               reduce using rule 160 (_12_EQUALS_constant_expression_optional -> .)
    RBRACE          reduce using rule 160 (_12_EQUALS_constant_expression_optional -> .)

    _12_EQUALS_constant_expression_optional shift and go to state 377

state 228

    (149) enum_specifier -> ENUM ID brace_open . enumerator_list brace_close
    (153) enumerator_list -> . enumerator_list , enumerator
    (154) enumerator_list -> . enumerator_list ,
    (155) enumerator_list -> . enumerator
    (158) enumerator -> . ID _12_EQUALS_constant_expression_optional
    ID              shift and go to state 227

    enumerator_list                shift and go to state 379
    enumerator                     shift and go to state 226

state 229

    (288) assignment_expression -> LPAREN . compound_statement RPAREN
    (339) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (354) primary_expression -> LPAREN . expression RPAREN
    (324) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (391) brace_open -> . LBRACE
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 229
    ALIGNAS_        shift and go to state 35
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    compound_statement             shift and go to state 380
    type_name                      shift and go to state 381
    brace_open                     shift and go to state 180
    expression                     shift and go to state 231
    cast_expression                shift and go to state 132
    specifier_qualifier_list       shift and go to state 210
    assignment_expression          shift and go to state 232
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    struct_or_union                shift and go to state 59
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 230

    (324) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (339) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list _18_222c22_optional brace_close
    RPAREN          shift and go to state 382


state 231

    (354) primary_expression -> LPAREN expression . RPAREN
    (281) expression -> expression . , assignment_expression
    RPAREN          shift and go to state 383
    ,               shift and go to state 384


state 232

    (282) expression -> assignment_expression .
    RPAREN          reduce using rule 282 (expression -> assignment_expression .)
    ,               reduce using rule 282 (expression -> assignment_expression .)
    ;               reduce using rule 282 (expression -> assignment_expression .)
    :               reduce using rule 282 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 282 (expression -> assignment_expression .)


state 233

    (286) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (325) cast_expression -> unary_expression .
    (291) assignment_operator -> . OREQUAL
    (292) assignment_operator -> . ANDEQUAL
    (293) assignment_operator -> . RSHIFTEQUAL
    (294) assignment_operator -> . LSHIFTEQUAL
    (295) assignment_operator -> . MINUSEQUAL
    (296) assignment_operator -> . PLUSEQUAL
    (297) assignment_operator -> . MODEQUAL
    (298) assignment_operator -> . DIVEQUAL
    (299) assignment_operator -> . TIMESEQUAL
    (300) assignment_operator -> . XOREQUAL
    (301) assignment_operator -> . EQUALS
    CONDOP          reduce using rule 325 (cast_expression -> unary_expression .)
    LOR             reduce using rule 325 (cast_expression -> unary_expression .)
    LAND            reduce using rule 325 (cast_expression -> unary_expression .)
    XOR             reduce using rule 325 (cast_expression -> unary_expression .)
    OR              reduce using rule 325 (cast_expression -> unary_expression .)
    AND             reduce using rule 325 (cast_expression -> unary_expression .)
    NE              reduce using rule 325 (cast_expression -> unary_expression .)
    EQ              reduce using rule 325 (cast_expression -> unary_expression .)
    GT              reduce using rule 325 (cast_expression -> unary_expression .)
    GE              reduce using rule 325 (cast_expression -> unary_expression .)
    LE              reduce using rule 325 (cast_expression -> unary_expression .)
    LT              reduce using rule 325 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 325 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 325 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 325 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 325 (cast_expression -> unary_expression .)
    MOD             reduce using rule 325 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 325 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 325 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 325 (cast_expression -> unary_expression .)
    ,               reduce using rule 325 (cast_expression -> unary_expression .)
    ;               reduce using rule 325 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 325 (cast_expression -> unary_expression .)
    :               reduce using rule 325 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 325 (cast_expression -> unary_expression .)
    OREQUAL         shift and go to state 386
    ANDEQUAL        shift and go to state 387
    RSHIFTEQUAL     shift and go to state 388
    LSHIFTEQUAL     shift and go to state 389
    MINUSEQUAL      shift and go to state 390
    PLUSEQUAL       shift and go to state 391
    MODEQUAL        shift and go to state 392
    DIVEQUAL        shift and go to state 393
    TIMESEQUAL      shift and go to state 394
    XOREQUAL        shift and go to state 395
    EQUALS          shift and go to state 396

    assignment_operator            shift and go to state 385

state 234

    (287) assignment_expression -> conditional_expression .
    RPAREN          reduce using rule 287 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 287 (assignment_expression -> conditional_expression .)
    ;               reduce using rule 287 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 287 (assignment_expression -> conditional_expression .)
    :               reduce using rule 287 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 287 (assignment_expression -> conditional_expression .)


state 235

    (11) static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional . RPAREN
    RPAREN          shift and go to state 397


state 236

    (12) _1_222c22_unified_string_literal_optional -> , . unified_string_literal
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    STRING_LITERAL  shift and go to state 153

    unified_string_literal         shift and go to state 398

state 237

    (303) conditional_expression -> binary_expression CONDOP . expression : conditional_expression
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 127
    expression                     shift and go to state 399
    conditional_expression         shift and go to state 234
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 238

    (305) binary_expression -> binary_expression LOR . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 400
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 239

    (306) binary_expression -> binary_expression LAND . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 401
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 240

    (307) binary_expression -> binary_expression XOR . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 402
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 241

    (308) binary_expression -> binary_expression OR . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 403
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 242

    (309) binary_expression -> binary_expression AND . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 404
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 243

    (310) binary_expression -> binary_expression NE . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 405
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 244

    (311) binary_expression -> binary_expression EQ . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 406
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 245

    (312) binary_expression -> binary_expression GT . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 407
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 246

    (313) binary_expression -> binary_expression GE . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 408
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 247

    (314) binary_expression -> binary_expression LE . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 409
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 248

    (315) binary_expression -> binary_expression LT . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 410
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 249

    (316) binary_expression -> binary_expression LSHIFT . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 411
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 250

    (317) binary_expression -> binary_expression RSHIFT . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 412
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 251

    (318) binary_expression -> binary_expression MINUS . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 413
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 252

    (319) binary_expression -> binary_expression PLUS . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 414
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 253

    (320) binary_expression -> binary_expression MOD . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 415
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 254

    (321) binary_expression -> binary_expression DIVIDE . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 416
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 255

    (322) binary_expression -> binary_expression TIMES . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 417
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 256

    (326) unary_expression -> ALIGNOF_ LPAREN . type_name RPAREN
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    type_name                      shift and go to state 418
    specifier_qualifier_list       shift and go to state 210
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 257

    (327) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (339) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (354) primary_expression -> LPAREN . expression RPAREN
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNAS_        shift and go to state 35
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    type_name                      shift and go to state 419
    expression                     shift and go to state 231
    specifier_qualifier_list       shift and go to state 210
    assignment_expression          shift and go to state 232
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    struct_or_union                shift and go to state 59
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 258

    (328) unary_expression -> SIZEOF unary_expression .
    CONDOP          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 328 (unary_expression -> SIZEOF unary_expression .)


state 259

    (329) unary_expression -> unary_operator cast_expression .
    CONDOP          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 329 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 329 (unary_expression -> unary_operator cast_expression .)


state 260

    (330) unary_expression -> MINUSMINUS unary_expression .
    CONDOP          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    ,               reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    ;               reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    :               reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 330 (unary_expression -> MINUSMINUS unary_expression .)


state 261

    (339) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (354) primary_expression -> LPAREN . expression RPAREN
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNAS_        shift and go to state 35
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    type_name                      shift and go to state 420
    expression                     shift and go to state 231
    specifier_qualifier_list       shift and go to state 210
    assignment_expression          shift and go to state 232
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    struct_or_union                shift and go to state 59
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 262

    (331) unary_expression -> PLUSPLUS unary_expression .
    CONDOP          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    ,               reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    ;               reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    :               reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 331 (unary_expression -> PLUSPLUS unary_expression .)


state 263

    (342) postfix_expression -> postfix_expression MINUSMINUS .
    MINUSMINUS      reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    .               reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LBRACKET        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    ,               reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    ;               reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    :               reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 342 (postfix_expression -> postfix_expression MINUSMINUS .)


state 264

    (343) postfix_expression -> postfix_expression PLUSPLUS .
    MINUSMINUS      reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    .               reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LBRACKET        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    ,               reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    ;               reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    :               reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 343 (postfix_expression -> postfix_expression PLUSPLUS .)


state 265

    (344) postfix_expression -> postfix_expression ARROW . TYPEID
    (345) postfix_expression -> postfix_expression ARROW . ID
    TYPEID          shift and go to state 421
    ID              shift and go to state 422


state 266

    (346) postfix_expression -> postfix_expression . . TYPEID
    (347) postfix_expression -> postfix_expression . . ID
    TYPEID          shift and go to state 423
    ID              shift and go to state 424


state 267

    (348) postfix_expression -> postfix_expression LPAREN . _19_argument_expression_list_optional RPAREN
    (349) _19_argument_expression_list_optional -> . argument_expression_list
    (350) _19_argument_expression_list_optional -> .
    (362) argument_expression_list -> . assignment_expression _20_222c22_assignment_expression_repeat
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    RPAREN          reduce using rule 350 (_19_argument_expression_list_optional -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    postfix_expression             shift and go to state 139
    _19_argument_expression_list_optional shift and go to state 425
    argument_expression_list       shift and go to state 426
    assignment_expression          shift and go to state 427
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 268

    (351) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    postfix_expression             shift and go to state 139
    expression                     shift and go to state 428
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 269

    (353) primary_expression -> OFFSETOF LPAREN . type_name , offsetof_member_designator RPAREN
    (245) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    type_name                      shift and go to state 429
    specifier_qualifier_list       shift and go to state 210
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 270

    (383) unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .
    U32STRING_LITERAL reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MINUSMINUS      reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PLUSPLUS        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    ARROW           reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    .               reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LPAREN          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LBRACKET        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    CONDOP          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LOR             reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LAND            reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    XOR             reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    OR              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    AND             reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    NE              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    EQ              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    GT              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    GE              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LE              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LT              reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LSHIFT          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RSHIFT          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MINUS           reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PLUS            reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MOD             reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    DIVIDE          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    TIMES           reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    ,               reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RPAREN          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    OREQUAL         reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    ANDEQUAL        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MODEQUAL        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    DIVEQUAL        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    XOREQUAL        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    EQUALS          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    ;               reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RBRACKET        reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    :               reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RBRACE          reduce using rule 383 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)


state 271

    (384) unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .
    U32STRING_LITERAL reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MINUSMINUS      reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PLUSPLUS        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    ARROW           reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    .               reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LPAREN          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LBRACKET        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    CONDOP          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LOR             reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LAND            reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    XOR             reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    OR              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    AND             reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    NE              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    EQ              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    GT              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    GE              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LE              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LT              reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LSHIFT          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RSHIFT          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MINUS           reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PLUS            reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MOD             reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    DIVIDE          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    TIMES           reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    ,               reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RPAREN          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    OREQUAL         reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    ANDEQUAL        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MODEQUAL        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    DIVEQUAL        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    XOREQUAL        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    EQUALS          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    ;               reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RBRACKET        reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    :               reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RBRACE          reduce using rule 384 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)


state 272

    (385) unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .
    U32STRING_LITERAL reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MINUSMINUS      reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PLUSPLUS        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    ARROW           reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    .               reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LPAREN          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LBRACKET        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    CONDOP          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LOR             reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LAND            reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    XOR             reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    OR              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    AND             reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    NE              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    EQ              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    GT              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    GE              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LE              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LT              reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LSHIFT          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RSHIFT          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MINUS           reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PLUS            reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MOD             reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    DIVIDE          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    TIMES           reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    ,               reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RPAREN          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    OREQUAL         reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    ANDEQUAL        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MODEQUAL        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    DIVEQUAL        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    XOREQUAL        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    EQUALS          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    ;               reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RBRACKET        reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    :               reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RBRACE          reduce using rule 385 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)


state 273

    (386) unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .
    U32STRING_LITERAL reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    WSTRING_LITERAL reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ARROW           reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    .               reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LPAREN          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LBRACKET        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    CONDOP          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LOR             reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LAND            reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOR             reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OR              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    AND             reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    NE              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQ              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GT              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GE              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LE              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LT              reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFT          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFT          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUS           reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUS            reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MOD             reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVIDE          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMES           reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ,               reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RPAREN          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OREQUAL         reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQUALS          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ;               reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACKET        reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    :               reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACE          reduce using rule 386 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)


state 274

    (381) unified_string_literal -> unified_string_literal STRING_LITERAL .
    STRING_LITERAL  reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSMINUS      reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSPLUS        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ARROW           reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    .               reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LPAREN          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LBRACKET        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    CONDOP          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LOR             reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LAND            reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOR             reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OR              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    AND             reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    NE              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQ              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GT              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GE              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LE              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LT              reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFT          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFT          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUS           reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUS            reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MOD             reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVIDE          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMES           reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ,               reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RPAREN          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OREQUAL         reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ANDEQUAL        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MODEQUAL        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVEQUAL        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOREQUAL        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQUALS          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ;               reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACKET        reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    :               reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACE          reduce using rule 381 (unified_string_literal -> unified_string_literal STRING_LITERAL .)


state 275

    (15) pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .
    ;               reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    STATIC_ASSERT_  reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    PRAGMA_         reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    PPPRAGMA        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    PPHASH          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    TIMES           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    LPAREN          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    ID              reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    ALIGNAS_        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    ATOMIC_         reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    NORETURN_       reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INLINE          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    THREAD_LOCAL_   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    TYPEDEF         reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    EXTERN          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    STATIC          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    REGISTER        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    AUTO            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    VOLATILE        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    RESTRICT        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    CONST           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT128          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    UNSIGNED        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    SIGNED          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    COMPLEX_        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    DOUBLE          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    FLOAT           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    LONG            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT             reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    SHORT           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    CHAR            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    BOOL_           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    VOID            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    ENUM            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    TYPEID          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    UNION           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    STRUCT          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    $end            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    RBRACE          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    RETURN          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    CONTINUE        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    BREAK           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    GOTO            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    FOR             reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    DO              reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    WHILE           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    SWITCH          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    IF              reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    DEFAULT         reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    CASE            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    LBRACE          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    ALIGNOF_        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    SIZEOF          reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    MINUSMINUS      reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    PLUSPLUS        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    LNOT            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    NOT             reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    MINUS           reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    PLUS            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    AND             reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    OFFSETOF        reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    U32STRING_LITERAL reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    U16STRING_LITERAL reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    U8STRING_LITERAL reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    WSTRING_LITERAL reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    STRING_LITERAL  reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    U32CHAR_CONST   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    U16CHAR_CONST   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    U8CHAR_CONST    reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    WCHAR_CONST     reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    CHAR_CONST      reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    HEX_FLOAT_CONST reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    FLOAT_CONST     reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT_CONST_CHAR  reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT_CONST_BIN   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT_CONST_HEX   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT_CONST_OCT   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    INT_CONST_DEC   reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)
    ELSE            reduce using rule 15 (pppragma_directive -> PRAGMA_ LPAREN unified_string_literal RPAREN .)


state 276

    (24) function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .
    ;               reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STATIC_ASSERT_  reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PRAGMA_         reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ALIGNAS_        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ATOMIC_         reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    NORETURN_       reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    THREAD_LOCAL_   reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INT128          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    COMPLEX_        reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    BOOL_           reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 24 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)


state 277

    (183) direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .
    LPAREN          reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    LBRACKET        reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    EQUALS          reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    ,               reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    ;               reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    RPAREN          reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    :               reduce using rule 183 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)


state 278

    (94) _4_222c22_init_declarator_items -> _4_222c22_init_declarator_items _4_222c22_init_declarator_item .
    ,               reduce using rule 94 (_4_222c22_init_declarator_items -> _4_222c22_init_declarator_items _4_222c22_init_declarator_item .)
    ;               reduce using rule 94 (_4_222c22_init_declarator_items -> _4_222c22_init_declarator_items _4_222c22_init_declarator_item .)


state 279

    (96) _4_222c22_init_declarator_item -> , init_declarator .
    ,               reduce using rule 96 (_4_222c22_init_declarator_item -> , init_declarator .)
    ;               reduce using rule 96 (_4_222c22_init_declarator_item -> , init_declarator .)


state 280

    (100) _5_EQUALS_initializer_optional -> EQUALS initializer .
    ,               reduce using rule 100 (_5_EQUALS_initializer_optional -> EQUALS initializer .)
    ;               reduce using rule 100 (_5_EQUALS_initializer_optional -> EQUALS initializer .)


state 281

    (223) initializer -> brace_open . initializer_list , brace_close
    (224) initializer -> brace_open . initializer_list_opt brace_close
    (226) initializer_list -> . designation_opt initializer _16_222c22_designation_opt_initializer_repeat
    (232) initializer_list_opt -> . initializer_list
    (233) initializer_list_opt -> . empty
    (235) designation_opt -> . designation
    (236) designation_opt -> . empty
    (393) empty -> .
    (234) designation -> . designator_list EQUALS
    (237) designator_list -> . designator _17_designator_repeat
    (243) designator -> . . identifier
    (244) designator -> . LBRACKET constant_expression RBRACKET
    RBRACE          reduce using rule 393 (empty -> .)
    LBRACE          reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    .               shift and go to state 437
    LBRACKET        shift and go to state 438

    initializer_list               shift and go to state 430
    initializer_list_opt           shift and go to state 431
    designation_opt                shift and go to state 432
    empty                          shift and go to state 433
    designation                    shift and go to state 434
    designator_list                shift and go to state 435
    designator                     shift and go to state 436

state 282

    (225) initializer -> assignment_expression .
    ,               reduce using rule 225 (initializer -> assignment_expression .)
    ;               reduce using rule 225 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 225 (initializer -> assignment_expression .)


state 283

    (177) direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt . RPAREN
    RPAREN          shift and go to state 439


state 284

    (178) direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list . RPAREN
    RPAREN          shift and go to state 440


state 285

    (179) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (182) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (289) assignment_expression_opt -> . assignment_expression
    (290) assignment_expression_opt -> . empty
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (393) empty -> .
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    TIMES           shift and go to state 441
    LPAREN          shift and go to state 229
    RBRACKET        reduce using rule 393 (empty -> .)
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression_opt      shift and go to state 442
    assignment_expression          shift and go to state 343
    empty                          shift and go to state 344
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 286

    (180) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (200) type_qualifier_list_opt -> type_qualifier_list .
    STATIC          shift and go to state 443
    TIMES           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ALIGNOF_        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)


state 287

    (181) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 444
    type_qualifier_list            shift and go to state 112
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 288

    (264) compound_statement -> brace_open block_item_list_opt . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 445

state 289

    (262) block_item_list_opt -> block_item_list .
    (260) block_item_list -> block_item_list . block_item
    (258) block_item -> . statement
    (259) block_item -> . declaration
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (38) declaration -> . decl_body ;
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    RBRACE          reduce using rule 262 (block_item_list_opt -> block_item_list .)
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    LPAREN          shift and go to state 229
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    block_item                     shift and go to state 446
    statement                      shift and go to state 292
    declaration                    shift and go to state 293
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 295
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    decl_body                      shift and go to state 16
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    declaration_specifiers_no_type shift and go to state 19
    declaration_specifiers         shift and go to state 91
    empty                          shift and go to state 447
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    assignment_expression          shift and go to state 232
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    struct_or_union                shift and go to state 59
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 290

    (263) block_item_list_opt -> empty .
    (284) expression_opt -> empty .
    RBRACE          reduce using rule 263 (block_item_list_opt -> empty .)
    ;               reduce using rule 284 (expression_opt -> empty .)


state 291

    (261) block_item_list -> block_item .
    STATIC_ASSERT_  reduce using rule 261 (block_item_list -> block_item .)
    PRAGMA_         reduce using rule 261 (block_item_list -> block_item .)
    PPPRAGMA        reduce using rule 261 (block_item_list -> block_item .)
    RETURN          reduce using rule 261 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 261 (block_item_list -> block_item .)
    BREAK           reduce using rule 261 (block_item_list -> block_item .)
    GOTO            reduce using rule 261 (block_item_list -> block_item .)
    FOR             reduce using rule 261 (block_item_list -> block_item .)
    DO              reduce using rule 261 (block_item_list -> block_item .)
    WHILE           reduce using rule 261 (block_item_list -> block_item .)
    SWITCH          reduce using rule 261 (block_item_list -> block_item .)
    IF              reduce using rule 261 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 261 (block_item_list -> block_item .)
    CASE            reduce using rule 261 (block_item_list -> block_item .)
    ID              reduce using rule 261 (block_item_list -> block_item .)
    LBRACE          reduce using rule 261 (block_item_list -> block_item .)
    ALIGNAS_        reduce using rule 261 (block_item_list -> block_item .)
    ATOMIC_         reduce using rule 261 (block_item_list -> block_item .)
    NORETURN_       reduce using rule 261 (block_item_list -> block_item .)
    INLINE          reduce using rule 261 (block_item_list -> block_item .)
    THREAD_LOCAL_   reduce using rule 261 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 261 (block_item_list -> block_item .)
    EXTERN          reduce using rule 261 (block_item_list -> block_item .)
    STATIC          reduce using rule 261 (block_item_list -> block_item .)
    REGISTER        reduce using rule 261 (block_item_list -> block_item .)
    AUTO            reduce using rule 261 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 261 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 261 (block_item_list -> block_item .)
    CONST           reduce using rule 261 (block_item_list -> block_item .)
    LPAREN          reduce using rule 261 (block_item_list -> block_item .)
    INT128          reduce using rule 261 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 261 (block_item_list -> block_item .)
    SIGNED          reduce using rule 261 (block_item_list -> block_item .)
    COMPLEX_        reduce using rule 261 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 261 (block_item_list -> block_item .)
    FLOAT           reduce using rule 261 (block_item_list -> block_item .)
    LONG            reduce using rule 261 (block_item_list -> block_item .)
    INT             reduce using rule 261 (block_item_list -> block_item .)
    SHORT           reduce using rule 261 (block_item_list -> block_item .)
    CHAR            reduce using rule 261 (block_item_list -> block_item .)
    BOOL_           reduce using rule 261 (block_item_list -> block_item .)
    VOID            reduce using rule 261 (block_item_list -> block_item .)
    ENUM            reduce using rule 261 (block_item_list -> block_item .)
    TYPEID          reduce using rule 261 (block_item_list -> block_item .)
    ALIGNOF_        reduce using rule 261 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 261 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 261 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 261 (block_item_list -> block_item .)
    UNION           reduce using rule 261 (block_item_list -> block_item .)
    STRUCT          reduce using rule 261 (block_item_list -> block_item .)
    LNOT            reduce using rule 261 (block_item_list -> block_item .)
    NOT             reduce using rule 261 (block_item_list -> block_item .)
    MINUS           reduce using rule 261 (block_item_list -> block_item .)
    PLUS            reduce using rule 261 (block_item_list -> block_item .)
    TIMES           reduce using rule 261 (block_item_list -> block_item .)
    AND             reduce using rule 261 (block_item_list -> block_item .)
    OFFSETOF        reduce using rule 261 (block_item_list -> block_item .)
    U32STRING_LITERAL reduce using rule 261 (block_item_list -> block_item .)
    U16STRING_LITERAL reduce using rule 261 (block_item_list -> block_item .)
    U8STRING_LITERAL reduce using rule 261 (block_item_list -> block_item .)
    WSTRING_LITERAL reduce using rule 261 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 261 (block_item_list -> block_item .)
    U32CHAR_CONST   reduce using rule 261 (block_item_list -> block_item .)
    U16CHAR_CONST   reduce using rule 261 (block_item_list -> block_item .)
    U8CHAR_CONST    reduce using rule 261 (block_item_list -> block_item .)
    WCHAR_CONST     reduce using rule 261 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 261 (block_item_list -> block_item .)
    HEX_FLOAT_CONST reduce using rule 261 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 261 (block_item_list -> block_item .)
    INT_CONST_CHAR  reduce using rule 261 (block_item_list -> block_item .)
    INT_CONST_BIN   reduce using rule 261 (block_item_list -> block_item .)
    INT_CONST_HEX   reduce using rule 261 (block_item_list -> block_item .)
    INT_CONST_OCT   reduce using rule 261 (block_item_list -> block_item .)
    INT_CONST_DEC   reduce using rule 261 (block_item_list -> block_item .)
    ;               reduce using rule 261 (block_item_list -> block_item .)
    RBRACE          reduce using rule 261 (block_item_list -> block_item .)


state 292

    (258) block_item -> statement .
    STATIC_ASSERT_  reduce using rule 258 (block_item -> statement .)
    PRAGMA_         reduce using rule 258 (block_item -> statement .)
    PPPRAGMA        reduce using rule 258 (block_item -> statement .)
    RETURN          reduce using rule 258 (block_item -> statement .)
    CONTINUE        reduce using rule 258 (block_item -> statement .)
    BREAK           reduce using rule 258 (block_item -> statement .)
    GOTO            reduce using rule 258 (block_item -> statement .)
    FOR             reduce using rule 258 (block_item -> statement .)
    DO              reduce using rule 258 (block_item -> statement .)
    WHILE           reduce using rule 258 (block_item -> statement .)
    SWITCH          reduce using rule 258 (block_item -> statement .)
    IF              reduce using rule 258 (block_item -> statement .)
    DEFAULT         reduce using rule 258 (block_item -> statement .)
    CASE            reduce using rule 258 (block_item -> statement .)
    ID              reduce using rule 258 (block_item -> statement .)
    LBRACE          reduce using rule 258 (block_item -> statement .)
    ALIGNAS_        reduce using rule 258 (block_item -> statement .)
    ATOMIC_         reduce using rule 258 (block_item -> statement .)
    NORETURN_       reduce using rule 258 (block_item -> statement .)
    INLINE          reduce using rule 258 (block_item -> statement .)
    THREAD_LOCAL_   reduce using rule 258 (block_item -> statement .)
    TYPEDEF         reduce using rule 258 (block_item -> statement .)
    EXTERN          reduce using rule 258 (block_item -> statement .)
    STATIC          reduce using rule 258 (block_item -> statement .)
    REGISTER        reduce using rule 258 (block_item -> statement .)
    AUTO            reduce using rule 258 (block_item -> statement .)
    VOLATILE        reduce using rule 258 (block_item -> statement .)
    RESTRICT        reduce using rule 258 (block_item -> statement .)
    CONST           reduce using rule 258 (block_item -> statement .)
    LPAREN          reduce using rule 258 (block_item -> statement .)
    INT128          reduce using rule 258 (block_item -> statement .)
    UNSIGNED        reduce using rule 258 (block_item -> statement .)
    SIGNED          reduce using rule 258 (block_item -> statement .)
    COMPLEX_        reduce using rule 258 (block_item -> statement .)
    DOUBLE          reduce using rule 258 (block_item -> statement .)
    FLOAT           reduce using rule 258 (block_item -> statement .)
    LONG            reduce using rule 258 (block_item -> statement .)
    INT             reduce using rule 258 (block_item -> statement .)
    SHORT           reduce using rule 258 (block_item -> statement .)
    CHAR            reduce using rule 258 (block_item -> statement .)
    BOOL_           reduce using rule 258 (block_item -> statement .)
    VOID            reduce using rule 258 (block_item -> statement .)
    ENUM            reduce using rule 258 (block_item -> statement .)
    TYPEID          reduce using rule 258 (block_item -> statement .)
    ALIGNOF_        reduce using rule 258 (block_item -> statement .)
    SIZEOF          reduce using rule 258 (block_item -> statement .)
    MINUSMINUS      reduce using rule 258 (block_item -> statement .)
    PLUSPLUS        reduce using rule 258 (block_item -> statement .)
    UNION           reduce using rule 258 (block_item -> statement .)
    STRUCT          reduce using rule 258 (block_item -> statement .)
    LNOT            reduce using rule 258 (block_item -> statement .)
    NOT             reduce using rule 258 (block_item -> statement .)
    MINUS           reduce using rule 258 (block_item -> statement .)
    PLUS            reduce using rule 258 (block_item -> statement .)
    TIMES           reduce using rule 258 (block_item -> statement .)
    AND             reduce using rule 258 (block_item -> statement .)
    OFFSETOF        reduce using rule 258 (block_item -> statement .)
    U32STRING_LITERAL reduce using rule 258 (block_item -> statement .)
    U16STRING_LITERAL reduce using rule 258 (block_item -> statement .)
    U8STRING_LITERAL reduce using rule 258 (block_item -> statement .)
    WSTRING_LITERAL reduce using rule 258 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 258 (block_item -> statement .)
    U32CHAR_CONST   reduce using rule 258 (block_item -> statement .)
    U16CHAR_CONST   reduce using rule 258 (block_item -> statement .)
    U8CHAR_CONST    reduce using rule 258 (block_item -> statement .)
    WCHAR_CONST     reduce using rule 258 (block_item -> statement .)
    CHAR_CONST      reduce using rule 258 (block_item -> statement .)
    HEX_FLOAT_CONST reduce using rule 258 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 258 (block_item -> statement .)
    INT_CONST_CHAR  reduce using rule 258 (block_item -> statement .)
    INT_CONST_BIN   reduce using rule 258 (block_item -> statement .)
    INT_CONST_HEX   reduce using rule 258 (block_item -> statement .)
    INT_CONST_OCT   reduce using rule 258 (block_item -> statement .)
    INT_CONST_DEC   reduce using rule 258 (block_item -> statement .)
    ;               reduce using rule 258 (block_item -> statement .)
    RBRACE          reduce using rule 258 (block_item -> statement .)


state 293

    (259) block_item -> declaration .
    STATIC_ASSERT_  reduce using rule 259 (block_item -> declaration .)
    PRAGMA_         reduce using rule 259 (block_item -> declaration .)
    PPPRAGMA        reduce using rule 259 (block_item -> declaration .)
    RETURN          reduce using rule 259 (block_item -> declaration .)
    CONTINUE        reduce using rule 259 (block_item -> declaration .)
    BREAK           reduce using rule 259 (block_item -> declaration .)
    GOTO            reduce using rule 259 (block_item -> declaration .)
    FOR             reduce using rule 259 (block_item -> declaration .)
    DO              reduce using rule 259 (block_item -> declaration .)
    WHILE           reduce using rule 259 (block_item -> declaration .)
    SWITCH          reduce using rule 259 (block_item -> declaration .)
    IF              reduce using rule 259 (block_item -> declaration .)
    DEFAULT         reduce using rule 259 (block_item -> declaration .)
    CASE            reduce using rule 259 (block_item -> declaration .)
    ID              reduce using rule 259 (block_item -> declaration .)
    LBRACE          reduce using rule 259 (block_item -> declaration .)
    ALIGNAS_        reduce using rule 259 (block_item -> declaration .)
    ATOMIC_         reduce using rule 259 (block_item -> declaration .)
    NORETURN_       reduce using rule 259 (block_item -> declaration .)
    INLINE          reduce using rule 259 (block_item -> declaration .)
    THREAD_LOCAL_   reduce using rule 259 (block_item -> declaration .)
    TYPEDEF         reduce using rule 259 (block_item -> declaration .)
    EXTERN          reduce using rule 259 (block_item -> declaration .)
    STATIC          reduce using rule 259 (block_item -> declaration .)
    REGISTER        reduce using rule 259 (block_item -> declaration .)
    AUTO            reduce using rule 259 (block_item -> declaration .)
    VOLATILE        reduce using rule 259 (block_item -> declaration .)
    RESTRICT        reduce using rule 259 (block_item -> declaration .)
    CONST           reduce using rule 259 (block_item -> declaration .)
    LPAREN          reduce using rule 259 (block_item -> declaration .)
    INT128          reduce using rule 259 (block_item -> declaration .)
    UNSIGNED        reduce using rule 259 (block_item -> declaration .)
    SIGNED          reduce using rule 259 (block_item -> declaration .)
    COMPLEX_        reduce using rule 259 (block_item -> declaration .)
    DOUBLE          reduce using rule 259 (block_item -> declaration .)
    FLOAT           reduce using rule 259 (block_item -> declaration .)
    LONG            reduce using rule 259 (block_item -> declaration .)
    INT             reduce using rule 259 (block_item -> declaration .)
    SHORT           reduce using rule 259 (block_item -> declaration .)
    CHAR            reduce using rule 259 (block_item -> declaration .)
    BOOL_           reduce using rule 259 (block_item -> declaration .)
    VOID            reduce using rule 259 (block_item -> declaration .)
    ENUM            reduce using rule 259 (block_item -> declaration .)
    TYPEID          reduce using rule 259 (block_item -> declaration .)
    ALIGNOF_        reduce using rule 259 (block_item -> declaration .)
    SIZEOF          reduce using rule 259 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 259 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 259 (block_item -> declaration .)
    UNION           reduce using rule 259 (block_item -> declaration .)
    STRUCT          reduce using rule 259 (block_item -> declaration .)
    LNOT            reduce using rule 259 (block_item -> declaration .)
    NOT             reduce using rule 259 (block_item -> declaration .)
    MINUS           reduce using rule 259 (block_item -> declaration .)
    PLUS            reduce using rule 259 (block_item -> declaration .)
    TIMES           reduce using rule 259 (block_item -> declaration .)
    AND             reduce using rule 259 (block_item -> declaration .)
    OFFSETOF        reduce using rule 259 (block_item -> declaration .)
    U32STRING_LITERAL reduce using rule 259 (block_item -> declaration .)
    U16STRING_LITERAL reduce using rule 259 (block_item -> declaration .)
    U8STRING_LITERAL reduce using rule 259 (block_item -> declaration .)
    WSTRING_LITERAL reduce using rule 259 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 259 (block_item -> declaration .)
    U32CHAR_CONST   reduce using rule 259 (block_item -> declaration .)
    U16CHAR_CONST   reduce using rule 259 (block_item -> declaration .)
    U8CHAR_CONST    reduce using rule 259 (block_item -> declaration .)
    WCHAR_CONST     reduce using rule 259 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 259 (block_item -> declaration .)
    HEX_FLOAT_CONST reduce using rule 259 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 259 (block_item -> declaration .)
    INT_CONST_CHAR  reduce using rule 259 (block_item -> declaration .)
    INT_CONST_BIN   reduce using rule 259 (block_item -> declaration .)
    INT_CONST_HEX   reduce using rule 259 (block_item -> declaration .)
    INT_CONST_OCT   reduce using rule 259 (block_item -> declaration .)
    INT_CONST_DEC   reduce using rule 259 (block_item -> declaration .)
    ;               reduce using rule 259 (block_item -> declaration .)
    RBRACE          reduce using rule 259 (block_item -> declaration .)


state 294

    (26) statement -> static_assert .
    STATIC_ASSERT_  reduce using rule 26 (statement -> static_assert .)
    PRAGMA_         reduce using rule 26 (statement -> static_assert .)
    PPPRAGMA        reduce using rule 26 (statement -> static_assert .)
    RETURN          reduce using rule 26 (statement -> static_assert .)
    CONTINUE        reduce using rule 26 (statement -> static_assert .)
    BREAK           reduce using rule 26 (statement -> static_assert .)
    GOTO            reduce using rule 26 (statement -> static_assert .)
    FOR             reduce using rule 26 (statement -> static_assert .)
    DO              reduce using rule 26 (statement -> static_assert .)
    WHILE           reduce using rule 26 (statement -> static_assert .)
    SWITCH          reduce using rule 26 (statement -> static_assert .)
    IF              reduce using rule 26 (statement -> static_assert .)
    DEFAULT         reduce using rule 26 (statement -> static_assert .)
    CASE            reduce using rule 26 (statement -> static_assert .)
    ID              reduce using rule 26 (statement -> static_assert .)
    LBRACE          reduce using rule 26 (statement -> static_assert .)
    ALIGNAS_        reduce using rule 26 (statement -> static_assert .)
    ATOMIC_         reduce using rule 26 (statement -> static_assert .)
    NORETURN_       reduce using rule 26 (statement -> static_assert .)
    INLINE          reduce using rule 26 (statement -> static_assert .)
    THREAD_LOCAL_   reduce using rule 26 (statement -> static_assert .)
    TYPEDEF         reduce using rule 26 (statement -> static_assert .)
    EXTERN          reduce using rule 26 (statement -> static_assert .)
    STATIC          reduce using rule 26 (statement -> static_assert .)
    REGISTER        reduce using rule 26 (statement -> static_assert .)
    AUTO            reduce using rule 26 (statement -> static_assert .)
    VOLATILE        reduce using rule 26 (statement -> static_assert .)
    RESTRICT        reduce using rule 26 (statement -> static_assert .)
    CONST           reduce using rule 26 (statement -> static_assert .)
    LPAREN          reduce using rule 26 (statement -> static_assert .)
    INT128          reduce using rule 26 (statement -> static_assert .)
    UNSIGNED        reduce using rule 26 (statement -> static_assert .)
    SIGNED          reduce using rule 26 (statement -> static_assert .)
    COMPLEX_        reduce using rule 26 (statement -> static_assert .)
    DOUBLE          reduce using rule 26 (statement -> static_assert .)
    FLOAT           reduce using rule 26 (statement -> static_assert .)
    LONG            reduce using rule 26 (statement -> static_assert .)
    INT             reduce using rule 26 (statement -> static_assert .)
    SHORT           reduce using rule 26 (statement -> static_assert .)
    CHAR            reduce using rule 26 (statement -> static_assert .)
    BOOL_           reduce using rule 26 (statement -> static_assert .)
    VOID            reduce using rule 26 (statement -> static_assert .)
    ENUM            reduce using rule 26 (statement -> static_assert .)
    TYPEID          reduce using rule 26 (statement -> static_assert .)
    ALIGNOF_        reduce using rule 26 (statement -> static_assert .)
    SIZEOF          reduce using rule 26 (statement -> static_assert .)
    MINUSMINUS      reduce using rule 26 (statement -> static_assert .)
    PLUSPLUS        reduce using rule 26 (statement -> static_assert .)
    UNION           reduce using rule 26 (statement -> static_assert .)
    STRUCT          reduce using rule 26 (statement -> static_assert .)
    LNOT            reduce using rule 26 (statement -> static_assert .)
    NOT             reduce using rule 26 (statement -> static_assert .)
    MINUS           reduce using rule 26 (statement -> static_assert .)
    PLUS            reduce using rule 26 (statement -> static_assert .)
    TIMES           reduce using rule 26 (statement -> static_assert .)
    AND             reduce using rule 26 (statement -> static_assert .)
    OFFSETOF        reduce using rule 26 (statement -> static_assert .)
    U32STRING_LITERAL reduce using rule 26 (statement -> static_assert .)
    U16STRING_LITERAL reduce using rule 26 (statement -> static_assert .)
    U8STRING_LITERAL reduce using rule 26 (statement -> static_assert .)
    WSTRING_LITERAL reduce using rule 26 (statement -> static_assert .)
    STRING_LITERAL  reduce using rule 26 (statement -> static_assert .)
    U32CHAR_CONST   reduce using rule 26 (statement -> static_assert .)
    U16CHAR_CONST   reduce using rule 26 (statement -> static_assert .)
    U8CHAR_CONST    reduce using rule 26 (statement -> static_assert .)
    WCHAR_CONST     reduce using rule 26 (statement -> static_assert .)
    CHAR_CONST      reduce using rule 26 (statement -> static_assert .)
    HEX_FLOAT_CONST reduce using rule 26 (statement -> static_assert .)
    FLOAT_CONST     reduce using rule 26 (statement -> static_assert .)
    INT_CONST_CHAR  reduce using rule 26 (statement -> static_assert .)
    INT_CONST_BIN   reduce using rule 26 (statement -> static_assert .)
    INT_CONST_HEX   reduce using rule 26 (statement -> static_assert .)
    INT_CONST_OCT   reduce using rule 26 (statement -> static_assert .)
    INT_CONST_DEC   reduce using rule 26 (statement -> static_assert .)
    ;               reduce using rule 26 (statement -> static_assert .)
    RBRACE          reduce using rule 26 (statement -> static_assert .)
    ELSE            reduce using rule 26 (statement -> static_assert .)


state 295

    (27) statement -> pppragma_directive .
    STATIC_ASSERT_  reduce using rule 27 (statement -> pppragma_directive .)
    PRAGMA_         reduce using rule 27 (statement -> pppragma_directive .)
    PPPRAGMA        reduce using rule 27 (statement -> pppragma_directive .)
    RETURN          reduce using rule 27 (statement -> pppragma_directive .)
    CONTINUE        reduce using rule 27 (statement -> pppragma_directive .)
    BREAK           reduce using rule 27 (statement -> pppragma_directive .)
    GOTO            reduce using rule 27 (statement -> pppragma_directive .)
    FOR             reduce using rule 27 (statement -> pppragma_directive .)
    DO              reduce using rule 27 (statement -> pppragma_directive .)
    WHILE           reduce using rule 27 (statement -> pppragma_directive .)
    SWITCH          reduce using rule 27 (statement -> pppragma_directive .)
    IF              reduce using rule 27 (statement -> pppragma_directive .)
    DEFAULT         reduce using rule 27 (statement -> pppragma_directive .)
    CASE            reduce using rule 27 (statement -> pppragma_directive .)
    ID              reduce using rule 27 (statement -> pppragma_directive .)
    LBRACE          reduce using rule 27 (statement -> pppragma_directive .)
    ALIGNAS_        reduce using rule 27 (statement -> pppragma_directive .)
    ATOMIC_         reduce using rule 27 (statement -> pppragma_directive .)
    NORETURN_       reduce using rule 27 (statement -> pppragma_directive .)
    INLINE          reduce using rule 27 (statement -> pppragma_directive .)
    THREAD_LOCAL_   reduce using rule 27 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 27 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 27 (statement -> pppragma_directive .)
    STATIC          reduce using rule 27 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 27 (statement -> pppragma_directive .)
    AUTO            reduce using rule 27 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 27 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 27 (statement -> pppragma_directive .)
    CONST           reduce using rule 27 (statement -> pppragma_directive .)
    LPAREN          reduce using rule 27 (statement -> pppragma_directive .)
    INT128          reduce using rule 27 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 27 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 27 (statement -> pppragma_directive .)
    COMPLEX_        reduce using rule 27 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 27 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 27 (statement -> pppragma_directive .)
    LONG            reduce using rule 27 (statement -> pppragma_directive .)
    INT             reduce using rule 27 (statement -> pppragma_directive .)
    SHORT           reduce using rule 27 (statement -> pppragma_directive .)
    CHAR            reduce using rule 27 (statement -> pppragma_directive .)
    BOOL_           reduce using rule 27 (statement -> pppragma_directive .)
    VOID            reduce using rule 27 (statement -> pppragma_directive .)
    ENUM            reduce using rule 27 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 27 (statement -> pppragma_directive .)
    ALIGNOF_        reduce using rule 27 (statement -> pppragma_directive .)
    SIZEOF          reduce using rule 27 (statement -> pppragma_directive .)
    MINUSMINUS      reduce using rule 27 (statement -> pppragma_directive .)
    PLUSPLUS        reduce using rule 27 (statement -> pppragma_directive .)
    UNION           reduce using rule 27 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 27 (statement -> pppragma_directive .)
    LNOT            reduce using rule 27 (statement -> pppragma_directive .)
    NOT             reduce using rule 27 (statement -> pppragma_directive .)
    MINUS           reduce using rule 27 (statement -> pppragma_directive .)
    PLUS            reduce using rule 27 (statement -> pppragma_directive .)
    TIMES           reduce using rule 27 (statement -> pppragma_directive .)
    AND             reduce using rule 27 (statement -> pppragma_directive .)
    OFFSETOF        reduce using rule 27 (statement -> pppragma_directive .)
    U32STRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    U16STRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    U8STRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 27 (statement -> pppragma_directive .)
    U32CHAR_CONST   reduce using rule 27 (statement -> pppragma_directive .)
    U16CHAR_CONST   reduce using rule 27 (statement -> pppragma_directive .)
    U8CHAR_CONST    reduce using rule 27 (statement -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 27 (statement -> pppragma_directive .)
    CHAR_CONST      reduce using rule 27 (statement -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 27 (statement -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 27 (statement -> pppragma_directive .)
    ;               reduce using rule 27 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 27 (statement -> pppragma_directive .)
    ELSE            reduce using rule 27 (statement -> pppragma_directive .)


state 296

    (28) statement -> jump_statement .
    STATIC_ASSERT_  reduce using rule 28 (statement -> jump_statement .)
    PRAGMA_         reduce using rule 28 (statement -> jump_statement .)
    PPPRAGMA        reduce using rule 28 (statement -> jump_statement .)
    RETURN          reduce using rule 28 (statement -> jump_statement .)
    CONTINUE        reduce using rule 28 (statement -> jump_statement .)
    BREAK           reduce using rule 28 (statement -> jump_statement .)
    GOTO            reduce using rule 28 (statement -> jump_statement .)
    FOR             reduce using rule 28 (statement -> jump_statement .)
    DO              reduce using rule 28 (statement -> jump_statement .)
    WHILE           reduce using rule 28 (statement -> jump_statement .)
    SWITCH          reduce using rule 28 (statement -> jump_statement .)
    IF              reduce using rule 28 (statement -> jump_statement .)
    DEFAULT         reduce using rule 28 (statement -> jump_statement .)
    CASE            reduce using rule 28 (statement -> jump_statement .)
    ID              reduce using rule 28 (statement -> jump_statement .)
    LBRACE          reduce using rule 28 (statement -> jump_statement .)
    ALIGNAS_        reduce using rule 28 (statement -> jump_statement .)
    ATOMIC_         reduce using rule 28 (statement -> jump_statement .)
    NORETURN_       reduce using rule 28 (statement -> jump_statement .)
    INLINE          reduce using rule 28 (statement -> jump_statement .)
    THREAD_LOCAL_   reduce using rule 28 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 28 (statement -> jump_statement .)
    EXTERN          reduce using rule 28 (statement -> jump_statement .)
    STATIC          reduce using rule 28 (statement -> jump_statement .)
    REGISTER        reduce using rule 28 (statement -> jump_statement .)
    AUTO            reduce using rule 28 (statement -> jump_statement .)
    VOLATILE        reduce using rule 28 (statement -> jump_statement .)
    RESTRICT        reduce using rule 28 (statement -> jump_statement .)
    CONST           reduce using rule 28 (statement -> jump_statement .)
    LPAREN          reduce using rule 28 (statement -> jump_statement .)
    INT128          reduce using rule 28 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 28 (statement -> jump_statement .)
    SIGNED          reduce using rule 28 (statement -> jump_statement .)
    COMPLEX_        reduce using rule 28 (statement -> jump_statement .)
    DOUBLE          reduce using rule 28 (statement -> jump_statement .)
    FLOAT           reduce using rule 28 (statement -> jump_statement .)
    LONG            reduce using rule 28 (statement -> jump_statement .)
    INT             reduce using rule 28 (statement -> jump_statement .)
    SHORT           reduce using rule 28 (statement -> jump_statement .)
    CHAR            reduce using rule 28 (statement -> jump_statement .)
    BOOL_           reduce using rule 28 (statement -> jump_statement .)
    VOID            reduce using rule 28 (statement -> jump_statement .)
    ENUM            reduce using rule 28 (statement -> jump_statement .)
    TYPEID          reduce using rule 28 (statement -> jump_statement .)
    ALIGNOF_        reduce using rule 28 (statement -> jump_statement .)
    SIZEOF          reduce using rule 28 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 28 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 28 (statement -> jump_statement .)
    UNION           reduce using rule 28 (statement -> jump_statement .)
    STRUCT          reduce using rule 28 (statement -> jump_statement .)
    LNOT            reduce using rule 28 (statement -> jump_statement .)
    NOT             reduce using rule 28 (statement -> jump_statement .)
    MINUS           reduce using rule 28 (statement -> jump_statement .)
    PLUS            reduce using rule 28 (statement -> jump_statement .)
    TIMES           reduce using rule 28 (statement -> jump_statement .)
    AND             reduce using rule 28 (statement -> jump_statement .)
    OFFSETOF        reduce using rule 28 (statement -> jump_statement .)
    U32STRING_LITERAL reduce using rule 28 (statement -> jump_statement .)
    U16STRING_LITERAL reduce using rule 28 (statement -> jump_statement .)
    U8STRING_LITERAL reduce using rule 28 (statement -> jump_statement .)
    WSTRING_LITERAL reduce using rule 28 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 28 (statement -> jump_statement .)
    U32CHAR_CONST   reduce using rule 28 (statement -> jump_statement .)
    U16CHAR_CONST   reduce using rule 28 (statement -> jump_statement .)
    U8CHAR_CONST    reduce using rule 28 (statement -> jump_statement .)
    WCHAR_CONST     reduce using rule 28 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 28 (statement -> jump_statement .)
    HEX_FLOAT_CONST reduce using rule 28 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 28 (statement -> jump_statement .)
    INT_CONST_CHAR  reduce using rule 28 (statement -> jump_statement .)
    INT_CONST_BIN   reduce using rule 28 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 28 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 28 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 28 (statement -> jump_statement .)
    ;               reduce using rule 28 (statement -> jump_statement .)
    RBRACE          reduce using rule 28 (statement -> jump_statement .)
    ELSE            reduce using rule 28 (statement -> jump_statement .)


state 297

    (29) statement -> iteration_statement .
    STATIC_ASSERT_  reduce using rule 29 (statement -> iteration_statement .)
    PRAGMA_         reduce using rule 29 (statement -> iteration_statement .)
    PPPRAGMA        reduce using rule 29 (statement -> iteration_statement .)
    RETURN          reduce using rule 29 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 29 (statement -> iteration_statement .)
    BREAK           reduce using rule 29 (statement -> iteration_statement .)
    GOTO            reduce using rule 29 (statement -> iteration_statement .)
    FOR             reduce using rule 29 (statement -> iteration_statement .)
    DO              reduce using rule 29 (statement -> iteration_statement .)
    WHILE           reduce using rule 29 (statement -> iteration_statement .)
    SWITCH          reduce using rule 29 (statement -> iteration_statement .)
    IF              reduce using rule 29 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 29 (statement -> iteration_statement .)
    CASE            reduce using rule 29 (statement -> iteration_statement .)
    ID              reduce using rule 29 (statement -> iteration_statement .)
    LBRACE          reduce using rule 29 (statement -> iteration_statement .)
    ALIGNAS_        reduce using rule 29 (statement -> iteration_statement .)
    ATOMIC_         reduce using rule 29 (statement -> iteration_statement .)
    NORETURN_       reduce using rule 29 (statement -> iteration_statement .)
    INLINE          reduce using rule 29 (statement -> iteration_statement .)
    THREAD_LOCAL_   reduce using rule 29 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 29 (statement -> iteration_statement .)
    EXTERN          reduce using rule 29 (statement -> iteration_statement .)
    STATIC          reduce using rule 29 (statement -> iteration_statement .)
    REGISTER        reduce using rule 29 (statement -> iteration_statement .)
    AUTO            reduce using rule 29 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 29 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 29 (statement -> iteration_statement .)
    CONST           reduce using rule 29 (statement -> iteration_statement .)
    LPAREN          reduce using rule 29 (statement -> iteration_statement .)
    INT128          reduce using rule 29 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 29 (statement -> iteration_statement .)
    SIGNED          reduce using rule 29 (statement -> iteration_statement .)
    COMPLEX_        reduce using rule 29 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 29 (statement -> iteration_statement .)
    FLOAT           reduce using rule 29 (statement -> iteration_statement .)
    LONG            reduce using rule 29 (statement -> iteration_statement .)
    INT             reduce using rule 29 (statement -> iteration_statement .)
    SHORT           reduce using rule 29 (statement -> iteration_statement .)
    CHAR            reduce using rule 29 (statement -> iteration_statement .)
    BOOL_           reduce using rule 29 (statement -> iteration_statement .)
    VOID            reduce using rule 29 (statement -> iteration_statement .)
    ENUM            reduce using rule 29 (statement -> iteration_statement .)
    TYPEID          reduce using rule 29 (statement -> iteration_statement .)
    ALIGNOF_        reduce using rule 29 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 29 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 29 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 29 (statement -> iteration_statement .)
    UNION           reduce using rule 29 (statement -> iteration_statement .)
    STRUCT          reduce using rule 29 (statement -> iteration_statement .)
    LNOT            reduce using rule 29 (statement -> iteration_statement .)
    NOT             reduce using rule 29 (statement -> iteration_statement .)
    MINUS           reduce using rule 29 (statement -> iteration_statement .)
    PLUS            reduce using rule 29 (statement -> iteration_statement .)
    TIMES           reduce using rule 29 (statement -> iteration_statement .)
    AND             reduce using rule 29 (statement -> iteration_statement .)
    OFFSETOF        reduce using rule 29 (statement -> iteration_statement .)
    U32STRING_LITERAL reduce using rule 29 (statement -> iteration_statement .)
    U16STRING_LITERAL reduce using rule 29 (statement -> iteration_statement .)
    U8STRING_LITERAL reduce using rule 29 (statement -> iteration_statement .)
    WSTRING_LITERAL reduce using rule 29 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 29 (statement -> iteration_statement .)
    U32CHAR_CONST   reduce using rule 29 (statement -> iteration_statement .)
    U16CHAR_CONST   reduce using rule 29 (statement -> iteration_statement .)
    U8CHAR_CONST    reduce using rule 29 (statement -> iteration_statement .)
    WCHAR_CONST     reduce using rule 29 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 29 (statement -> iteration_statement .)
    HEX_FLOAT_CONST reduce using rule 29 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 29 (statement -> iteration_statement .)
    INT_CONST_CHAR  reduce using rule 29 (statement -> iteration_statement .)
    INT_CONST_BIN   reduce using rule 29 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 29 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 29 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 29 (statement -> iteration_statement .)
    ;               reduce using rule 29 (statement -> iteration_statement .)
    RBRACE          reduce using rule 29 (statement -> iteration_statement .)
    ELSE            reduce using rule 29 (statement -> iteration_statement .)


state 298

    (30) statement -> selection_statement .
    STATIC_ASSERT_  reduce using rule 30 (statement -> selection_statement .)
    PRAGMA_         reduce using rule 30 (statement -> selection_statement .)
    PPPRAGMA        reduce using rule 30 (statement -> selection_statement .)
    RETURN          reduce using rule 30 (statement -> selection_statement .)
    CONTINUE        reduce using rule 30 (statement -> selection_statement .)
    BREAK           reduce using rule 30 (statement -> selection_statement .)
    GOTO            reduce using rule 30 (statement -> selection_statement .)
    FOR             reduce using rule 30 (statement -> selection_statement .)
    DO              reduce using rule 30 (statement -> selection_statement .)
    WHILE           reduce using rule 30 (statement -> selection_statement .)
    SWITCH          reduce using rule 30 (statement -> selection_statement .)
    IF              reduce using rule 30 (statement -> selection_statement .)
    DEFAULT         reduce using rule 30 (statement -> selection_statement .)
    CASE            reduce using rule 30 (statement -> selection_statement .)
    ID              reduce using rule 30 (statement -> selection_statement .)
    LBRACE          reduce using rule 30 (statement -> selection_statement .)
    ALIGNAS_        reduce using rule 30 (statement -> selection_statement .)
    ATOMIC_         reduce using rule 30 (statement -> selection_statement .)
    NORETURN_       reduce using rule 30 (statement -> selection_statement .)
    INLINE          reduce using rule 30 (statement -> selection_statement .)
    THREAD_LOCAL_   reduce using rule 30 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 30 (statement -> selection_statement .)
    EXTERN          reduce using rule 30 (statement -> selection_statement .)
    STATIC          reduce using rule 30 (statement -> selection_statement .)
    REGISTER        reduce using rule 30 (statement -> selection_statement .)
    AUTO            reduce using rule 30 (statement -> selection_statement .)
    VOLATILE        reduce using rule 30 (statement -> selection_statement .)
    RESTRICT        reduce using rule 30 (statement -> selection_statement .)
    CONST           reduce using rule 30 (statement -> selection_statement .)
    LPAREN          reduce using rule 30 (statement -> selection_statement .)
    INT128          reduce using rule 30 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 30 (statement -> selection_statement .)
    SIGNED          reduce using rule 30 (statement -> selection_statement .)
    COMPLEX_        reduce using rule 30 (statement -> selection_statement .)
    DOUBLE          reduce using rule 30 (statement -> selection_statement .)
    FLOAT           reduce using rule 30 (statement -> selection_statement .)
    LONG            reduce using rule 30 (statement -> selection_statement .)
    INT             reduce using rule 30 (statement -> selection_statement .)
    SHORT           reduce using rule 30 (statement -> selection_statement .)
    CHAR            reduce using rule 30 (statement -> selection_statement .)
    BOOL_           reduce using rule 30 (statement -> selection_statement .)
    VOID            reduce using rule 30 (statement -> selection_statement .)
    ENUM            reduce using rule 30 (statement -> selection_statement .)
    TYPEID          reduce using rule 30 (statement -> selection_statement .)
    ALIGNOF_        reduce using rule 30 (statement -> selection_statement .)
    SIZEOF          reduce using rule 30 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 30 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 30 (statement -> selection_statement .)
    UNION           reduce using rule 30 (statement -> selection_statement .)
    STRUCT          reduce using rule 30 (statement -> selection_statement .)
    LNOT            reduce using rule 30 (statement -> selection_statement .)
    NOT             reduce using rule 30 (statement -> selection_statement .)
    MINUS           reduce using rule 30 (statement -> selection_statement .)
    PLUS            reduce using rule 30 (statement -> selection_statement .)
    TIMES           reduce using rule 30 (statement -> selection_statement .)
    AND             reduce using rule 30 (statement -> selection_statement .)
    OFFSETOF        reduce using rule 30 (statement -> selection_statement .)
    U32STRING_LITERAL reduce using rule 30 (statement -> selection_statement .)
    U16STRING_LITERAL reduce using rule 30 (statement -> selection_statement .)
    U8STRING_LITERAL reduce using rule 30 (statement -> selection_statement .)
    WSTRING_LITERAL reduce using rule 30 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 30 (statement -> selection_statement .)
    U32CHAR_CONST   reduce using rule 30 (statement -> selection_statement .)
    U16CHAR_CONST   reduce using rule 30 (statement -> selection_statement .)
    U8CHAR_CONST    reduce using rule 30 (statement -> selection_statement .)
    WCHAR_CONST     reduce using rule 30 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 30 (statement -> selection_statement .)
    HEX_FLOAT_CONST reduce using rule 30 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 30 (statement -> selection_statement .)
    INT_CONST_CHAR  reduce using rule 30 (statement -> selection_statement .)
    INT_CONST_BIN   reduce using rule 30 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 30 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 30 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 30 (statement -> selection_statement .)
    ;               reduce using rule 30 (statement -> selection_statement .)
    RBRACE          reduce using rule 30 (statement -> selection_statement .)
    ELSE            reduce using rule 30 (statement -> selection_statement .)


state 299

    (31) statement -> compound_statement .
    STATIC_ASSERT_  reduce using rule 31 (statement -> compound_statement .)
    PRAGMA_         reduce using rule 31 (statement -> compound_statement .)
    PPPRAGMA        reduce using rule 31 (statement -> compound_statement .)
    RETURN          reduce using rule 31 (statement -> compound_statement .)
    CONTINUE        reduce using rule 31 (statement -> compound_statement .)
    BREAK           reduce using rule 31 (statement -> compound_statement .)
    GOTO            reduce using rule 31 (statement -> compound_statement .)
    FOR             reduce using rule 31 (statement -> compound_statement .)
    DO              reduce using rule 31 (statement -> compound_statement .)
    WHILE           reduce using rule 31 (statement -> compound_statement .)
    SWITCH          reduce using rule 31 (statement -> compound_statement .)
    IF              reduce using rule 31 (statement -> compound_statement .)
    DEFAULT         reduce using rule 31 (statement -> compound_statement .)
    CASE            reduce using rule 31 (statement -> compound_statement .)
    ID              reduce using rule 31 (statement -> compound_statement .)
    LBRACE          reduce using rule 31 (statement -> compound_statement .)
    ALIGNAS_        reduce using rule 31 (statement -> compound_statement .)
    ATOMIC_         reduce using rule 31 (statement -> compound_statement .)
    NORETURN_       reduce using rule 31 (statement -> compound_statement .)
    INLINE          reduce using rule 31 (statement -> compound_statement .)
    THREAD_LOCAL_   reduce using rule 31 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 31 (statement -> compound_statement .)
    EXTERN          reduce using rule 31 (statement -> compound_statement .)
    STATIC          reduce using rule 31 (statement -> compound_statement .)
    REGISTER        reduce using rule 31 (statement -> compound_statement .)
    AUTO            reduce using rule 31 (statement -> compound_statement .)
    VOLATILE        reduce using rule 31 (statement -> compound_statement .)
    RESTRICT        reduce using rule 31 (statement -> compound_statement .)
    CONST           reduce using rule 31 (statement -> compound_statement .)
    LPAREN          reduce using rule 31 (statement -> compound_statement .)
    INT128          reduce using rule 31 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 31 (statement -> compound_statement .)
    SIGNED          reduce using rule 31 (statement -> compound_statement .)
    COMPLEX_        reduce using rule 31 (statement -> compound_statement .)
    DOUBLE          reduce using rule 31 (statement -> compound_statement .)
    FLOAT           reduce using rule 31 (statement -> compound_statement .)
    LONG            reduce using rule 31 (statement -> compound_statement .)
    INT             reduce using rule 31 (statement -> compound_statement .)
    SHORT           reduce using rule 31 (statement -> compound_statement .)
    CHAR            reduce using rule 31 (statement -> compound_statement .)
    BOOL_           reduce using rule 31 (statement -> compound_statement .)
    VOID            reduce using rule 31 (statement -> compound_statement .)
    ENUM            reduce using rule 31 (statement -> compound_statement .)
    TYPEID          reduce using rule 31 (statement -> compound_statement .)
    ALIGNOF_        reduce using rule 31 (statement -> compound_statement .)
    SIZEOF          reduce using rule 31 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 31 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 31 (statement -> compound_statement .)
    UNION           reduce using rule 31 (statement -> compound_statement .)
    STRUCT          reduce using rule 31 (statement -> compound_statement .)
    LNOT            reduce using rule 31 (statement -> compound_statement .)
    NOT             reduce using rule 31 (statement -> compound_statement .)
    MINUS           reduce using rule 31 (statement -> compound_statement .)
    PLUS            reduce using rule 31 (statement -> compound_statement .)
    TIMES           reduce using rule 31 (statement -> compound_statement .)
    AND             reduce using rule 31 (statement -> compound_statement .)
    OFFSETOF        reduce using rule 31 (statement -> compound_statement .)
    U32STRING_LITERAL reduce using rule 31 (statement -> compound_statement .)
    U16STRING_LITERAL reduce using rule 31 (statement -> compound_statement .)
    U8STRING_LITERAL reduce using rule 31 (statement -> compound_statement .)
    WSTRING_LITERAL reduce using rule 31 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 31 (statement -> compound_statement .)
    U32CHAR_CONST   reduce using rule 31 (statement -> compound_statement .)
    U16CHAR_CONST   reduce using rule 31 (statement -> compound_statement .)
    U8CHAR_CONST    reduce using rule 31 (statement -> compound_statement .)
    WCHAR_CONST     reduce using rule 31 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 31 (statement -> compound_statement .)
    HEX_FLOAT_CONST reduce using rule 31 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 31 (statement -> compound_statement .)
    INT_CONST_CHAR  reduce using rule 31 (statement -> compound_statement .)
    INT_CONST_BIN   reduce using rule 31 (statement -> compound_statement .)
    INT_CONST_HEX   reduce using rule 31 (statement -> compound_statement .)
    INT_CONST_OCT   reduce using rule 31 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 31 (statement -> compound_statement .)
    ;               reduce using rule 31 (statement -> compound_statement .)
    RBRACE          reduce using rule 31 (statement -> compound_statement .)
    ELSE            reduce using rule 31 (statement -> compound_statement .)


state 300

    (32) statement -> expression_statement .
    STATIC_ASSERT_  reduce using rule 32 (statement -> expression_statement .)
    PRAGMA_         reduce using rule 32 (statement -> expression_statement .)
    PPPRAGMA        reduce using rule 32 (statement -> expression_statement .)
    RETURN          reduce using rule 32 (statement -> expression_statement .)
    CONTINUE        reduce using rule 32 (statement -> expression_statement .)
    BREAK           reduce using rule 32 (statement -> expression_statement .)
    GOTO            reduce using rule 32 (statement -> expression_statement .)
    FOR             reduce using rule 32 (statement -> expression_statement .)
    DO              reduce using rule 32 (statement -> expression_statement .)
    WHILE           reduce using rule 32 (statement -> expression_statement .)
    SWITCH          reduce using rule 32 (statement -> expression_statement .)
    IF              reduce using rule 32 (statement -> expression_statement .)
    DEFAULT         reduce using rule 32 (statement -> expression_statement .)
    CASE            reduce using rule 32 (statement -> expression_statement .)
    ID              reduce using rule 32 (statement -> expression_statement .)
    LBRACE          reduce using rule 32 (statement -> expression_statement .)
    ALIGNAS_        reduce using rule 32 (statement -> expression_statement .)
    ATOMIC_         reduce using rule 32 (statement -> expression_statement .)
    NORETURN_       reduce using rule 32 (statement -> expression_statement .)
    INLINE          reduce using rule 32 (statement -> expression_statement .)
    THREAD_LOCAL_   reduce using rule 32 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 32 (statement -> expression_statement .)
    EXTERN          reduce using rule 32 (statement -> expression_statement .)
    STATIC          reduce using rule 32 (statement -> expression_statement .)
    REGISTER        reduce using rule 32 (statement -> expression_statement .)
    AUTO            reduce using rule 32 (statement -> expression_statement .)
    VOLATILE        reduce using rule 32 (statement -> expression_statement .)
    RESTRICT        reduce using rule 32 (statement -> expression_statement .)
    CONST           reduce using rule 32 (statement -> expression_statement .)
    LPAREN          reduce using rule 32 (statement -> expression_statement .)
    INT128          reduce using rule 32 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 32 (statement -> expression_statement .)
    SIGNED          reduce using rule 32 (statement -> expression_statement .)
    COMPLEX_        reduce using rule 32 (statement -> expression_statement .)
    DOUBLE          reduce using rule 32 (statement -> expression_statement .)
    FLOAT           reduce using rule 32 (statement -> expression_statement .)
    LONG            reduce using rule 32 (statement -> expression_statement .)
    INT             reduce using rule 32 (statement -> expression_statement .)
    SHORT           reduce using rule 32 (statement -> expression_statement .)
    CHAR            reduce using rule 32 (statement -> expression_statement .)
    BOOL_           reduce using rule 32 (statement -> expression_statement .)
    VOID            reduce using rule 32 (statement -> expression_statement .)
    ENUM            reduce using rule 32 (statement -> expression_statement .)
    TYPEID          reduce using rule 32 (statement -> expression_statement .)
    ALIGNOF_        reduce using rule 32 (statement -> expression_statement .)
    SIZEOF          reduce using rule 32 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 32 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 32 (statement -> expression_statement .)
    UNION           reduce using rule 32 (statement -> expression_statement .)
    STRUCT          reduce using rule 32 (statement -> expression_statement .)
    LNOT            reduce using rule 32 (statement -> expression_statement .)
    NOT             reduce using rule 32 (statement -> expression_statement .)
    MINUS           reduce using rule 32 (statement -> expression_statement .)
    PLUS            reduce using rule 32 (statement -> expression_statement .)
    TIMES           reduce using rule 32 (statement -> expression_statement .)
    AND             reduce using rule 32 (statement -> expression_statement .)
    OFFSETOF        reduce using rule 32 (statement -> expression_statement .)
    U32STRING_LITERAL reduce using rule 32 (statement -> expression_statement .)
    U16STRING_LITERAL reduce using rule 32 (statement -> expression_statement .)
    U8STRING_LITERAL reduce using rule 32 (statement -> expression_statement .)
    WSTRING_LITERAL reduce using rule 32 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 32 (statement -> expression_statement .)
    U32CHAR_CONST   reduce using rule 32 (statement -> expression_statement .)
    U16CHAR_CONST   reduce using rule 32 (statement -> expression_statement .)
    U8CHAR_CONST    reduce using rule 32 (statement -> expression_statement .)
    WCHAR_CONST     reduce using rule 32 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 32 (statement -> expression_statement .)
    HEX_FLOAT_CONST reduce using rule 32 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 32 (statement -> expression_statement .)
    INT_CONST_CHAR  reduce using rule 32 (statement -> expression_statement .)
    INT_CONST_BIN   reduce using rule 32 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 32 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 32 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 32 (statement -> expression_statement .)
    ;               reduce using rule 32 (statement -> expression_statement .)
    RBRACE          reduce using rule 32 (statement -> expression_statement .)
    ELSE            reduce using rule 32 (statement -> expression_statement .)


state 301

    (33) statement -> labeled_statement .
    STATIC_ASSERT_  reduce using rule 33 (statement -> labeled_statement .)
    PRAGMA_         reduce using rule 33 (statement -> labeled_statement .)
    PPPRAGMA        reduce using rule 33 (statement -> labeled_statement .)
    RETURN          reduce using rule 33 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 33 (statement -> labeled_statement .)
    BREAK           reduce using rule 33 (statement -> labeled_statement .)
    GOTO            reduce using rule 33 (statement -> labeled_statement .)
    FOR             reduce using rule 33 (statement -> labeled_statement .)
    DO              reduce using rule 33 (statement -> labeled_statement .)
    WHILE           reduce using rule 33 (statement -> labeled_statement .)
    SWITCH          reduce using rule 33 (statement -> labeled_statement .)
    IF              reduce using rule 33 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 33 (statement -> labeled_statement .)
    CASE            reduce using rule 33 (statement -> labeled_statement .)
    ID              reduce using rule 33 (statement -> labeled_statement .)
    LBRACE          reduce using rule 33 (statement -> labeled_statement .)
    ALIGNAS_        reduce using rule 33 (statement -> labeled_statement .)
    ATOMIC_         reduce using rule 33 (statement -> labeled_statement .)
    NORETURN_       reduce using rule 33 (statement -> labeled_statement .)
    INLINE          reduce using rule 33 (statement -> labeled_statement .)
    THREAD_LOCAL_   reduce using rule 33 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 33 (statement -> labeled_statement .)
    EXTERN          reduce using rule 33 (statement -> labeled_statement .)
    STATIC          reduce using rule 33 (statement -> labeled_statement .)
    REGISTER        reduce using rule 33 (statement -> labeled_statement .)
    AUTO            reduce using rule 33 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 33 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 33 (statement -> labeled_statement .)
    CONST           reduce using rule 33 (statement -> labeled_statement .)
    LPAREN          reduce using rule 33 (statement -> labeled_statement .)
    INT128          reduce using rule 33 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 33 (statement -> labeled_statement .)
    SIGNED          reduce using rule 33 (statement -> labeled_statement .)
    COMPLEX_        reduce using rule 33 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 33 (statement -> labeled_statement .)
    FLOAT           reduce using rule 33 (statement -> labeled_statement .)
    LONG            reduce using rule 33 (statement -> labeled_statement .)
    INT             reduce using rule 33 (statement -> labeled_statement .)
    SHORT           reduce using rule 33 (statement -> labeled_statement .)
    CHAR            reduce using rule 33 (statement -> labeled_statement .)
    BOOL_           reduce using rule 33 (statement -> labeled_statement .)
    VOID            reduce using rule 33 (statement -> labeled_statement .)
    ENUM            reduce using rule 33 (statement -> labeled_statement .)
    TYPEID          reduce using rule 33 (statement -> labeled_statement .)
    ALIGNOF_        reduce using rule 33 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 33 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 33 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 33 (statement -> labeled_statement .)
    UNION           reduce using rule 33 (statement -> labeled_statement .)
    STRUCT          reduce using rule 33 (statement -> labeled_statement .)
    LNOT            reduce using rule 33 (statement -> labeled_statement .)
    NOT             reduce using rule 33 (statement -> labeled_statement .)
    MINUS           reduce using rule 33 (statement -> labeled_statement .)
    PLUS            reduce using rule 33 (statement -> labeled_statement .)
    TIMES           reduce using rule 33 (statement -> labeled_statement .)
    AND             reduce using rule 33 (statement -> labeled_statement .)
    OFFSETOF        reduce using rule 33 (statement -> labeled_statement .)
    U32STRING_LITERAL reduce using rule 33 (statement -> labeled_statement .)
    U16STRING_LITERAL reduce using rule 33 (statement -> labeled_statement .)
    U8STRING_LITERAL reduce using rule 33 (statement -> labeled_statement .)
    WSTRING_LITERAL reduce using rule 33 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 33 (statement -> labeled_statement .)
    U32CHAR_CONST   reduce using rule 33 (statement -> labeled_statement .)
    U16CHAR_CONST   reduce using rule 33 (statement -> labeled_statement .)
    U8CHAR_CONST    reduce using rule 33 (statement -> labeled_statement .)
    WCHAR_CONST     reduce using rule 33 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 33 (statement -> labeled_statement .)
    HEX_FLOAT_CONST reduce using rule 33 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_CHAR  reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_BIN   reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 33 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 33 (statement -> labeled_statement .)
    ;               reduce using rule 33 (statement -> labeled_statement .)
    RBRACE          reduce using rule 33 (statement -> labeled_statement .)
    ELSE            reduce using rule 33 (statement -> labeled_statement .)


state 302

    (275) jump_statement -> RETURN . ;
    (276) jump_statement -> RETURN . expression ;
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ;               shift and go to state 448
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression                     shift and go to state 449
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 303

    (283) expression_opt -> expression .
    (281) expression -> expression . , assignment_expression
    ;               reduce using rule 283 (expression_opt -> expression .)
    RPAREN          reduce using rule 283 (expression_opt -> expression .)
    ,               shift and go to state 384


state 304

    (277) jump_statement -> CONTINUE . ;
    ;               shift and go to state 450


state 305

    (278) jump_statement -> BREAK . ;
    ;               shift and go to state 451


state 306

    (279) jump_statement -> GOTO . ID ;
    ID              shift and go to state 452


state 307

    (267) labeled_statement -> ID . : pragmacomp_or_statement
    (368) identifier -> ID .
    :               shift and go to state 453
    MINUSMINUS      reduce using rule 368 (identifier -> ID .)
    PLUSPLUS        reduce using rule 368 (identifier -> ID .)
    ARROW           reduce using rule 368 (identifier -> ID .)
    .               reduce using rule 368 (identifier -> ID .)
    LPAREN          reduce using rule 368 (identifier -> ID .)
    LBRACKET        reduce using rule 368 (identifier -> ID .)
    OREQUAL         reduce using rule 368 (identifier -> ID .)
    ANDEQUAL        reduce using rule 368 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 368 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 368 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 368 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 368 (identifier -> ID .)
    MODEQUAL        reduce using rule 368 (identifier -> ID .)
    DIVEQUAL        reduce using rule 368 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 368 (identifier -> ID .)
    XOREQUAL        reduce using rule 368 (identifier -> ID .)
    EQUALS          reduce using rule 368 (identifier -> ID .)
    CONDOP          reduce using rule 368 (identifier -> ID .)
    LOR             reduce using rule 368 (identifier -> ID .)
    LAND            reduce using rule 368 (identifier -> ID .)
    XOR             reduce using rule 368 (identifier -> ID .)
    OR              reduce using rule 368 (identifier -> ID .)
    AND             reduce using rule 368 (identifier -> ID .)
    NE              reduce using rule 368 (identifier -> ID .)
    EQ              reduce using rule 368 (identifier -> ID .)
    GT              reduce using rule 368 (identifier -> ID .)
    GE              reduce using rule 368 (identifier -> ID .)
    LE              reduce using rule 368 (identifier -> ID .)
    LT              reduce using rule 368 (identifier -> ID .)
    LSHIFT          reduce using rule 368 (identifier -> ID .)
    RSHIFT          reduce using rule 368 (identifier -> ID .)
    MINUS           reduce using rule 368 (identifier -> ID .)
    PLUS            reduce using rule 368 (identifier -> ID .)
    MOD             reduce using rule 368 (identifier -> ID .)
    DIVIDE          reduce using rule 368 (identifier -> ID .)
    TIMES           reduce using rule 368 (identifier -> ID .)
    ,               reduce using rule 368 (identifier -> ID .)
    ;               reduce using rule 368 (identifier -> ID .)


state 308

    (271) iteration_statement -> FOR . LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> FOR . LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    LPAREN          shift and go to state 454


state 309

    (280) expression_statement -> expression_opt . ;
    ;               shift and go to state 455


state 310

    (273) iteration_statement -> DO . pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    pragmacomp_or_statement        shift and go to state 456
    expression                     shift and go to state 303
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 311

    (274) iteration_statement -> WHILE . LPAREN expression RPAREN pragmacomp_or_statement
    LPAREN          shift and go to state 460


state 312

    (268) selection_statement -> SWITCH . LPAREN expression RPAREN pragmacomp_or_statement
    LPAREN          shift and go to state 461


state 313

    (269) selection_statement -> IF . LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> IF . LPAREN expression RPAREN pragmacomp_or_statement
    LPAREN          shift and go to state 462


state 314

    (265) labeled_statement -> DEFAULT . : pragmacomp_or_statement
    :               shift and go to state 463


state 315

    (266) labeled_statement -> CASE . constant_expression : pragmacomp_or_statement
    (302) constant_expression -> . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 464
    conditional_expression         shift and go to state 126
    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 316

    (42) _3_declaration_items -> _3_declaration_items _3_declaration_item .
    ALIGNAS_        reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    ATOMIC_         reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    NORETURN_       reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    INLINE          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    THREAD_LOCAL_   reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    TYPEDEF         reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    EXTERN          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    STATIC          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    REGISTER        reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    AUTO            reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    VOLATILE        reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    RESTRICT        reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    CONST           reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    INT128          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    UNSIGNED        reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    SIGNED          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    COMPLEX_        reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    DOUBLE          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    FLOAT           reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    LONG            reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    INT             reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    SHORT           reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    CHAR            reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    BOOL_           reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    VOID            reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    ENUM            reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    TYPEID          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    UNION           reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    STRUCT          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)
    LBRACE          reduce using rule 42 (_3_declaration_items -> _3_declaration_items _3_declaration_item .)


state 317

    (102) id_init_declarator_list -> id_init_declarator_list , init_declarator .
    ,               reduce using rule 102 (id_init_declarator_list -> id_init_declarator_list , init_declarator .)
    ;               reduce using rule 102 (id_init_declarator_list -> id_init_declarator_list , init_declarator .)


state 318

    (107) _6_EQUALS_initializer_optional -> EQUALS initializer .
    ,               reduce using rule 107 (_6_EQUALS_initializer_optional -> EQUALS initializer .)
    ;               reduce using rule 107 (_6_EQUALS_initializer_optional -> EQUALS initializer .)


state 319

    (169) direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .
    LPAREN          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACKET        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ALIGNAS_        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ATOMIC_         reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    NORETURN_       reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INLINE          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    THREAD_LOCAL_   reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    RESTRICT        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INT128          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    COMPLEX_        reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    BOOL_           reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    UNION           reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ,               reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ;               reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    :               reduce using rule 169 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)


state 320

    (170) direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .
    LPAREN          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LBRACKET        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ALIGNAS_        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ATOMIC_         reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    NORETURN_       reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    THREAD_LOCAL_   reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INT128          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    COMPLEX_        reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    BOOL_           reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ,               reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ;               reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    :               reduce using rule 170 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)


state 321

    (202) parameter_type_list -> parameter_list , . ELLIPSIS
    ELLIPSIS        shift and go to state 465


state 322

    (215) identifier_list -> identifier _15_222c22_identifier_repeat .
    RPAREN          reduce using rule 215 (identifier_list -> identifier _15_222c22_identifier_repeat .)


state 323

    (216) _15_222c22_identifier_repeat -> _15_222c22_identifier_items .
    (218) _15_222c22_identifier_items -> _15_222c22_identifier_items . _15_222c22_identifier_item
    (220) _15_222c22_identifier_item -> . , identifier
    RPAREN          reduce using rule 216 (_15_222c22_identifier_repeat -> _15_222c22_identifier_items .)
    ,               shift and go to state 325

    _15_222c22_identifier_item     shift and go to state 466

state 324

    (219) _15_222c22_identifier_items -> _15_222c22_identifier_item .
    ,               reduce using rule 219 (_15_222c22_identifier_items -> _15_222c22_identifier_item .)
    RPAREN          reduce using rule 219 (_15_222c22_identifier_items -> _15_222c22_identifier_item .)


state 325

    (220) _15_222c22_identifier_item -> , . identifier
    (368) identifier -> . ID
    ID              shift and go to state 142

    identifier                     shift and go to state 467

state 326

    (206) parameter_list -> parameter_declaration _14_222c22_parameter_declaration_repeat .
    ,               reduce using rule 206 (parameter_list -> parameter_declaration _14_222c22_parameter_declaration_repeat .)
    RPAREN          reduce using rule 206 (parameter_list -> parameter_declaration _14_222c22_parameter_declaration_repeat .)


state 327

    (207) _14_222c22_parameter_declaration_repeat -> _14_222c22_parameter_declaration_items .
    (209) _14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_items . _14_222c22_parameter_declaration_item
    (211) _14_222c22_parameter_declaration_item -> . , parameter_declaration
  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 207 (_14_222c22_parameter_declaration_repeat -> _14_222c22_parameter_declaration_items .)
    ,               shift and go to state 329

    _14_222c22_parameter_declaration_item shift and go to state 468

state 328

    (210) _14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_item .
    ,               reduce using rule 210 (_14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_item .)
    RPAREN          reduce using rule 210 (_14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_item .)


state 329

    (211) _14_222c22_parameter_declaration_item -> , . parameter_declaration
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    parameter_declaration          shift and go to state 469
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 330

    (212) parameter_declaration -> declaration_specifiers abstract_declarator_opt .
    ,               reduce using rule 212 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 212 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 331

    (213) parameter_declaration -> declaration_specifiers typeid_noparen_declarator .
    ,               reduce using rule 213 (parameter_declaration -> declaration_specifiers typeid_noparen_declarator .)
    RPAREN          reduce using rule 213 (parameter_declaration -> declaration_specifiers typeid_noparen_declarator .)


state 332

    (214) parameter_declaration -> declaration_specifiers id_declarator .
    ,               reduce using rule 214 (parameter_declaration -> declaration_specifiers id_declarator .)
    RPAREN          reduce using rule 214 (parameter_declaration -> declaration_specifiers id_declarator .)


state 333

    (249) abstract_declarator_opt -> abstract_declarator .
    ,               reduce using rule 249 (abstract_declarator_opt -> abstract_declarator .)
    RPAREN          reduce using rule 249 (abstract_declarator_opt -> abstract_declarator .)


state 334

    (250) abstract_declarator_opt -> empty .
    ,               reduce using rule 250 (abstract_declarator_opt -> empty .)
    RPAREN          reduce using rule 250 (abstract_declarator_opt -> empty .)


state 335

    (167) typeid_noparen_declarator -> pointer . direct_typeid_noparen_declarator
    (163) id_declarator -> pointer . direct_id_declarator
    (247) abstract_declarator -> pointer . direct_abstract_declarator
    (248) abstract_declarator -> pointer .
    (185) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
    (186) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
    (187) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (188) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (189) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (190) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (191) direct_typeid_noparen_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    ,               reduce using rule 248 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 248 (abstract_declarator -> pointer .)
    TYPEID          shift and go to state 340
    LPAREN          shift and go to state 337
    ID              shift and go to state 34
    LBRACKET        shift and go to state 339

    direct_typeid_noparen_declarator shift and go to state 470
    direct_id_declarator           shift and go to state 107
    direct_abstract_declarator     shift and go to state 471

state 336

    (168) typeid_noparen_declarator -> direct_typeid_noparen_declarator .
    (185) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN identifier_list_opt RPAREN
    (186) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN parameter_type_list RPAREN
    (187) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (190) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    ,               reduce using rule 168 (typeid_noparen_declarator -> direct_typeid_noparen_declarator .)
    RPAREN          reduce using rule 168 (typeid_noparen_declarator -> direct_typeid_noparen_declarator .)
    LPAREN          shift and go to state 472
    LBRACKET        shift and go to state 473


state 337

    (175) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (251) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (257) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (204) parameter_type_list_opt -> . parameter_type_list
    (205) parameter_type_list_opt -> . empty
    (246) abstract_declarator -> . direct_abstract_declarator
    (247) abstract_declarator -> . pointer direct_abstract_declarator
    (248) abstract_declarator -> . pointer
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (202) parameter_type_list -> . parameter_list , ELLIPSIS
    (203) parameter_type_list -> . parameter_list
    (393) empty -> .
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (206) parameter_list -> . parameter_declaration _14_222c22_parameter_declaration_repeat
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 337
    ID              shift and go to state 34
    RPAREN          reduce using rule 393 (empty -> .)
    LBRACKET        shift and go to state 339
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    id_declarator                  shift and go to state 66
    parameter_type_list_opt        shift and go to state 474
    abstract_declarator            shift and go to state 475
    pointer                        shift and go to state 476
    direct_id_declarator           shift and go to state 27
    parameter_type_list            shift and go to state 477
    empty                          shift and go to state 478
    direct_abstract_declarator     shift and go to state 338
    parameter_list                 shift and go to state 195
    parameter_declaration          shift and go to state 197
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 338

    (246) abstract_declarator -> direct_abstract_declarator .
    (252) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN
    (254) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (256) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    ,               reduce using rule 246 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 246 (abstract_declarator -> direct_abstract_declarator .)
    LPAREN          shift and go to state 479
    LBRACKET        shift and go to state 480


state 339

    (253) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (255) direct_abstract_declarator -> LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
  ! shift/reduce conflict for TIMES resolved as shift
    TIMES           shift and go to state 481
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    RBRACKET        reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 482
    type_qualifier_list            shift and go to state 112
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 340

    (191) direct_typeid_noparen_declarator -> TYPEID .
    LPAREN          reduce using rule 191 (direct_typeid_noparen_declarator -> TYPEID .)
    LBRACKET        reduce using rule 191 (direct_typeid_noparen_declarator -> TYPEID .)
    ,               reduce using rule 191 (direct_typeid_noparen_declarator -> TYPEID .)
    RPAREN          reduce using rule 191 (direct_typeid_noparen_declarator -> TYPEID .)


state 341

    (171) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (337) unary_operator -> TIMES .
    RBRACKET        shift and go to state 483
    LPAREN          reduce using rule 337 (unary_operator -> TIMES .)
    ALIGNOF_        reduce using rule 337 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 337 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 337 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 337 (unary_operator -> TIMES .)
    LNOT            reduce using rule 337 (unary_operator -> TIMES .)
    NOT             reduce using rule 337 (unary_operator -> TIMES .)
    MINUS           reduce using rule 337 (unary_operator -> TIMES .)
    PLUS            reduce using rule 337 (unary_operator -> TIMES .)
    TIMES           reduce using rule 337 (unary_operator -> TIMES .)
    AND             reduce using rule 337 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 337 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 337 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 337 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 337 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 337 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 337 (unary_operator -> TIMES .)
    ID              reduce using rule 337 (unary_operator -> TIMES .)


state 342

    (174) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET
    RBRACKET        shift and go to state 484


state 343

    (289) assignment_expression_opt -> assignment_expression .
    RBRACKET        reduce using rule 289 (assignment_expression_opt -> assignment_expression .)


state 344

    (290) assignment_expression_opt -> empty .
    RBRACKET        reduce using rule 290 (assignment_expression_opt -> empty .)


state 345

    (172) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 485
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 346

    (173) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 486
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 347

    (197) _13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .
    ATOMIC_         reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    VOLATILE        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    RESTRICT        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    CONST           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    TIMES           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    LPAREN          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    ID              reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    TYPEID          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    LBRACKET        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    ,               reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    RPAREN          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    STATIC          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    ALIGNOF_        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    SIZEOF          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    MINUSMINUS      reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    PLUSPLUS        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    LNOT            reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    NOT             reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    MINUS           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    PLUS            reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    AND             reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    OFFSETOF        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    U32STRING_LITERAL reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    U16STRING_LITERAL reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    U8STRING_LITERAL reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    WSTRING_LITERAL reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    STRING_LITERAL  reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    U32CHAR_CONST   reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    U16CHAR_CONST   reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    U8CHAR_CONST    reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    WCHAR_CONST     reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    CHAR_CONST      reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    HEX_FLOAT_CONST reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    FLOAT_CONST     reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT_CONST_CHAR  reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT_CONST_BIN   reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT_CONST_HEX   reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT_CONST_OCT   reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT_CONST_DEC   reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    RBRACKET        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT128          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    UNSIGNED        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    SIGNED          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    COMPLEX_        reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    DOUBLE          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    FLOAT           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    LONG            reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    INT             reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    SHORT           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    CHAR            reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    BOOL_           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    VOID            reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    ENUM            reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    UNION           reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)
    STRUCT          reduce using rule 197 (_13_type_qualifier_items -> _13_type_qualifier_items _13_type_qualifier_item .)


state 348

    (156) alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .
    ALIGNAS_        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    ATOMIC_         reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    NORETURN_       reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    INLINE          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    THREAD_LOCAL_   reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    TYPEDEF         reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    RESTRICT        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    INT128          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    COMPLEX_        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    INT             reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    BOOL_           reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    TYPEID          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    ID              reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    ;               reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    LBRACKET        reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    :               reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)
    ,               reduce using rule 156 (alignment_specifier -> ALIGNAS_ LPAREN constant_expression RPAREN .)


state 349

    (157) alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .
    ALIGNAS_        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    ATOMIC_         reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    NORETURN_       reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    INLINE          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    THREAD_LOCAL_   reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    TYPEDEF         reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    STATIC          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    AUTO            reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    CONST           reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    INT128          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    COMPLEX_        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    LONG            reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    INT             reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    SHORT           reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    CHAR            reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    BOOL_           reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    VOID            reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    ENUM            reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    UNION           reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    TIMES           reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    ID              reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    ;               reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    :               reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)
    ,               reduce using rule 157 (alignment_specifier -> ALIGNAS_ LPAREN type_name RPAREN .)


state 350

    (245) type_name -> specifier_qualifier_list abstract_declarator_opt .
    RPAREN          reduce using rule 245 (type_name -> specifier_qualifier_list abstract_declarator_opt .)
    ,               reduce using rule 245 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 351

    (109) specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .
    ALIGNAS_        reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    ATOMIC_         reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    VOLATILE        reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    RESTRICT        reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    CONST           reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    INT128          reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    UNSIGNED        reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    SIGNED          reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    COMPLEX_        reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    DOUBLE          reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    FLOAT           reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    LONG            reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    INT             reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    SHORT           reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    CHAR            reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    BOOL_           reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    VOID            reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    LPAREN          reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    LBRACKET        reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    TIMES           reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    RPAREN          reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    :               reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    TYPEID          reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    ID              reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    ;               reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    ,               reduce using rule 109 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)


state 352

    (113) specifier_qualifier_list -> specifier_qualifier_list type_qualifier .
    ALIGNAS_        reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ATOMIC_         reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CONST           reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    INT128          reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    COMPLEX_        reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LONG            reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    INT             reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SHORT           reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CHAR            reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    BOOL_           reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    VOID            reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TIMES           reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    :               reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ID              reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ;               reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ,               reduce using rule 113 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)


state 353

    (114) specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .
    ALIGNAS_        reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    ATOMIC_         reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    VOLATILE        reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    RESTRICT        reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    CONST           reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    INT128          reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SIGNED          reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    COMPLEX_        reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    DOUBLE          reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    FLOAT           reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LONG            reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    INT             reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SHORT           reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    CHAR            reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    BOOL_           reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    VOID            reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LPAREN          reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LBRACKET        reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    TIMES           reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    RPAREN          reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    :               reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    TYPEID          reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    ID              reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    ;               reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    ,               reduce using rule 114 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)


state 354

    (251) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (257) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (204) parameter_type_list_opt -> . parameter_type_list
    (205) parameter_type_list_opt -> . empty
    (246) abstract_declarator -> . direct_abstract_declarator
    (247) abstract_declarator -> . pointer direct_abstract_declarator
    (248) abstract_declarator -> . pointer
    (202) parameter_type_list -> . parameter_list , ELLIPSIS
    (203) parameter_type_list -> . parameter_list
    (393) empty -> .
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (206) parameter_list -> . parameter_declaration _14_222c22_parameter_declaration_repeat
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RPAREN          reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 354
    LBRACKET        shift and go to state 339
    TIMES           shift and go to state 32
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    parameter_type_list_opt        shift and go to state 474
    abstract_declarator            shift and go to state 475
    parameter_type_list            shift and go to state 477
    empty                          shift and go to state 478
    direct_abstract_declarator     shift and go to state 338
    pointer                        shift and go to state 355
    parameter_list                 shift and go to state 195
    parameter_declaration          shift and go to state 197
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 355

    (247) abstract_declarator -> pointer . direct_abstract_declarator
    (248) abstract_declarator -> pointer .
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    RPAREN          reduce using rule 248 (abstract_declarator -> pointer .)
    ,               reduce using rule 248 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 354
    LBRACKET        shift and go to state 339

    direct_abstract_declarator     shift and go to state 471

state 356

    (111) specifier_qualifier_list -> type_qualifier_list type_specifier .
    ALIGNAS_        reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ATOMIC_         reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    VOLATILE        reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    RESTRICT        reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CONST           reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    INT128          reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    UNSIGNED        reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SIGNED          reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    COMPLEX_        reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    DOUBLE          reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    FLOAT           reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LONG            reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    INT             reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SHORT           reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CHAR            reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    BOOL_           reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    VOID            reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LPAREN          reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LBRACKET        reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TIMES           reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    RPAREN          reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    :               reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TYPEID          reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ID              reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ;               reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ,               reduce using rule 111 (specifier_qualifier_list -> type_qualifier_list type_specifier .)


state 357

    (86) atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .
    ALIGNAS_        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    ATOMIC_         reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    NORETURN_       reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    INLINE          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    THREAD_LOCAL_   reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    TYPEDEF         reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    STATIC          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    AUTO            reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    CONST           reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    INT128          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    COMPLEX_        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    LONG            reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    INT             reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    SHORT           reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    CHAR            reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    BOOL_           reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    VOID            reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    ENUM            reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    UNION           reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    TIMES           reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    ID              reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    ;               reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    ,               reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)
    :               reduce using rule 86 (atomic_specifier -> ATOMIC_ LPAREN type_name RPAREN .)


state 358

    (115) struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 487

state 359

    (116) _7_struct_declaration_list_optional -> struct_declaration_list .
    RBRACE          reduce using rule 116 (_7_struct_declaration_list_optional -> struct_declaration_list .)


state 360

    (121) struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .
    ALIGNAS_        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    INT128          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    UNSIGNED        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    SIGNED          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    COMPLEX_        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    DOUBLE          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    FLOAT           reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    LONG            reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    INT             reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    SHORT           reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    CHAR            reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    BOOL_           reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    VOID            reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    NORETURN_       reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    INLINE          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    THREAD_LOCAL_   reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    TYPEDEF         reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    EXTERN          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    STATIC          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    REGISTER        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    AUTO            reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    ATOMIC_         reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    VOLATILE        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    RESTRICT        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    CONST           reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    TIMES           reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    LPAREN          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    ID              reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    TYPEID          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    ;               reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    LBRACKET        reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    ,               reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    RPAREN          reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)
    :               reduce using rule 121 (struct_or_union_specifier -> struct_or_union brace_open _9_struct_declaration_list_optional brace_close .)


state 361

    (392) brace_close -> RBRACE .
    ALIGNAS_        reduce using rule 392 (brace_close -> RBRACE .)
    INT128          reduce using rule 392 (brace_close -> RBRACE .)
    UNSIGNED        reduce using rule 392 (brace_close -> RBRACE .)
    SIGNED          reduce using rule 392 (brace_close -> RBRACE .)
    COMPLEX_        reduce using rule 392 (brace_close -> RBRACE .)
    DOUBLE          reduce using rule 392 (brace_close -> RBRACE .)
    FLOAT           reduce using rule 392 (brace_close -> RBRACE .)
    LONG            reduce using rule 392 (brace_close -> RBRACE .)
    INT             reduce using rule 392 (brace_close -> RBRACE .)
    SHORT           reduce using rule 392 (brace_close -> RBRACE .)
    CHAR            reduce using rule 392 (brace_close -> RBRACE .)
    BOOL_           reduce using rule 392 (brace_close -> RBRACE .)
    VOID            reduce using rule 392 (brace_close -> RBRACE .)
    NORETURN_       reduce using rule 392 (brace_close -> RBRACE .)
    INLINE          reduce using rule 392 (brace_close -> RBRACE .)
    THREAD_LOCAL_   reduce using rule 392 (brace_close -> RBRACE .)
    TYPEDEF         reduce using rule 392 (brace_close -> RBRACE .)
    EXTERN          reduce using rule 392 (brace_close -> RBRACE .)
    STATIC          reduce using rule 392 (brace_close -> RBRACE .)
    REGISTER        reduce using rule 392 (brace_close -> RBRACE .)
    AUTO            reduce using rule 392 (brace_close -> RBRACE .)
    ATOMIC_         reduce using rule 392 (brace_close -> RBRACE .)
    VOLATILE        reduce using rule 392 (brace_close -> RBRACE .)
    RESTRICT        reduce using rule 392 (brace_close -> RBRACE .)
    CONST           reduce using rule 392 (brace_close -> RBRACE .)
    TIMES           reduce using rule 392 (brace_close -> RBRACE .)
    LPAREN          reduce using rule 392 (brace_close -> RBRACE .)
    ID              reduce using rule 392 (brace_close -> RBRACE .)
    TYPEID          reduce using rule 392 (brace_close -> RBRACE .)
    ;               reduce using rule 392 (brace_close -> RBRACE .)
    LBRACKET        reduce using rule 392 (brace_close -> RBRACE .)
    ,               reduce using rule 392 (brace_close -> RBRACE .)
    RPAREN          reduce using rule 392 (brace_close -> RBRACE .)
    :               reduce using rule 392 (brace_close -> RBRACE .)
    STATIC_ASSERT_  reduce using rule 392 (brace_close -> RBRACE .)
    PRAGMA_         reduce using rule 392 (brace_close -> RBRACE .)
    PPPRAGMA        reduce using rule 392 (brace_close -> RBRACE .)
    PPHASH          reduce using rule 392 (brace_close -> RBRACE .)
    ENUM            reduce using rule 392 (brace_close -> RBRACE .)
    UNION           reduce using rule 392 (brace_close -> RBRACE .)
    STRUCT          reduce using rule 392 (brace_close -> RBRACE .)
    $end            reduce using rule 392 (brace_close -> RBRACE .)
    RETURN          reduce using rule 392 (brace_close -> RBRACE .)
    CONTINUE        reduce using rule 392 (brace_close -> RBRACE .)
    BREAK           reduce using rule 392 (brace_close -> RBRACE .)
    GOTO            reduce using rule 392 (brace_close -> RBRACE .)
    FOR             reduce using rule 392 (brace_close -> RBRACE .)
    DO              reduce using rule 392 (brace_close -> RBRACE .)
    WHILE           reduce using rule 392 (brace_close -> RBRACE .)
    SWITCH          reduce using rule 392 (brace_close -> RBRACE .)
    IF              reduce using rule 392 (brace_close -> RBRACE .)
    DEFAULT         reduce using rule 392 (brace_close -> RBRACE .)
    CASE            reduce using rule 392 (brace_close -> RBRACE .)
    LBRACE          reduce using rule 392 (brace_close -> RBRACE .)
    ALIGNOF_        reduce using rule 392 (brace_close -> RBRACE .)
    SIZEOF          reduce using rule 392 (brace_close -> RBRACE .)
    MINUSMINUS      reduce using rule 392 (brace_close -> RBRACE .)
    PLUSPLUS        reduce using rule 392 (brace_close -> RBRACE .)
    LNOT            reduce using rule 392 (brace_close -> RBRACE .)
    NOT             reduce using rule 392 (brace_close -> RBRACE .)
    MINUS           reduce using rule 392 (brace_close -> RBRACE .)
    PLUS            reduce using rule 392 (brace_close -> RBRACE .)
    AND             reduce using rule 392 (brace_close -> RBRACE .)
    OFFSETOF        reduce using rule 392 (brace_close -> RBRACE .)
    U32STRING_LITERAL reduce using rule 392 (brace_close -> RBRACE .)
    U16STRING_LITERAL reduce using rule 392 (brace_close -> RBRACE .)
    U8STRING_LITERAL reduce using rule 392 (brace_close -> RBRACE .)
    WSTRING_LITERAL reduce using rule 392 (brace_close -> RBRACE .)
    STRING_LITERAL  reduce using rule 392 (brace_close -> RBRACE .)
    U32CHAR_CONST   reduce using rule 392 (brace_close -> RBRACE .)
    U16CHAR_CONST   reduce using rule 392 (brace_close -> RBRACE .)
    U8CHAR_CONST    reduce using rule 392 (brace_close -> RBRACE .)
    WCHAR_CONST     reduce using rule 392 (brace_close -> RBRACE .)
    CHAR_CONST      reduce using rule 392 (brace_close -> RBRACE .)
    HEX_FLOAT_CONST reduce using rule 392 (brace_close -> RBRACE .)
    FLOAT_CONST     reduce using rule 392 (brace_close -> RBRACE .)
    INT_CONST_CHAR  reduce using rule 392 (brace_close -> RBRACE .)
    INT_CONST_BIN   reduce using rule 392 (brace_close -> RBRACE .)
    INT_CONST_HEX   reduce using rule 392 (brace_close -> RBRACE .)
    INT_CONST_OCT   reduce using rule 392 (brace_close -> RBRACE .)
    INT_CONST_DEC   reduce using rule 392 (brace_close -> RBRACE .)
    RBRACE          reduce using rule 392 (brace_close -> RBRACE .)
    ELSE            reduce using rule 392 (brace_close -> RBRACE .)
    ARROW           reduce using rule 392 (brace_close -> RBRACE .)
    .               reduce using rule 392 (brace_close -> RBRACE .)
    CONDOP          reduce using rule 392 (brace_close -> RBRACE .)
    LOR             reduce using rule 392 (brace_close -> RBRACE .)
    LAND            reduce using rule 392 (brace_close -> RBRACE .)
    XOR             reduce using rule 392 (brace_close -> RBRACE .)
    OR              reduce using rule 392 (brace_close -> RBRACE .)
    NE              reduce using rule 392 (brace_close -> RBRACE .)
    EQ              reduce using rule 392 (brace_close -> RBRACE .)
    GT              reduce using rule 392 (brace_close -> RBRACE .)
    GE              reduce using rule 392 (brace_close -> RBRACE .)
    LE              reduce using rule 392 (brace_close -> RBRACE .)
    LT              reduce using rule 392 (brace_close -> RBRACE .)
    LSHIFT          reduce using rule 392 (brace_close -> RBRACE .)
    RSHIFT          reduce using rule 392 (brace_close -> RBRACE .)
    MOD             reduce using rule 392 (brace_close -> RBRACE .)
    DIVIDE          reduce using rule 392 (brace_close -> RBRACE .)
    OREQUAL         reduce using rule 392 (brace_close -> RBRACE .)
    ANDEQUAL        reduce using rule 392 (brace_close -> RBRACE .)
    RSHIFTEQUAL     reduce using rule 392 (brace_close -> RBRACE .)
    LSHIFTEQUAL     reduce using rule 392 (brace_close -> RBRACE .)
    MINUSEQUAL      reduce using rule 392 (brace_close -> RBRACE .)
    PLUSEQUAL       reduce using rule 392 (brace_close -> RBRACE .)
    MODEQUAL        reduce using rule 392 (brace_close -> RBRACE .)
    DIVEQUAL        reduce using rule 392 (brace_close -> RBRACE .)
    TIMESEQUAL      reduce using rule 392 (brace_close -> RBRACE .)
    XOREQUAL        reduce using rule 392 (brace_close -> RBRACE .)
    EQUALS          reduce using rule 392 (brace_close -> RBRACE .)
    RBRACKET        reduce using rule 392 (brace_close -> RBRACE .)


state 362

    (133) _10_struct_declaration_item -> struct_declaration .
    ;               reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    PRAGMA_         reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    PPPRAGMA        reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    ALIGNAS_        reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    ATOMIC_         reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    VOLATILE        reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    RESTRICT        reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    CONST           reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    INT128          reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    UNSIGNED        reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    SIGNED          reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    COMPLEX_        reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    DOUBLE          reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    FLOAT           reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    LONG            reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    INT             reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    SHORT           reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    CHAR            reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    BOOL_           reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    VOID            reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    ENUM            reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    TYPEID          reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    UNION           reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    STRUCT          reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)
    RBRACE          reduce using rule 133 (_10_struct_declaration_item -> struct_declaration .)


state 363

    (128) struct_declaration_list -> struct_declaration _10_struct_declaration_repeat .
    RBRACE          reduce using rule 128 (struct_declaration_list -> struct_declaration _10_struct_declaration_repeat .)


state 364

    (129) _10_struct_declaration_repeat -> _10_struct_declaration_items .
    (131) _10_struct_declaration_items -> _10_struct_declaration_items . _10_struct_declaration_item
    (133) _10_struct_declaration_item -> . struct_declaration
    (134) struct_declaration -> . pppragma_directive
    (135) struct_declaration -> . ;
    (136) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt ;
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (109) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (110) specifier_qualifier_list -> . alignment_specifier
    (111) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (114) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RBRACE          reduce using rule 129 (_10_struct_declaration_repeat -> _10_struct_declaration_items .)
    ;               shift and go to state 221
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 214
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    _10_struct_declaration_item    shift and go to state 488
    struct_declaration             shift and go to state 362
    pppragma_directive             shift and go to state 220
    specifier_qualifier_list       shift and go to state 222
    alignment_specifier            shift and go to state 211
    type_qualifier_list            shift and go to state 212
    type_specifier                 shift and go to state 213
    type_qualifier                 shift and go to state 114
    type_specifier_no_typeid       shift and go to state 22
    atomic_specifier               shift and go to state 96
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 365

    (132) _10_struct_declaration_items -> _10_struct_declaration_item .
    ;               reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    PRAGMA_         reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    PPPRAGMA        reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    ALIGNAS_        reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    ATOMIC_         reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    VOLATILE        reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    RESTRICT        reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    CONST           reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    INT128          reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    UNSIGNED        reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    SIGNED          reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    COMPLEX_        reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    DOUBLE          reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    FLOAT           reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    LONG            reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    INT             reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    SHORT           reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    CHAR            reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    BOOL_           reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    VOID            reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    ENUM            reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    TYPEID          reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    UNION           reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    STRUCT          reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)
    RBRACE          reduce using rule 132 (_10_struct_declaration_items -> _10_struct_declaration_item .)


state 366

    (136) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt . ;
    ;               shift and go to state 489


state 367

    (143) struct_declarator_list_opt -> struct_declarator_list .
    ;               reduce using rule 143 (struct_declarator_list_opt -> struct_declarator_list .)


state 368

    (144) struct_declarator_list_opt -> empty .
    ;               reduce using rule 144 (struct_declarator_list_opt -> empty .)


state 369

    (137) struct_declarator_list -> struct_declarator . _11_222c22_struct_declarator_repeat
    (138) _11_222c22_struct_declarator_repeat -> . _11_222c22_struct_declarator_items
    (139) _11_222c22_struct_declarator_repeat -> .
    (140) _11_222c22_struct_declarator_items -> . _11_222c22_struct_declarator_items _11_222c22_struct_declarator_item
    (141) _11_222c22_struct_declarator_items -> . _11_222c22_struct_declarator_item
    (142) _11_222c22_struct_declarator_item -> . , struct_declarator
    ;               reduce using rule 139 (_11_222c22_struct_declarator_repeat -> .)
    ,               shift and go to state 493

    _11_222c22_struct_declarator_repeat shift and go to state 490
    _11_222c22_struct_declarator_items shift and go to state 491
    _11_222c22_struct_declarator_item shift and go to state 492

state 370

    (145) struct_declarator -> : . constant_expression
    (302) constant_expression -> . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 494
    conditional_expression         shift and go to state 126
    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 371

    (146) struct_declarator -> declarator . : constant_expression
    (147) struct_declarator -> declarator .
    :               shift and go to state 495
    ,               reduce using rule 147 (struct_declarator -> declarator .)
    ;               reduce using rule 147 (struct_declarator -> declarator .)


state 372

    (118) struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 496

state 373

    (119) _8_struct_declaration_list_optional -> struct_declaration_list .
    RBRACE          reduce using rule 119 (_8_struct_declaration_list_optional -> struct_declaration_list .)


state 374

    (148) enum_specifier -> ENUM TYPEID brace_open enumerator_list . brace_close
    (153) enumerator_list -> enumerator_list . , enumerator
    (154) enumerator_list -> enumerator_list . ,
    (392) brace_close -> . RBRACE
    ,               shift and go to state 376
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 497

state 375

    (150) enum_specifier -> ENUM brace_open enumerator_list brace_close .
    ALIGNAS_        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT128          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COMPLEX_        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LONG            reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT             reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    BOOL_           reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOID            reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    NORETURN_       reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    THREAD_LOCAL_   reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ATOMIC_         reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CONST           reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ID              reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ;               reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ,               reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    :               reduce using rule 150 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)


state 376

    (153) enumerator_list -> enumerator_list , . enumerator
    (154) enumerator_list -> enumerator_list , .
    (158) enumerator -> . ID _12_EQUALS_constant_expression_optional
    ,               reduce using rule 154 (enumerator_list -> enumerator_list , .)
    RBRACE          reduce using rule 154 (enumerator_list -> enumerator_list , .)
    ID              shift and go to state 227

    enumerator                     shift and go to state 498

state 377

    (158) enumerator -> ID _12_EQUALS_constant_expression_optional .
    ,               reduce using rule 158 (enumerator -> ID _12_EQUALS_constant_expression_optional .)
    RBRACE          reduce using rule 158 (enumerator -> ID _12_EQUALS_constant_expression_optional .)


state 378

    (159) _12_EQUALS_constant_expression_optional -> EQUALS . constant_expression
    (302) constant_expression -> . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 499
    conditional_expression         shift and go to state 126
    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 379

    (149) enum_specifier -> ENUM ID brace_open enumerator_list . brace_close
    (153) enumerator_list -> enumerator_list . , enumerator
    (154) enumerator_list -> enumerator_list . ,
    (392) brace_close -> . RBRACE
    ,               shift and go to state 376
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 500

state 380

    (288) assignment_expression -> LPAREN compound_statement . RPAREN
    RPAREN          shift and go to state 501


state 381

    (339) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (324) cast_expression -> LPAREN type_name . RPAREN cast_expression
    RPAREN          shift and go to state 502


state 382

    (324) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (339) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list _18_222c22_optional brace_close
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (391) brace_open -> . LBRACE
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    LBRACE          shift and go to state 120
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    cast_expression                shift and go to state 503
    brace_open                     shift and go to state 504
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 383

    (354) primary_expression -> LPAREN expression RPAREN .
    MINUSMINUS      reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    .               reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    ,               reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    ;               reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    :               reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 354 (primary_expression -> LPAREN expression RPAREN .)


state 384

    (281) expression -> expression , . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 505
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 385

    (286) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    unary_expression               shift and go to state 233
    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 386

    (291) assignment_operator -> OREQUAL .
    LPAREN          reduce using rule 291 (assignment_operator -> OREQUAL .)
    ALIGNOF_        reduce using rule 291 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 291 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 291 (assignment_operator -> OREQUAL .)
    PLUSPLUS        reduce using rule 291 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 291 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 291 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 291 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 291 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 291 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 291 (assignment_operator -> OREQUAL .)
    OFFSETOF        reduce using rule 291 (assignment_operator -> OREQUAL .)
    U32STRING_LITERAL reduce using rule 291 (assignment_operator -> OREQUAL .)
    U16STRING_LITERAL reduce using rule 291 (assignment_operator -> OREQUAL .)
    U8STRING_LITERAL reduce using rule 291 (assignment_operator -> OREQUAL .)
    WSTRING_LITERAL reduce using rule 291 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 291 (assignment_operator -> OREQUAL .)
    U32CHAR_CONST   reduce using rule 291 (assignment_operator -> OREQUAL .)
    U16CHAR_CONST   reduce using rule 291 (assignment_operator -> OREQUAL .)
    U8CHAR_CONST    reduce using rule 291 (assignment_operator -> OREQUAL .)
    WCHAR_CONST     reduce using rule 291 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 291 (assignment_operator -> OREQUAL .)
    HEX_FLOAT_CONST reduce using rule 291 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 291 (assignment_operator -> OREQUAL .)
    INT_CONST_CHAR  reduce using rule 291 (assignment_operator -> OREQUAL .)
    INT_CONST_BIN   reduce using rule 291 (assignment_operator -> OREQUAL .)
    INT_CONST_HEX   reduce using rule 291 (assignment_operator -> OREQUAL .)
    INT_CONST_OCT   reduce using rule 291 (assignment_operator -> OREQUAL .)
    INT_CONST_DEC   reduce using rule 291 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 291 (assignment_operator -> OREQUAL .)


state 387

    (292) assignment_operator -> ANDEQUAL .
    LPAREN          reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    ALIGNOF_        reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    PLUSPLUS        reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    OFFSETOF        reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    U32STRING_LITERAL reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    U16STRING_LITERAL reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    U8STRING_LITERAL reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    WSTRING_LITERAL reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    U32CHAR_CONST   reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    U16CHAR_CONST   reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    U8CHAR_CONST    reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    WCHAR_CONST     reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    HEX_FLOAT_CONST reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    INT_CONST_CHAR  reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    INT_CONST_BIN   reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    INT_CONST_HEX   reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    INT_CONST_OCT   reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    INT_CONST_DEC   reduce using rule 292 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 292 (assignment_operator -> ANDEQUAL .)


state 388

    (293) assignment_operator -> RSHIFTEQUAL .
    LPAREN          reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    ALIGNOF_        reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    PLUSPLUS        reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    OFFSETOF        reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    U32STRING_LITERAL reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    U16STRING_LITERAL reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    U8STRING_LITERAL reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    U32CHAR_CONST   reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    U16CHAR_CONST   reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    U8CHAR_CONST    reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_CHAR  reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 293 (assignment_operator -> RSHIFTEQUAL .)


state 389

    (294) assignment_operator -> LSHIFTEQUAL .
    LPAREN          reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    ALIGNOF_        reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    PLUSPLUS        reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    OFFSETOF        reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    U32STRING_LITERAL reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    U16STRING_LITERAL reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    U8STRING_LITERAL reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    U32CHAR_CONST   reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    U16CHAR_CONST   reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    U8CHAR_CONST    reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_CHAR  reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 294 (assignment_operator -> LSHIFTEQUAL .)


state 390

    (295) assignment_operator -> MINUSEQUAL .
    LPAREN          reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    ALIGNOF_        reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    PLUSPLUS        reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    OFFSETOF        reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    U32STRING_LITERAL reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    U16STRING_LITERAL reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    U8STRING_LITERAL reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    WSTRING_LITERAL reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    U32CHAR_CONST   reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    U16CHAR_CONST   reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    U8CHAR_CONST    reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    WCHAR_CONST     reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_CHAR  reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_BIN   reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_HEX   reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_OCT   reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_DEC   reduce using rule 295 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 295 (assignment_operator -> MINUSEQUAL .)


state 391

    (296) assignment_operator -> PLUSEQUAL .
    LPAREN          reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    ALIGNOF_        reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    PLUSPLUS        reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    OFFSETOF        reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    U32STRING_LITERAL reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    U16STRING_LITERAL reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    U8STRING_LITERAL reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    WSTRING_LITERAL reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    U32CHAR_CONST   reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    U16CHAR_CONST   reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    U8CHAR_CONST    reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    WCHAR_CONST     reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_CHAR  reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_BIN   reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_HEX   reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_OCT   reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_DEC   reduce using rule 296 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 296 (assignment_operator -> PLUSEQUAL .)


state 392

    (297) assignment_operator -> MODEQUAL .
    LPAREN          reduce using rule 297 (assignment_operator -> MODEQUAL .)
    ALIGNOF_        reduce using rule 297 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 297 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 297 (assignment_operator -> MODEQUAL .)
    PLUSPLUS        reduce using rule 297 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 297 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 297 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 297 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 297 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 297 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 297 (assignment_operator -> MODEQUAL .)
    OFFSETOF        reduce using rule 297 (assignment_operator -> MODEQUAL .)
    U32STRING_LITERAL reduce using rule 297 (assignment_operator -> MODEQUAL .)
    U16STRING_LITERAL reduce using rule 297 (assignment_operator -> MODEQUAL .)
    U8STRING_LITERAL reduce using rule 297 (assignment_operator -> MODEQUAL .)
    WSTRING_LITERAL reduce using rule 297 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 297 (assignment_operator -> MODEQUAL .)
    U32CHAR_CONST   reduce using rule 297 (assignment_operator -> MODEQUAL .)
    U16CHAR_CONST   reduce using rule 297 (assignment_operator -> MODEQUAL .)
    U8CHAR_CONST    reduce using rule 297 (assignment_operator -> MODEQUAL .)
    WCHAR_CONST     reduce using rule 297 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 297 (assignment_operator -> MODEQUAL .)
    HEX_FLOAT_CONST reduce using rule 297 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 297 (assignment_operator -> MODEQUAL .)
    INT_CONST_CHAR  reduce using rule 297 (assignment_operator -> MODEQUAL .)
    INT_CONST_BIN   reduce using rule 297 (assignment_operator -> MODEQUAL .)
    INT_CONST_HEX   reduce using rule 297 (assignment_operator -> MODEQUAL .)
    INT_CONST_OCT   reduce using rule 297 (assignment_operator -> MODEQUAL .)
    INT_CONST_DEC   reduce using rule 297 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 297 (assignment_operator -> MODEQUAL .)


state 393

    (298) assignment_operator -> DIVEQUAL .
    LPAREN          reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    ALIGNOF_        reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    PLUSPLUS        reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    OFFSETOF        reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    U32STRING_LITERAL reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    U16STRING_LITERAL reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    U8STRING_LITERAL reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    WSTRING_LITERAL reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    U32CHAR_CONST   reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    U16CHAR_CONST   reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    U8CHAR_CONST    reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    WCHAR_CONST     reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    HEX_FLOAT_CONST reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    INT_CONST_CHAR  reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    INT_CONST_BIN   reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    INT_CONST_HEX   reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    INT_CONST_OCT   reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    INT_CONST_DEC   reduce using rule 298 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 298 (assignment_operator -> DIVEQUAL .)


state 394

    (299) assignment_operator -> TIMESEQUAL .
    LPAREN          reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    ALIGNOF_        reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    PLUSPLUS        reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    OFFSETOF        reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    U32STRING_LITERAL reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    U16STRING_LITERAL reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    U8STRING_LITERAL reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    WSTRING_LITERAL reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    U32CHAR_CONST   reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    U16CHAR_CONST   reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    U8CHAR_CONST    reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    WCHAR_CONST     reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    HEX_FLOAT_CONST reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_CHAR  reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_BIN   reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_HEX   reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_OCT   reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_DEC   reduce using rule 299 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 299 (assignment_operator -> TIMESEQUAL .)


state 395

    (300) assignment_operator -> XOREQUAL .
    LPAREN          reduce using rule 300 (assignment_operator -> XOREQUAL .)
    ALIGNOF_        reduce using rule 300 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 300 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 300 (assignment_operator -> XOREQUAL .)
    PLUSPLUS        reduce using rule 300 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 300 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 300 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 300 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 300 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 300 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 300 (assignment_operator -> XOREQUAL .)
    OFFSETOF        reduce using rule 300 (assignment_operator -> XOREQUAL .)
    U32STRING_LITERAL reduce using rule 300 (assignment_operator -> XOREQUAL .)
    U16STRING_LITERAL reduce using rule 300 (assignment_operator -> XOREQUAL .)
    U8STRING_LITERAL reduce using rule 300 (assignment_operator -> XOREQUAL .)
    WSTRING_LITERAL reduce using rule 300 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 300 (assignment_operator -> XOREQUAL .)
    U32CHAR_CONST   reduce using rule 300 (assignment_operator -> XOREQUAL .)
    U16CHAR_CONST   reduce using rule 300 (assignment_operator -> XOREQUAL .)
    U8CHAR_CONST    reduce using rule 300 (assignment_operator -> XOREQUAL .)
    WCHAR_CONST     reduce using rule 300 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 300 (assignment_operator -> XOREQUAL .)
    HEX_FLOAT_CONST reduce using rule 300 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 300 (assignment_operator -> XOREQUAL .)
    INT_CONST_CHAR  reduce using rule 300 (assignment_operator -> XOREQUAL .)
    INT_CONST_BIN   reduce using rule 300 (assignment_operator -> XOREQUAL .)
    INT_CONST_HEX   reduce using rule 300 (assignment_operator -> XOREQUAL .)
    INT_CONST_OCT   reduce using rule 300 (assignment_operator -> XOREQUAL .)
    INT_CONST_DEC   reduce using rule 300 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 300 (assignment_operator -> XOREQUAL .)


state 396

    (301) assignment_operator -> EQUALS .
    LPAREN          reduce using rule 301 (assignment_operator -> EQUALS .)
    ALIGNOF_        reduce using rule 301 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 301 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 301 (assignment_operator -> EQUALS .)
    PLUSPLUS        reduce using rule 301 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 301 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 301 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 301 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 301 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 301 (assignment_operator -> EQUALS .)
    AND             reduce using rule 301 (assignment_operator -> EQUALS .)
    OFFSETOF        reduce using rule 301 (assignment_operator -> EQUALS .)
    U32STRING_LITERAL reduce using rule 301 (assignment_operator -> EQUALS .)
    U16STRING_LITERAL reduce using rule 301 (assignment_operator -> EQUALS .)
    U8STRING_LITERAL reduce using rule 301 (assignment_operator -> EQUALS .)
    WSTRING_LITERAL reduce using rule 301 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 301 (assignment_operator -> EQUALS .)
    U32CHAR_CONST   reduce using rule 301 (assignment_operator -> EQUALS .)
    U16CHAR_CONST   reduce using rule 301 (assignment_operator -> EQUALS .)
    U8CHAR_CONST    reduce using rule 301 (assignment_operator -> EQUALS .)
    WCHAR_CONST     reduce using rule 301 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 301 (assignment_operator -> EQUALS .)
    HEX_FLOAT_CONST reduce using rule 301 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 301 (assignment_operator -> EQUALS .)
    INT_CONST_CHAR  reduce using rule 301 (assignment_operator -> EQUALS .)
    INT_CONST_BIN   reduce using rule 301 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 301 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 301 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 301 (assignment_operator -> EQUALS .)
    ID              reduce using rule 301 (assignment_operator -> EQUALS .)


state 397

    (11) static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .
    ;               reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    STATIC_ASSERT_  reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    PRAGMA_         reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    PPPRAGMA        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    PPHASH          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    TIMES           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    LPAREN          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    ID              reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    ALIGNAS_        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    ATOMIC_         reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    NORETURN_       reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INLINE          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    THREAD_LOCAL_   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    TYPEDEF         reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    EXTERN          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    STATIC          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    REGISTER        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    AUTO            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    VOLATILE        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    RESTRICT        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    CONST           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT128          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    UNSIGNED        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    SIGNED          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    COMPLEX_        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    DOUBLE          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    FLOAT           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    LONG            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT             reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    SHORT           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    CHAR            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    BOOL_           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    VOID            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    ENUM            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    TYPEID          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    UNION           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    STRUCT          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    $end            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    RETURN          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    CONTINUE        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    BREAK           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    GOTO            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    FOR             reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    DO              reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    WHILE           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    SWITCH          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    IF              reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    DEFAULT         reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    CASE            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    LBRACE          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    ALIGNOF_        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    SIZEOF          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    MINUSMINUS      reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    PLUSPLUS        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    LNOT            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    NOT             reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    MINUS           reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    PLUS            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    AND             reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    OFFSETOF        reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    U32STRING_LITERAL reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    U16STRING_LITERAL reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    U8STRING_LITERAL reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    WSTRING_LITERAL reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    STRING_LITERAL  reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    U32CHAR_CONST   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    U16CHAR_CONST   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    U8CHAR_CONST    reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    WCHAR_CONST     reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    CHAR_CONST      reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    HEX_FLOAT_CONST reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    FLOAT_CONST     reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT_CONST_CHAR  reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT_CONST_BIN   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT_CONST_HEX   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT_CONST_OCT   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    INT_CONST_DEC   reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    RBRACE          reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)
    ELSE            reduce using rule 11 (static_assert -> STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN .)


state 398

    (12) _1_222c22_unified_string_literal_optional -> , unified_string_literal .
    (381) unified_string_literal -> unified_string_literal . STRING_LITERAL
    RPAREN          reduce using rule 12 (_1_222c22_unified_string_literal_optional -> , unified_string_literal .)
    STRING_LITERAL  shift and go to state 274


state 399

    (303) conditional_expression -> binary_expression CONDOP expression . : conditional_expression
    (281) expression -> expression . , assignment_expression
    :               shift and go to state 507
    ,               shift and go to state 384


state 400

    (305) binary_expression -> binary_expression LOR binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    ,               reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    ;               reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    :               reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 305 (binary_expression -> binary_expression LOR binary_expression .)
    LAND            shift and go to state 239
    XOR             shift and go to state 240
    OR              shift and go to state 241
    AND             shift and go to state 242
    NE              shift and go to state 243
    EQ              shift and go to state 244
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 401

    (306) binary_expression -> binary_expression LAND binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    ,               reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    ;               reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    :               reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 306 (binary_expression -> binary_expression LAND binary_expression .)
    XOR             shift and go to state 240
    OR              shift and go to state 241
    AND             shift and go to state 242
    NE              shift and go to state 243
    EQ              shift and go to state 244
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 402

    (307) binary_expression -> binary_expression XOR binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    ,               reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    ;               reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    :               reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 307 (binary_expression -> binary_expression XOR binary_expression .)
    AND             shift and go to state 242
    NE              shift and go to state 243
    EQ              shift and go to state 244
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 403

    (308) binary_expression -> binary_expression OR binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    ,               reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    ;               reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    :               reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 308 (binary_expression -> binary_expression OR binary_expression .)
    XOR             shift and go to state 240
    AND             shift and go to state 242
    NE              shift and go to state 243
    EQ              shift and go to state 244
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 404

    (309) binary_expression -> binary_expression AND binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    ,               reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    ;               reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    :               reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 309 (binary_expression -> binary_expression AND binary_expression .)
    NE              shift and go to state 243
    EQ              shift and go to state 244
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 405

    (310) binary_expression -> binary_expression NE binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    ,               reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    ;               reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    :               reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 310 (binary_expression -> binary_expression NE binary_expression .)
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 406

    (311) binary_expression -> binary_expression EQ binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    ,               reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    ;               reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    :               reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 311 (binary_expression -> binary_expression EQ binary_expression .)
    GT              shift and go to state 245
    GE              shift and go to state 246
    LE              shift and go to state 247
    LT              shift and go to state 248
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 407

    (312) binary_expression -> binary_expression GT binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    ,               reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    ;               reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    :               reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 312 (binary_expression -> binary_expression GT binary_expression .)
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 408

    (313) binary_expression -> binary_expression GE binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    ,               reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    ;               reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    :               reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 313 (binary_expression -> binary_expression GE binary_expression .)
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 409

    (314) binary_expression -> binary_expression LE binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    ,               reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    ;               reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    :               reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 314 (binary_expression -> binary_expression LE binary_expression .)
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 410

    (315) binary_expression -> binary_expression LT binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    ,               reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    ;               reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    :               reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 315 (binary_expression -> binary_expression LT binary_expression .)
    LSHIFT          shift and go to state 249
    RSHIFT          shift and go to state 250
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 411

    (316) binary_expression -> binary_expression LSHIFT binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    ,               reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    ;               reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    :               reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 316 (binary_expression -> binary_expression LSHIFT binary_expression .)
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 412

    (317) binary_expression -> binary_expression RSHIFT binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    ,               reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    ;               reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    :               reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 317 (binary_expression -> binary_expression RSHIFT binary_expression .)
    MINUS           shift and go to state 251
    PLUS            shift and go to state 252
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 413

    (318) binary_expression -> binary_expression MINUS binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    ,               reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    ;               reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    :               reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 318 (binary_expression -> binary_expression MINUS binary_expression .)
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 414

    (319) binary_expression -> binary_expression PLUS binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    ,               reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    ;               reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    :               reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 319 (binary_expression -> binary_expression PLUS binary_expression .)
    MOD             shift and go to state 253
    DIVIDE          shift and go to state 254
    TIMES           shift and go to state 255


state 415

    (320) binary_expression -> binary_expression MOD binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    ,               reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    ;               reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    :               reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 320 (binary_expression -> binary_expression MOD binary_expression .)


state 416

    (321) binary_expression -> binary_expression DIVIDE binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ,               reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ;               reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    :               reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 321 (binary_expression -> binary_expression DIVIDE binary_expression .)


state 417

    (322) binary_expression -> binary_expression TIMES binary_expression .
    (305) binary_expression -> binary_expression . LOR binary_expression
    (306) binary_expression -> binary_expression . LAND binary_expression
    (307) binary_expression -> binary_expression . XOR binary_expression
    (308) binary_expression -> binary_expression . OR binary_expression
    (309) binary_expression -> binary_expression . AND binary_expression
    (310) binary_expression -> binary_expression . NE binary_expression
    (311) binary_expression -> binary_expression . EQ binary_expression
    (312) binary_expression -> binary_expression . GT binary_expression
    (313) binary_expression -> binary_expression . GE binary_expression
    (314) binary_expression -> binary_expression . LE binary_expression
    (315) binary_expression -> binary_expression . LT binary_expression
    (316) binary_expression -> binary_expression . LSHIFT binary_expression
    (317) binary_expression -> binary_expression . RSHIFT binary_expression
    (318) binary_expression -> binary_expression . MINUS binary_expression
    (319) binary_expression -> binary_expression . PLUS binary_expression
    (320) binary_expression -> binary_expression . MOD binary_expression
    (321) binary_expression -> binary_expression . DIVIDE binary_expression
    (322) binary_expression -> binary_expression . TIMES binary_expression
    CONDOP          reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    ,               reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    ;               reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    :               reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 322 (binary_expression -> binary_expression TIMES binary_expression .)


state 418

    (326) unary_expression -> ALIGNOF_ LPAREN type_name . RPAREN
    RPAREN          shift and go to state 508


state 419

    (327) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (339) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list _18_222c22_optional brace_close
    RPAREN          shift and go to state 509


state 420

    (339) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list _18_222c22_optional brace_close
    RPAREN          shift and go to state 510


state 421

    (344) postfix_expression -> postfix_expression ARROW TYPEID .
    MINUSMINUS      reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSPLUS        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ARROW           reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    .               reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LPAREN          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LBRACKET        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    CONDOP          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LOR             reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LAND            reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOR             reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OR              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    AND             reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    NE              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQ              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GT              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GE              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LE              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LT              reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFT          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFT          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUS           reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUS            reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MOD             reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVIDE          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMES           reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ,               reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RPAREN          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OREQUAL         reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ANDEQUAL        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFTEQUAL     reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFTEQUAL     reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSEQUAL      reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSEQUAL       reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MODEQUAL        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVEQUAL        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMESEQUAL      reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOREQUAL        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQUALS          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ;               reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACKET        reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    :               reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACE          reduce using rule 344 (postfix_expression -> postfix_expression ARROW TYPEID .)


state 422

    (345) postfix_expression -> postfix_expression ARROW ID .
    MINUSMINUS      reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSPLUS        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    .               reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LBRACKET        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    NE              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    EQ              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    GT              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    GE              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LE              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LT              reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    TIMES           reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    ,               reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    DIVEQUAL        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    TIMESEQUAL      reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    ;               reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACKET        reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    :               reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACE          reduce using rule 345 (postfix_expression -> postfix_expression ARROW ID .)


state 423

    (346) postfix_expression -> postfix_expression . TYPEID .
    MINUSMINUS      reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    PLUSPLUS        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    ARROW           reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    .               reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LPAREN          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LBRACKET        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    CONDOP          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LOR             reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LAND            reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    XOR             reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    OR              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    AND             reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    NE              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    EQ              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    GT              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    GE              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LE              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LT              reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LSHIFT          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    RSHIFT          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    MINUS           reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    PLUS            reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    MOD             reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    DIVIDE          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    TIMES           reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    ,               reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    RPAREN          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    OREQUAL         reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    ANDEQUAL        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    RSHIFTEQUAL     reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    LSHIFTEQUAL     reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    MINUSEQUAL      reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    PLUSEQUAL       reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    MODEQUAL        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    DIVEQUAL        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    TIMESEQUAL      reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    XOREQUAL        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    EQUALS          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    ;               reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    RBRACKET        reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    :               reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)
    RBRACE          reduce using rule 346 (postfix_expression -> postfix_expression . TYPEID .)


state 424

    (347) postfix_expression -> postfix_expression . ID .
    MINUSMINUS      reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    PLUSPLUS        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    ARROW           reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    .               reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LPAREN          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LBRACKET        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    CONDOP          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LOR             reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LAND            reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    XOR             reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    OR              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    AND             reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    NE              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    EQ              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    GT              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    GE              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LE              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LT              reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LSHIFT          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    RSHIFT          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    MINUS           reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    PLUS            reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    MOD             reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    DIVIDE          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    TIMES           reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    ,               reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    RPAREN          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    OREQUAL         reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    ANDEQUAL        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    RSHIFTEQUAL     reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    LSHIFTEQUAL     reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    MINUSEQUAL      reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    PLUSEQUAL       reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    MODEQUAL        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    DIVEQUAL        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    TIMESEQUAL      reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    XOREQUAL        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    EQUALS          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    ;               reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    RBRACKET        reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    :               reduce using rule 347 (postfix_expression -> postfix_expression . ID .)
    RBRACE          reduce using rule 347 (postfix_expression -> postfix_expression . ID .)


state 425

    (348) postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional . RPAREN
    RPAREN          shift and go to state 511


state 426

    (349) _19_argument_expression_list_optional -> argument_expression_list .
    RPAREN          reduce using rule 349 (_19_argument_expression_list_optional -> argument_expression_list .)


state 427

    (362) argument_expression_list -> assignment_expression . _20_222c22_assignment_expression_repeat
    (363) _20_222c22_assignment_expression_repeat -> . _20_222c22_assignment_expression_items
    (364) _20_222c22_assignment_expression_repeat -> .
    (365) _20_222c22_assignment_expression_items -> . _20_222c22_assignment_expression_items _20_222c22_assignment_expression_item
    (366) _20_222c22_assignment_expression_items -> . _20_222c22_assignment_expression_item
    (367) _20_222c22_assignment_expression_item -> . , assignment_expression
    RPAREN          reduce using rule 364 (_20_222c22_assignment_expression_repeat -> .)
    ,               shift and go to state 515

    _20_222c22_assignment_expression_repeat shift and go to state 512
    _20_222c22_assignment_expression_items shift and go to state 513
    _20_222c22_assignment_expression_item shift and go to state 514

state 428

    (351) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (281) expression -> expression . , assignment_expression
    RBRACKET        shift and go to state 516
    ,               shift and go to state 384


state 429

    (353) primary_expression -> OFFSETOF LPAREN type_name . , offsetof_member_designator RPAREN
    ,               shift and go to state 517


state 430

    (223) initializer -> brace_open initializer_list . , brace_close
    (232) initializer_list_opt -> initializer_list .
    ,               shift and go to state 518
    RBRACE          reduce using rule 232 (initializer_list_opt -> initializer_list .)


state 431

    (224) initializer -> brace_open initializer_list_opt . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 519

state 432

    (226) initializer_list -> designation_opt . initializer _16_222c22_designation_opt_initializer_repeat
    (223) initializer -> . brace_open initializer_list , brace_close
    (224) initializer -> . brace_open initializer_list_opt brace_close
    (225) initializer -> . assignment_expression
    (391) brace_open -> . LBRACE
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    initializer                    shift and go to state 520
    brace_open                     shift and go to state 281
    assignment_expression          shift and go to state 282
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 433

    (233) initializer_list_opt -> empty .
    (236) designation_opt -> empty .
    RBRACE          reduce using rule 233 (initializer_list_opt -> empty .)
    LBRACE          reduce using rule 236 (designation_opt -> empty .)
    LPAREN          reduce using rule 236 (designation_opt -> empty .)
    ALIGNOF_        reduce using rule 236 (designation_opt -> empty .)
    SIZEOF          reduce using rule 236 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 236 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 236 (designation_opt -> empty .)
    LNOT            reduce using rule 236 (designation_opt -> empty .)
    NOT             reduce using rule 236 (designation_opt -> empty .)
    MINUS           reduce using rule 236 (designation_opt -> empty .)
    PLUS            reduce using rule 236 (designation_opt -> empty .)
    TIMES           reduce using rule 236 (designation_opt -> empty .)
    AND             reduce using rule 236 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 236 (designation_opt -> empty .)
    U32STRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    U16STRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    U8STRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 236 (designation_opt -> empty .)
    U32CHAR_CONST   reduce using rule 236 (designation_opt -> empty .)
    U16CHAR_CONST   reduce using rule 236 (designation_opt -> empty .)
    U8CHAR_CONST    reduce using rule 236 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 236 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 236 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 236 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_CHAR  reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 236 (designation_opt -> empty .)
    ID              reduce using rule 236 (designation_opt -> empty .)


state 434

    (235) designation_opt -> designation .
    LBRACE          reduce using rule 235 (designation_opt -> designation .)
    LPAREN          reduce using rule 235 (designation_opt -> designation .)
    ALIGNOF_        reduce using rule 235 (designation_opt -> designation .)
    SIZEOF          reduce using rule 235 (designation_opt -> designation .)
    MINUSMINUS      reduce using rule 235 (designation_opt -> designation .)
    PLUSPLUS        reduce using rule 235 (designation_opt -> designation .)
    LNOT            reduce using rule 235 (designation_opt -> designation .)
    NOT             reduce using rule 235 (designation_opt -> designation .)
    MINUS           reduce using rule 235 (designation_opt -> designation .)
    PLUS            reduce using rule 235 (designation_opt -> designation .)
    TIMES           reduce using rule 235 (designation_opt -> designation .)
    AND             reduce using rule 235 (designation_opt -> designation .)
    OFFSETOF        reduce using rule 235 (designation_opt -> designation .)
    U32STRING_LITERAL reduce using rule 235 (designation_opt -> designation .)
    U16STRING_LITERAL reduce using rule 235 (designation_opt -> designation .)
    U8STRING_LITERAL reduce using rule 235 (designation_opt -> designation .)
    WSTRING_LITERAL reduce using rule 235 (designation_opt -> designation .)
    STRING_LITERAL  reduce using rule 235 (designation_opt -> designation .)
    U32CHAR_CONST   reduce using rule 235 (designation_opt -> designation .)
    U16CHAR_CONST   reduce using rule 235 (designation_opt -> designation .)
    U8CHAR_CONST    reduce using rule 235 (designation_opt -> designation .)
    WCHAR_CONST     reduce using rule 235 (designation_opt -> designation .)
    CHAR_CONST      reduce using rule 235 (designation_opt -> designation .)
    HEX_FLOAT_CONST reduce using rule 235 (designation_opt -> designation .)
    FLOAT_CONST     reduce using rule 235 (designation_opt -> designation .)
    INT_CONST_CHAR  reduce using rule 235 (designation_opt -> designation .)
    INT_CONST_BIN   reduce using rule 235 (designation_opt -> designation .)
    INT_CONST_HEX   reduce using rule 235 (designation_opt -> designation .)
    INT_CONST_OCT   reduce using rule 235 (designation_opt -> designation .)
    INT_CONST_DEC   reduce using rule 235 (designation_opt -> designation .)
    ID              reduce using rule 235 (designation_opt -> designation .)


state 435

    (234) designation -> designator_list . EQUALS
    EQUALS          shift and go to state 521


state 436

    (237) designator_list -> designator . _17_designator_repeat
    (238) _17_designator_repeat -> . _17_designator_items
    (239) _17_designator_repeat -> .
    (240) _17_designator_items -> . _17_designator_items _17_designator_item
    (241) _17_designator_items -> . _17_designator_item
    (242) _17_designator_item -> . designator
    (243) designator -> . . identifier
    (244) designator -> . LBRACKET constant_expression RBRACKET
    EQUALS          reduce using rule 239 (_17_designator_repeat -> .)
    .               shift and go to state 437
    LBRACKET        shift and go to state 438

    designator                     shift and go to state 522
    _17_designator_repeat          shift and go to state 523
    _17_designator_items           shift and go to state 524
    _17_designator_item            shift and go to state 525

state 437

    (243) designator -> . . identifier
    (368) identifier -> . ID
    ID              shift and go to state 142

    identifier                     shift and go to state 526

state 438

    (244) designator -> LBRACKET . constant_expression RBRACKET
    (302) constant_expression -> . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 527
    conditional_expression         shift and go to state 126
    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 439

    (177) direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .
    LPAREN          reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACKET        reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    ,               reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    ;               reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    :               reduce using rule 177 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)


state 440

    (178) direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .
    LPAREN          reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    LBRACKET        reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    ,               reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    ;               reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    :               reduce using rule 178 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)


state 441

    (179) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (337) unary_operator -> TIMES .
    RBRACKET        shift and go to state 528
    LPAREN          reduce using rule 337 (unary_operator -> TIMES .)
    ALIGNOF_        reduce using rule 337 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 337 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 337 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 337 (unary_operator -> TIMES .)
    LNOT            reduce using rule 337 (unary_operator -> TIMES .)
    NOT             reduce using rule 337 (unary_operator -> TIMES .)
    MINUS           reduce using rule 337 (unary_operator -> TIMES .)
    PLUS            reduce using rule 337 (unary_operator -> TIMES .)
    TIMES           reduce using rule 337 (unary_operator -> TIMES .)
    AND             reduce using rule 337 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 337 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 337 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 337 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 337 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 337 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 337 (unary_operator -> TIMES .)
    ID              reduce using rule 337 (unary_operator -> TIMES .)


state 442

    (182) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET
    RBRACKET        shift and go to state 529


state 443

    (180) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 530
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 444

    (181) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 531
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 445

    (264) compound_statement -> brace_open block_item_list_opt brace_close .
    ;               reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC_ASSERT_  reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PRAGMA_         reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPPRAGMA        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPHASH          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TIMES           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LPAREN          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ID              reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ALIGNAS_        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ATOMIC_         reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NORETURN_       reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INLINE          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    THREAD_LOCAL_   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEDEF         reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    EXTERN          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    REGISTER        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AUTO            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOLATILE        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RESTRICT        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONST           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT128          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNSIGNED        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIGNED          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    COMPLEX_        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DOUBLE          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LONG            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT             reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SHORT           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BOOL_           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOID            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ENUM            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEID          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNION           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRUCT          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    $end            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RETURN          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONTINUE        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BREAK           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    GOTO            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FOR             reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DO              reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WHILE           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SWITCH          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    IF              reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DEFAULT         reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CASE            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LBRACE          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ALIGNOF_        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIZEOF          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUSMINUS      reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUSPLUS        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LNOT            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NOT             reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUS           reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUS            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AND             reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    OFFSETOF        reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U32STRING_LITERAL reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U16STRING_LITERAL reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U8STRING_LITERAL reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WSTRING_LITERAL reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRING_LITERAL  reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U32CHAR_CONST   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U16CHAR_CONST   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U8CHAR_CONST    reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WCHAR_CONST     reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR_CONST      reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    HEX_FLOAT_CONST reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT_CONST     reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_CHAR  reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_BIN   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_HEX   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_OCT   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_DEC   reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RBRACE          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RPAREN          reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ELSE            reduce using rule 264 (compound_statement -> brace_open block_item_list_opt brace_close .)


state 446

    (260) block_item_list -> block_item_list block_item .
    STATIC_ASSERT_  reduce using rule 260 (block_item_list -> block_item_list block_item .)
    PRAGMA_         reduce using rule 260 (block_item_list -> block_item_list block_item .)
    PPPRAGMA        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 260 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 260 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 260 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 260 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 260 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    ALIGNAS_        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    ATOMIC_         reduce using rule 260 (block_item_list -> block_item_list block_item .)
    NORETURN_       reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    THREAD_LOCAL_   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 260 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT128          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    COMPLEX_        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 260 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    BOOL_           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    ALIGNOF_        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 260 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 260 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 260 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 260 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 260 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 260 (block_item_list -> block_item_list block_item .)
    OFFSETOF        reduce using rule 260 (block_item_list -> block_item_list block_item .)
    U32STRING_LITERAL reduce using rule 260 (block_item_list -> block_item_list block_item .)
    U16STRING_LITERAL reduce using rule 260 (block_item_list -> block_item_list block_item .)
    U8STRING_LITERAL reduce using rule 260 (block_item_list -> block_item_list block_item .)
    WSTRING_LITERAL reduce using rule 260 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 260 (block_item_list -> block_item_list block_item .)
    U32CHAR_CONST   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    U16CHAR_CONST   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    U8CHAR_CONST    reduce using rule 260 (block_item_list -> block_item_list block_item .)
    WCHAR_CONST     reduce using rule 260 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 260 (block_item_list -> block_item_list block_item .)
    HEX_FLOAT_CONST reduce using rule 260 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT_CONST_CHAR  reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT_CONST_BIN   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT_CONST_HEX   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT_CONST_OCT   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    INT_CONST_DEC   reduce using rule 260 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 260 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 260 (block_item_list -> block_item_list block_item .)


state 447

    (284) expression_opt -> empty .
    ;               reduce using rule 284 (expression_opt -> empty .)
    RPAREN          reduce using rule 284 (expression_opt -> empty .)


state 448

    (275) jump_statement -> RETURN ; .
    STATIC_ASSERT_  reduce using rule 275 (jump_statement -> RETURN ; .)
    PRAGMA_         reduce using rule 275 (jump_statement -> RETURN ; .)
    PPPRAGMA        reduce using rule 275 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 275 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 275 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 275 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 275 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 275 (jump_statement -> RETURN ; .)
    DO              reduce using rule 275 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 275 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 275 (jump_statement -> RETURN ; .)
    IF              reduce using rule 275 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 275 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 275 (jump_statement -> RETURN ; .)
    ID              reduce using rule 275 (jump_statement -> RETURN ; .)
    LBRACE          reduce using rule 275 (jump_statement -> RETURN ; .)
    ALIGNAS_        reduce using rule 275 (jump_statement -> RETURN ; .)
    ATOMIC_         reduce using rule 275 (jump_statement -> RETURN ; .)
    NORETURN_       reduce using rule 275 (jump_statement -> RETURN ; .)
    INLINE          reduce using rule 275 (jump_statement -> RETURN ; .)
    THREAD_LOCAL_   reduce using rule 275 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 275 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 275 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 275 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 275 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 275 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 275 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 275 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 275 (jump_statement -> RETURN ; .)
    LPAREN          reduce using rule 275 (jump_statement -> RETURN ; .)
    INT128          reduce using rule 275 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 275 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 275 (jump_statement -> RETURN ; .)
    COMPLEX_        reduce using rule 275 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 275 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 275 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 275 (jump_statement -> RETURN ; .)
    INT             reduce using rule 275 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 275 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 275 (jump_statement -> RETURN ; .)
    BOOL_           reduce using rule 275 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 275 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 275 (jump_statement -> RETURN ; .)
    TYPEID          reduce using rule 275 (jump_statement -> RETURN ; .)
    ALIGNOF_        reduce using rule 275 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 275 (jump_statement -> RETURN ; .)
    MINUSMINUS      reduce using rule 275 (jump_statement -> RETURN ; .)
    PLUSPLUS        reduce using rule 275 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 275 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 275 (jump_statement -> RETURN ; .)
    LNOT            reduce using rule 275 (jump_statement -> RETURN ; .)
    NOT             reduce using rule 275 (jump_statement -> RETURN ; .)
    MINUS           reduce using rule 275 (jump_statement -> RETURN ; .)
    PLUS            reduce using rule 275 (jump_statement -> RETURN ; .)
    TIMES           reduce using rule 275 (jump_statement -> RETURN ; .)
    AND             reduce using rule 275 (jump_statement -> RETURN ; .)
    OFFSETOF        reduce using rule 275 (jump_statement -> RETURN ; .)
    U32STRING_LITERAL reduce using rule 275 (jump_statement -> RETURN ; .)
    U16STRING_LITERAL reduce using rule 275 (jump_statement -> RETURN ; .)
    U8STRING_LITERAL reduce using rule 275 (jump_statement -> RETURN ; .)
    WSTRING_LITERAL reduce using rule 275 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 275 (jump_statement -> RETURN ; .)
    U32CHAR_CONST   reduce using rule 275 (jump_statement -> RETURN ; .)
    U16CHAR_CONST   reduce using rule 275 (jump_statement -> RETURN ; .)
    U8CHAR_CONST    reduce using rule 275 (jump_statement -> RETURN ; .)
    WCHAR_CONST     reduce using rule 275 (jump_statement -> RETURN ; .)
    CHAR_CONST      reduce using rule 275 (jump_statement -> RETURN ; .)
    HEX_FLOAT_CONST reduce using rule 275 (jump_statement -> RETURN ; .)
    FLOAT_CONST     reduce using rule 275 (jump_statement -> RETURN ; .)
    INT_CONST_CHAR  reduce using rule 275 (jump_statement -> RETURN ; .)
    INT_CONST_BIN   reduce using rule 275 (jump_statement -> RETURN ; .)
    INT_CONST_HEX   reduce using rule 275 (jump_statement -> RETURN ; .)
    INT_CONST_OCT   reduce using rule 275 (jump_statement -> RETURN ; .)
    INT_CONST_DEC   reduce using rule 275 (jump_statement -> RETURN ; .)
    ;               reduce using rule 275 (jump_statement -> RETURN ; .)
    RBRACE          reduce using rule 275 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 275 (jump_statement -> RETURN ; .)


state 449

    (276) jump_statement -> RETURN expression . ;
    (281) expression -> expression . , assignment_expression
    ;               shift and go to state 532
    ,               shift and go to state 384


state 450

    (277) jump_statement -> CONTINUE ; .
    STATIC_ASSERT_  reduce using rule 277 (jump_statement -> CONTINUE ; .)
    PRAGMA_         reduce using rule 277 (jump_statement -> CONTINUE ; .)
    PPPRAGMA        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 277 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 277 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 277 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 277 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ID              reduce using rule 277 (jump_statement -> CONTINUE ; .)
    LBRACE          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ALIGNAS_        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ATOMIC_         reduce using rule 277 (jump_statement -> CONTINUE ; .)
    NORETURN_       reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INLINE          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    THREAD_LOCAL_   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    TYPEDEF         reduce using rule 277 (jump_statement -> CONTINUE ; .)
    EXTERN          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    STATIC          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    REGISTER        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    AUTO            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    RESTRICT        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    CONST           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    LPAREN          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT128          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    COMPLEX_        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 277 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    BOOL_           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ENUM            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    TYPEID          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ALIGNOF_        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    MINUSMINUS      reduce using rule 277 (jump_statement -> CONTINUE ; .)
    PLUSPLUS        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    UNION           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    LNOT            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    NOT             reduce using rule 277 (jump_statement -> CONTINUE ; .)
    MINUS           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    PLUS            reduce using rule 277 (jump_statement -> CONTINUE ; .)
    TIMES           reduce using rule 277 (jump_statement -> CONTINUE ; .)
    AND             reduce using rule 277 (jump_statement -> CONTINUE ; .)
    OFFSETOF        reduce using rule 277 (jump_statement -> CONTINUE ; .)
    U32STRING_LITERAL reduce using rule 277 (jump_statement -> CONTINUE ; .)
    U16STRING_LITERAL reduce using rule 277 (jump_statement -> CONTINUE ; .)
    U8STRING_LITERAL reduce using rule 277 (jump_statement -> CONTINUE ; .)
    WSTRING_LITERAL reduce using rule 277 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 277 (jump_statement -> CONTINUE ; .)
    U32CHAR_CONST   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    U16CHAR_CONST   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    U8CHAR_CONST    reduce using rule 277 (jump_statement -> CONTINUE ; .)
    WCHAR_CONST     reduce using rule 277 (jump_statement -> CONTINUE ; .)
    CHAR_CONST      reduce using rule 277 (jump_statement -> CONTINUE ; .)
    HEX_FLOAT_CONST reduce using rule 277 (jump_statement -> CONTINUE ; .)
    FLOAT_CONST     reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT_CONST_CHAR  reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT_CONST_BIN   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT_CONST_HEX   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT_CONST_OCT   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    INT_CONST_DEC   reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 277 (jump_statement -> CONTINUE ; .)
    RBRACE          reduce using rule 277 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 277 (jump_statement -> CONTINUE ; .)


state 451

    (278) jump_statement -> BREAK ; .
    STATIC_ASSERT_  reduce using rule 278 (jump_statement -> BREAK ; .)
    PRAGMA_         reduce using rule 278 (jump_statement -> BREAK ; .)
    PPPRAGMA        reduce using rule 278 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 278 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 278 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 278 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 278 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 278 (jump_statement -> BREAK ; .)
    DO              reduce using rule 278 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 278 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 278 (jump_statement -> BREAK ; .)
    IF              reduce using rule 278 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 278 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 278 (jump_statement -> BREAK ; .)
    ID              reduce using rule 278 (jump_statement -> BREAK ; .)
    LBRACE          reduce using rule 278 (jump_statement -> BREAK ; .)
    ALIGNAS_        reduce using rule 278 (jump_statement -> BREAK ; .)
    ATOMIC_         reduce using rule 278 (jump_statement -> BREAK ; .)
    NORETURN_       reduce using rule 278 (jump_statement -> BREAK ; .)
    INLINE          reduce using rule 278 (jump_statement -> BREAK ; .)
    THREAD_LOCAL_   reduce using rule 278 (jump_statement -> BREAK ; .)
    TYPEDEF         reduce using rule 278 (jump_statement -> BREAK ; .)
    EXTERN          reduce using rule 278 (jump_statement -> BREAK ; .)
    STATIC          reduce using rule 278 (jump_statement -> BREAK ; .)
    REGISTER        reduce using rule 278 (jump_statement -> BREAK ; .)
    AUTO            reduce using rule 278 (jump_statement -> BREAK ; .)
    VOLATILE        reduce using rule 278 (jump_statement -> BREAK ; .)
    RESTRICT        reduce using rule 278 (jump_statement -> BREAK ; .)
    CONST           reduce using rule 278 (jump_statement -> BREAK ; .)
    LPAREN          reduce using rule 278 (jump_statement -> BREAK ; .)
    INT128          reduce using rule 278 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 278 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 278 (jump_statement -> BREAK ; .)
    COMPLEX_        reduce using rule 278 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 278 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 278 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 278 (jump_statement -> BREAK ; .)
    INT             reduce using rule 278 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 278 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 278 (jump_statement -> BREAK ; .)
    BOOL_           reduce using rule 278 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 278 (jump_statement -> BREAK ; .)
    ENUM            reduce using rule 278 (jump_statement -> BREAK ; .)
    TYPEID          reduce using rule 278 (jump_statement -> BREAK ; .)
    ALIGNOF_        reduce using rule 278 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 278 (jump_statement -> BREAK ; .)
    MINUSMINUS      reduce using rule 278 (jump_statement -> BREAK ; .)
    PLUSPLUS        reduce using rule 278 (jump_statement -> BREAK ; .)
    UNION           reduce using rule 278 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 278 (jump_statement -> BREAK ; .)
    LNOT            reduce using rule 278 (jump_statement -> BREAK ; .)
    NOT             reduce using rule 278 (jump_statement -> BREAK ; .)
    MINUS           reduce using rule 278 (jump_statement -> BREAK ; .)
    PLUS            reduce using rule 278 (jump_statement -> BREAK ; .)
    TIMES           reduce using rule 278 (jump_statement -> BREAK ; .)
    AND             reduce using rule 278 (jump_statement -> BREAK ; .)
    OFFSETOF        reduce using rule 278 (jump_statement -> BREAK ; .)
    U32STRING_LITERAL reduce using rule 278 (jump_statement -> BREAK ; .)
    U16STRING_LITERAL reduce using rule 278 (jump_statement -> BREAK ; .)
    U8STRING_LITERAL reduce using rule 278 (jump_statement -> BREAK ; .)
    WSTRING_LITERAL reduce using rule 278 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 278 (jump_statement -> BREAK ; .)
    U32CHAR_CONST   reduce using rule 278 (jump_statement -> BREAK ; .)
    U16CHAR_CONST   reduce using rule 278 (jump_statement -> BREAK ; .)
    U8CHAR_CONST    reduce using rule 278 (jump_statement -> BREAK ; .)
    WCHAR_CONST     reduce using rule 278 (jump_statement -> BREAK ; .)
    CHAR_CONST      reduce using rule 278 (jump_statement -> BREAK ; .)
    HEX_FLOAT_CONST reduce using rule 278 (jump_statement -> BREAK ; .)
    FLOAT_CONST     reduce using rule 278 (jump_statement -> BREAK ; .)
    INT_CONST_CHAR  reduce using rule 278 (jump_statement -> BREAK ; .)
    INT_CONST_BIN   reduce using rule 278 (jump_statement -> BREAK ; .)
    INT_CONST_HEX   reduce using rule 278 (jump_statement -> BREAK ; .)
    INT_CONST_OCT   reduce using rule 278 (jump_statement -> BREAK ; .)
    INT_CONST_DEC   reduce using rule 278 (jump_statement -> BREAK ; .)
    ;               reduce using rule 278 (jump_statement -> BREAK ; .)
    RBRACE          reduce using rule 278 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 278 (jump_statement -> BREAK ; .)


state 452

    (279) jump_statement -> GOTO ID . ;
    ;               shift and go to state 533


state 453

    (267) labeled_statement -> ID : . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    pragmacomp_or_statement        shift and go to state 534
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 454

    (271) iteration_statement -> FOR LPAREN . declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> FOR LPAREN . expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (38) declaration -> . decl_body ;
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (36) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (37) decl_body -> . declaration_specifiers init_declarator_list_opt
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    declaration                    shift and go to state 535
    expression_opt                 shift and go to state 536
    decl_body                      shift and go to state 16
    expression                     shift and go to state 303
    empty                          shift and go to state 447
    declaration_specifiers_no_type shift and go to state 19
    declaration_specifiers         shift and go to state 91
    assignment_expression          shift and go to state 232
    alignment_specifier            shift and go to state 20
    atomic_specifier               shift and go to state 28
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    struct_or_union                shift and go to state 59
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 455

    (280) expression_statement -> expression_opt ; .
    STATIC_ASSERT_  reduce using rule 280 (expression_statement -> expression_opt ; .)
    PRAGMA_         reduce using rule 280 (expression_statement -> expression_opt ; .)
    PPPRAGMA        reduce using rule 280 (expression_statement -> expression_opt ; .)
    RETURN          reduce using rule 280 (expression_statement -> expression_opt ; .)
    CONTINUE        reduce using rule 280 (expression_statement -> expression_opt ; .)
    BREAK           reduce using rule 280 (expression_statement -> expression_opt ; .)
    GOTO            reduce using rule 280 (expression_statement -> expression_opt ; .)
    FOR             reduce using rule 280 (expression_statement -> expression_opt ; .)
    DO              reduce using rule 280 (expression_statement -> expression_opt ; .)
    WHILE           reduce using rule 280 (expression_statement -> expression_opt ; .)
    SWITCH          reduce using rule 280 (expression_statement -> expression_opt ; .)
    IF              reduce using rule 280 (expression_statement -> expression_opt ; .)
    DEFAULT         reduce using rule 280 (expression_statement -> expression_opt ; .)
    CASE            reduce using rule 280 (expression_statement -> expression_opt ; .)
    ID              reduce using rule 280 (expression_statement -> expression_opt ; .)
    LBRACE          reduce using rule 280 (expression_statement -> expression_opt ; .)
    ALIGNAS_        reduce using rule 280 (expression_statement -> expression_opt ; .)
    ATOMIC_         reduce using rule 280 (expression_statement -> expression_opt ; .)
    NORETURN_       reduce using rule 280 (expression_statement -> expression_opt ; .)
    INLINE          reduce using rule 280 (expression_statement -> expression_opt ; .)
    THREAD_LOCAL_   reduce using rule 280 (expression_statement -> expression_opt ; .)
    TYPEDEF         reduce using rule 280 (expression_statement -> expression_opt ; .)
    EXTERN          reduce using rule 280 (expression_statement -> expression_opt ; .)
    STATIC          reduce using rule 280 (expression_statement -> expression_opt ; .)
    REGISTER        reduce using rule 280 (expression_statement -> expression_opt ; .)
    AUTO            reduce using rule 280 (expression_statement -> expression_opt ; .)
    VOLATILE        reduce using rule 280 (expression_statement -> expression_opt ; .)
    RESTRICT        reduce using rule 280 (expression_statement -> expression_opt ; .)
    CONST           reduce using rule 280 (expression_statement -> expression_opt ; .)
    LPAREN          reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT128          reduce using rule 280 (expression_statement -> expression_opt ; .)
    UNSIGNED        reduce using rule 280 (expression_statement -> expression_opt ; .)
    SIGNED          reduce using rule 280 (expression_statement -> expression_opt ; .)
    COMPLEX_        reduce using rule 280 (expression_statement -> expression_opt ; .)
    DOUBLE          reduce using rule 280 (expression_statement -> expression_opt ; .)
    FLOAT           reduce using rule 280 (expression_statement -> expression_opt ; .)
    LONG            reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT             reduce using rule 280 (expression_statement -> expression_opt ; .)
    SHORT           reduce using rule 280 (expression_statement -> expression_opt ; .)
    CHAR            reduce using rule 280 (expression_statement -> expression_opt ; .)
    BOOL_           reduce using rule 280 (expression_statement -> expression_opt ; .)
    VOID            reduce using rule 280 (expression_statement -> expression_opt ; .)
    ENUM            reduce using rule 280 (expression_statement -> expression_opt ; .)
    TYPEID          reduce using rule 280 (expression_statement -> expression_opt ; .)
    ALIGNOF_        reduce using rule 280 (expression_statement -> expression_opt ; .)
    SIZEOF          reduce using rule 280 (expression_statement -> expression_opt ; .)
    MINUSMINUS      reduce using rule 280 (expression_statement -> expression_opt ; .)
    PLUSPLUS        reduce using rule 280 (expression_statement -> expression_opt ; .)
    UNION           reduce using rule 280 (expression_statement -> expression_opt ; .)
    STRUCT          reduce using rule 280 (expression_statement -> expression_opt ; .)
    LNOT            reduce using rule 280 (expression_statement -> expression_opt ; .)
    NOT             reduce using rule 280 (expression_statement -> expression_opt ; .)
    MINUS           reduce using rule 280 (expression_statement -> expression_opt ; .)
    PLUS            reduce using rule 280 (expression_statement -> expression_opt ; .)
    TIMES           reduce using rule 280 (expression_statement -> expression_opt ; .)
    AND             reduce using rule 280 (expression_statement -> expression_opt ; .)
    OFFSETOF        reduce using rule 280 (expression_statement -> expression_opt ; .)
    U32STRING_LITERAL reduce using rule 280 (expression_statement -> expression_opt ; .)
    U16STRING_LITERAL reduce using rule 280 (expression_statement -> expression_opt ; .)
    U8STRING_LITERAL reduce using rule 280 (expression_statement -> expression_opt ; .)
    WSTRING_LITERAL reduce using rule 280 (expression_statement -> expression_opt ; .)
    STRING_LITERAL  reduce using rule 280 (expression_statement -> expression_opt ; .)
    U32CHAR_CONST   reduce using rule 280 (expression_statement -> expression_opt ; .)
    U16CHAR_CONST   reduce using rule 280 (expression_statement -> expression_opt ; .)
    U8CHAR_CONST    reduce using rule 280 (expression_statement -> expression_opt ; .)
    WCHAR_CONST     reduce using rule 280 (expression_statement -> expression_opt ; .)
    CHAR_CONST      reduce using rule 280 (expression_statement -> expression_opt ; .)
    HEX_FLOAT_CONST reduce using rule 280 (expression_statement -> expression_opt ; .)
    FLOAT_CONST     reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT_CONST_CHAR  reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT_CONST_BIN   reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT_CONST_HEX   reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT_CONST_OCT   reduce using rule 280 (expression_statement -> expression_opt ; .)
    INT_CONST_DEC   reduce using rule 280 (expression_statement -> expression_opt ; .)
    ;               reduce using rule 280 (expression_statement -> expression_opt ; .)
    RBRACE          reduce using rule 280 (expression_statement -> expression_opt ; .)
    ELSE            reduce using rule 280 (expression_statement -> expression_opt ; .)


state 456

    (273) iteration_statement -> DO pragmacomp_or_statement . WHILE LPAREN expression RPAREN ;
    WHILE           shift and go to state 537


state 457

    (34) pragmacomp_or_statement -> statement .
    WHILE           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STATIC_ASSERT_  reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PRAGMA_         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PPPRAGMA        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    RETURN          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CONTINUE        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    BREAK           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    GOTO            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    FOR             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    DO              reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SWITCH          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    IF              reduce using rule 34 (pragmacomp_or_statement -> statement .)
    DEFAULT         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CASE            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ID              reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LBRACE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ALIGNAS_        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ATOMIC_         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    NORETURN_       reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INLINE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    THREAD_LOCAL_   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    TYPEDEF         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    EXTERN          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STATIC          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    REGISTER        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    AUTO            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    VOLATILE        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    RESTRICT        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CONST           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LPAREN          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT128          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    UNSIGNED        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SIGNED          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    COMPLEX_        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    DOUBLE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    FLOAT           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LONG            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SHORT           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CHAR            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    BOOL_           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    VOID            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ENUM            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    TYPEID          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ALIGNOF_        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SIZEOF          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    MINUSMINUS      reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PLUSPLUS        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    UNION           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STRUCT          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LNOT            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    NOT             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    MINUS           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PLUS            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    TIMES           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    AND             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    OFFSETOF        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U32STRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U16STRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U8STRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    WSTRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STRING_LITERAL  reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U32CHAR_CONST   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U16CHAR_CONST   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U8CHAR_CONST    reduce using rule 34 (pragmacomp_or_statement -> statement .)
    WCHAR_CONST     reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CHAR_CONST      reduce using rule 34 (pragmacomp_or_statement -> statement .)
    HEX_FLOAT_CONST reduce using rule 34 (pragmacomp_or_statement -> statement .)
    FLOAT_CONST     reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_CHAR  reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_BIN   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_HEX   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_OCT   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_DEC   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ;               reduce using rule 34 (pragmacomp_or_statement -> statement .)
    RBRACE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ELSE            reduce using rule 34 (pragmacomp_or_statement -> statement .)


state 458

    (35) pragmacomp_or_statement -> pppragma_directive_list . statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    statement                      shift and go to state 538
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 295
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 459

    (27) statement -> pppragma_directive .
    (18) pppragma_directive_list -> pppragma_directive . _2_pppragma_directive_repeat
    (19) _2_pppragma_directive_repeat -> . _2_pppragma_directive_items
    (20) _2_pppragma_directive_repeat -> .
    (21) _2_pppragma_directive_items -> . _2_pppragma_directive_items _2_pppragma_directive_item
    (22) _2_pppragma_directive_items -> . _2_pppragma_directive_item
    (23) _2_pppragma_directive_item -> . pppragma_directive
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
  ! reduce/reduce conflict for STATIC_ASSERT_ resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for PRAGMA_ resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for PPPRAGMA resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for RETURN resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for BREAK resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for GOTO resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for FOR resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for DO resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for WHILE resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for SWITCH resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for IF resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for CASE resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for ID resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for LBRACE resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for LPAREN resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for ALIGNOF_ resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for LNOT resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for NOT resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for PLUS resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for TIMES resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for AND resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for OFFSETOF resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for U32STRING_LITERAL resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for U16STRING_LITERAL resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for U8STRING_LITERAL resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for WSTRING_LITERAL resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for U32CHAR_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for U16CHAR_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for U8CHAR_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for WCHAR_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for HEX_FLOAT_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_CHAR resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_BIN resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_HEX resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_OCT resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_DEC resolved using rule 27 (statement -> pppragma_directive .)
  ! reduce/reduce conflict for ; resolved using rule 27 (statement -> pppragma_directive .)
  ! shift/reduce conflict for PRAGMA_ resolved as shift
  ! shift/reduce conflict for PPPRAGMA resolved as shift
    WHILE           reduce using rule 27 (statement -> pppragma_directive .)
    STATIC_ASSERT_  reduce using rule 27 (statement -> pppragma_directive .)
    RETURN          reduce using rule 27 (statement -> pppragma_directive .)
    CONTINUE        reduce using rule 27 (statement -> pppragma_directive .)
    BREAK           reduce using rule 27 (statement -> pppragma_directive .)
    GOTO            reduce using rule 27 (statement -> pppragma_directive .)
    FOR             reduce using rule 27 (statement -> pppragma_directive .)
    DO              reduce using rule 27 (statement -> pppragma_directive .)
    SWITCH          reduce using rule 27 (statement -> pppragma_directive .)
    IF              reduce using rule 27 (statement -> pppragma_directive .)
    DEFAULT         reduce using rule 27 (statement -> pppragma_directive .)
    CASE            reduce using rule 27 (statement -> pppragma_directive .)
    ID              reduce using rule 27 (statement -> pppragma_directive .)
    LBRACE          reduce using rule 27 (statement -> pppragma_directive .)
    ALIGNAS_        reduce using rule 27 (statement -> pppragma_directive .)
    ATOMIC_         reduce using rule 27 (statement -> pppragma_directive .)
    NORETURN_       reduce using rule 27 (statement -> pppragma_directive .)
    INLINE          reduce using rule 27 (statement -> pppragma_directive .)
    THREAD_LOCAL_   reduce using rule 27 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 27 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 27 (statement -> pppragma_directive .)
    STATIC          reduce using rule 27 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 27 (statement -> pppragma_directive .)
    AUTO            reduce using rule 27 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 27 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 27 (statement -> pppragma_directive .)
    CONST           reduce using rule 27 (statement -> pppragma_directive .)
    LPAREN          reduce using rule 27 (statement -> pppragma_directive .)
    INT128          reduce using rule 27 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 27 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 27 (statement -> pppragma_directive .)
    COMPLEX_        reduce using rule 27 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 27 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 27 (statement -> pppragma_directive .)
    LONG            reduce using rule 27 (statement -> pppragma_directive .)
    INT             reduce using rule 27 (statement -> pppragma_directive .)
    SHORT           reduce using rule 27 (statement -> pppragma_directive .)
    CHAR            reduce using rule 27 (statement -> pppragma_directive .)
    BOOL_           reduce using rule 27 (statement -> pppragma_directive .)
    VOID            reduce using rule 27 (statement -> pppragma_directive .)
    ENUM            reduce using rule 27 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 27 (statement -> pppragma_directive .)
    ALIGNOF_        reduce using rule 27 (statement -> pppragma_directive .)
    SIZEOF          reduce using rule 27 (statement -> pppragma_directive .)
    MINUSMINUS      reduce using rule 27 (statement -> pppragma_directive .)
    PLUSPLUS        reduce using rule 27 (statement -> pppragma_directive .)
    UNION           reduce using rule 27 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 27 (statement -> pppragma_directive .)
    LNOT            reduce using rule 27 (statement -> pppragma_directive .)
    NOT             reduce using rule 27 (statement -> pppragma_directive .)
    MINUS           reduce using rule 27 (statement -> pppragma_directive .)
    PLUS            reduce using rule 27 (statement -> pppragma_directive .)
    TIMES           reduce using rule 27 (statement -> pppragma_directive .)
    AND             reduce using rule 27 (statement -> pppragma_directive .)
    OFFSETOF        reduce using rule 27 (statement -> pppragma_directive .)
    U32STRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    U16STRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    U8STRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 27 (statement -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 27 (statement -> pppragma_directive .)
    U32CHAR_CONST   reduce using rule 27 (statement -> pppragma_directive .)
    U16CHAR_CONST   reduce using rule 27 (statement -> pppragma_directive .)
    U8CHAR_CONST    reduce using rule 27 (statement -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 27 (statement -> pppragma_directive .)
    CHAR_CONST      reduce using rule 27 (statement -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 27 (statement -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 27 (statement -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 27 (statement -> pppragma_directive .)
    ;               reduce using rule 27 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 27 (statement -> pppragma_directive .)
    ELSE            reduce using rule 27 (statement -> pppragma_directive .)
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14

    pppragma_directive             shift and go to state 539
    _2_pppragma_directive_repeat   shift and go to state 540
    _2_pppragma_directive_items    shift and go to state 541
    _2_pppragma_directive_item     shift and go to state 542

state 460

    (274) iteration_statement -> WHILE LPAREN . expression RPAREN pragmacomp_or_statement
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression                     shift and go to state 543
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 461

    (268) selection_statement -> SWITCH LPAREN . expression RPAREN pragmacomp_or_statement
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression                     shift and go to state 544
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 462

    (269) selection_statement -> IF LPAREN . expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> IF LPAREN . expression RPAREN pragmacomp_or_statement
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression                     shift and go to state 545
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 463

    (265) labeled_statement -> DEFAULT : . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    pragmacomp_or_statement        shift and go to state 546
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 464

    (266) labeled_statement -> CASE constant_expression . : pragmacomp_or_statement
    :               shift and go to state 547


state 465

    (202) parameter_type_list -> parameter_list , ELLIPSIS .
    RPAREN          reduce using rule 202 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 466

    (218) _15_222c22_identifier_items -> _15_222c22_identifier_items _15_222c22_identifier_item .
    ,               reduce using rule 218 (_15_222c22_identifier_items -> _15_222c22_identifier_items _15_222c22_identifier_item .)
    RPAREN          reduce using rule 218 (_15_222c22_identifier_items -> _15_222c22_identifier_items _15_222c22_identifier_item .)


state 467

    (220) _15_222c22_identifier_item -> , identifier .
    ,               reduce using rule 220 (_15_222c22_identifier_item -> , identifier .)
    RPAREN          reduce using rule 220 (_15_222c22_identifier_item -> , identifier .)


state 468

    (209) _14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_items _14_222c22_parameter_declaration_item .
    ,               reduce using rule 209 (_14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_items _14_222c22_parameter_declaration_item .)
    RPAREN          reduce using rule 209 (_14_222c22_parameter_declaration_items -> _14_222c22_parameter_declaration_items _14_222c22_parameter_declaration_item .)


state 469

    (211) _14_222c22_parameter_declaration_item -> , parameter_declaration .
    ,               reduce using rule 211 (_14_222c22_parameter_declaration_item -> , parameter_declaration .)
    RPAREN          reduce using rule 211 (_14_222c22_parameter_declaration_item -> , parameter_declaration .)


state 470

    (167) typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .
    (185) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN identifier_list_opt RPAREN
    (186) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN parameter_type_list RPAREN
    (187) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (190) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    ,               reduce using rule 167 (typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .)
    RPAREN          reduce using rule 167 (typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .)
    LPAREN          shift and go to state 472
    LBRACKET        shift and go to state 473


state 471

    (247) abstract_declarator -> pointer direct_abstract_declarator .
    (252) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN
    (254) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (256) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    ,               reduce using rule 247 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 247 (abstract_declarator -> pointer direct_abstract_declarator .)
    LPAREN          shift and go to state 479
    LBRACKET        shift and go to state 480


state 472

    (185) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN . identifier_list_opt RPAREN
    (186) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN . parameter_type_list RPAREN
    (221) identifier_list_opt -> . identifier_list
    (222) identifier_list_opt -> . empty
    (202) parameter_type_list -> . parameter_list , ELLIPSIS
    (203) parameter_type_list -> . parameter_list
    (215) identifier_list -> . identifier _15_222c22_identifier_repeat
    (393) empty -> .
    (206) parameter_list -> . parameter_declaration _14_222c22_parameter_declaration_repeat
    (368) identifier -> . ID
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RPAREN          reduce using rule 393 (empty -> .)
    ID              shift and go to state 142
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    identifier_list_opt            shift and go to state 548
    parameter_type_list            shift and go to state 549
    identifier_list                shift and go to state 193
    empty                          shift and go to state 194
    parameter_list                 shift and go to state 195
    identifier                     shift and go to state 196
    parameter_declaration          shift and go to state 197
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 473

    (187) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (190) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    STATIC          shift and go to state 552
    TIMES           reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    RBRACKET        reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 550
    type_qualifier_list            shift and go to state 551
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 474

    (251) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN
    RPAREN          shift and go to state 553


state 475

    (257) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN
    RPAREN          shift and go to state 554


state 476

    (163) id_declarator -> pointer . direct_id_declarator
    (247) abstract_declarator -> pointer . direct_abstract_declarator
    (248) abstract_declarator -> pointer .
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    (251) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (252) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (253) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (254) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (255) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (256) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (257) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    RPAREN          reduce using rule 248 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 337
    ID              shift and go to state 34
    LBRACKET        shift and go to state 339

    direct_id_declarator           shift and go to state 107
    direct_abstract_declarator     shift and go to state 471

state 477

    (204) parameter_type_list_opt -> parameter_type_list .
    RPAREN          reduce using rule 204 (parameter_type_list_opt -> parameter_type_list .)


state 478

    (205) parameter_type_list_opt -> empty .
    RPAREN          reduce using rule 205 (parameter_type_list_opt -> empty .)


state 479

    (252) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (204) parameter_type_list_opt -> . parameter_type_list
    (205) parameter_type_list_opt -> . empty
    (202) parameter_type_list -> . parameter_list , ELLIPSIS
    (203) parameter_type_list -> . parameter_list
    (393) empty -> .
    (206) parameter_list -> . parameter_declaration _14_222c22_parameter_declaration_repeat
    (212) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (213) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (214) parameter_declaration -> . declaration_specifiers id_declarator
    (54) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (55) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (56) declaration_specifiers -> . type_specifier
    (57) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (58) declaration_specifiers -> . declaration_specifiers function_specifier
    (59) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (60) declaration_specifiers -> . declaration_specifiers type_qualifier
    (47) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (48) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (49) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (50) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (51) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (81) type_specifier -> . atomic_specifier
    (82) type_specifier -> . type_specifier_no_typeid
    (83) type_specifier -> . struct_or_union_specifier
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . typedef_name
    (156) alignment_specifier -> . ALIGNAS_ LPAREN constant_expression RPAREN
    (157) alignment_specifier -> . ALIGNAS_ LPAREN type_name RPAREN
    (86) atomic_specifier -> . ATOMIC_ LPAREN type_name RPAREN
    (67) function_specifier -> . NORETURN_
    (68) function_specifier -> . INLINE
    (61) storage_class_specifier -> . THREAD_LOCAL_
    (62) storage_class_specifier -> . TYPEDEF
    (63) storage_class_specifier -> . EXTERN
    (64) storage_class_specifier -> . STATIC
    (65) storage_class_specifier -> . REGISTER
    (66) storage_class_specifier -> . AUTO
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    (69) type_specifier_no_typeid -> . INT128
    (70) type_specifier_no_typeid -> . UNSIGNED
    (71) type_specifier_no_typeid -> . SIGNED
    (72) type_specifier_no_typeid -> . COMPLEX_
    (73) type_specifier_no_typeid -> . DOUBLE
    (74) type_specifier_no_typeid -> . FLOAT
    (75) type_specifier_no_typeid -> . LONG
    (76) type_specifier_no_typeid -> . INT
    (77) type_specifier_no_typeid -> . SHORT
    (78) type_specifier_no_typeid -> . CHAR
    (79) type_specifier_no_typeid -> . BOOL_
    (80) type_specifier_no_typeid -> . VOID
    (115) struct_or_union_specifier -> . struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close
    (118) struct_or_union_specifier -> . struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close
    (121) struct_or_union_specifier -> . struct_or_union brace_open _9_struct_declaration_list_optional brace_close
    (124) struct_or_union_specifier -> . struct_or_union TYPEID
    (125) struct_or_union_specifier -> . struct_or_union ID
    (148) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (150) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (151) enum_specifier -> . ENUM TYPEID
    (152) enum_specifier -> . ENUM ID
    (285) typedef_name -> . TYPEID
    (126) struct_or_union -> . UNION
    (127) struct_or_union -> . STRUCT
    RPAREN          reduce using rule 393 (empty -> .)
    ALIGNAS_        shift and go to state 35
    ATOMIC_         shift and go to state 36
    NORETURN_       shift and go to state 37
    INLINE          shift and go to state 38
    THREAD_LOCAL_   shift and go to state 39
    TYPEDEF         shift and go to state 40
    EXTERN          shift and go to state 41
    STATIC          shift and go to state 33
    REGISTER        shift and go to state 42
    AUTO            shift and go to state 43
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46
    INT128          shift and go to state 47
    UNSIGNED        shift and go to state 48
    SIGNED          shift and go to state 49
    COMPLEX_        shift and go to state 50
    DOUBLE          shift and go to state 51
    FLOAT           shift and go to state 52
    LONG            shift and go to state 53
    INT             shift and go to state 54
    SHORT           shift and go to state 55
    CHAR            shift and go to state 56
    BOOL_           shift and go to state 57
    VOID            shift and go to state 58
    ENUM            shift and go to state 61
    TYPEID          shift and go to state 60
    UNION           shift and go to state 62
    STRUCT          shift and go to state 63

    parameter_type_list_opt        shift and go to state 555
    parameter_type_list            shift and go to state 477
    empty                          shift and go to state 478
    parameter_list                 shift and go to state 195
    parameter_declaration          shift and go to state 197
    declaration_specifiers         shift and go to state 198
    alignment_specifier            shift and go to state 20
    declaration_specifiers_no_type shift and go to state 199
    type_specifier                 shift and go to state 21
    type_specifier_no_typeid       shift and go to state 22
    function_specifier             shift and go to state 23
    storage_class_specifier        shift and go to state 24
    type_qualifier                 shift and go to state 25
    atomic_specifier               shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    enum_specifier                 shift and go to state 30
    typedef_name                   shift and go to state 31
    struct_or_union                shift and go to state 59

state 480

    (254) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (256) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression_opt RBRACKET
    (289) assignment_expression_opt -> . assignment_expression
    (290) assignment_expression_opt -> . empty
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (393) empty -> .
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    TIMES           shift and go to state 556
    LPAREN          shift and go to state 229
    RBRACKET        reduce using rule 393 (empty -> .)
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression_opt      shift and go to state 557
    assignment_expression          shift and go to state 343
    empty                          shift and go to state 344
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 481

    (253) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    RBRACKET        shift and go to state 558


state 482

    (255) direct_abstract_declarator -> LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (289) assignment_expression_opt -> . assignment_expression
    (290) assignment_expression_opt -> . empty
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (393) empty -> .
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    RBRACKET        reduce using rule 393 (empty -> .)
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression_opt      shift and go to state 559
    assignment_expression          shift and go to state 343
    empty                          shift and go to state 344
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 483

    (171) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .
    LPAREN          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACKET        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ALIGNAS_        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ATOMIC_         reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    NORETURN_       reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INLINE          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    THREAD_LOCAL_   reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEDEF         reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EXTERN          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STATIC          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    REGISTER        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    AUTO            reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOLATILE        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RESTRICT        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CONST           reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INT128          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNSIGNED        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SIGNED          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMPLEX_        reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    DOUBLE          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    FLOAT           reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LONG            reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INT             reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SHORT           reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CHAR            reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    BOOL_           reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOID            reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ENUM            reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEID          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNION           reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STRUCT          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACE          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ,               reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ;               reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    :               reduce using rule 171 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 484

    (174) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .
    LPAREN          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ALIGNAS_        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ATOMIC_         reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    NORETURN_       reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INLINE          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    THREAD_LOCAL_   reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RESTRICT        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INT128          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMPLEX_        reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INT             reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    BOOL_           reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNION           reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ,               reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ;               reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    :               reduce using rule 174 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 485

    (172) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET
    RBRACKET        shift and go to state 560


state 486

    (173) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET
    RBRACKET        shift and go to state 561


state 487

    (115) struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .
    ALIGNAS_        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    INT128          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    UNSIGNED        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    SIGNED          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    COMPLEX_        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    DOUBLE          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    FLOAT           reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    LONG            reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    INT             reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    SHORT           reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    CHAR            reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    BOOL_           reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    VOID            reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    NORETURN_       reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    INLINE          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    THREAD_LOCAL_   reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    TYPEDEF         reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    EXTERN          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    STATIC          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    REGISTER        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    AUTO            reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    ATOMIC_         reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    VOLATILE        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    RESTRICT        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    CONST           reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    TIMES           reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    LPAREN          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    ID              reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    TYPEID          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    ;               reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    LBRACKET        reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    ,               reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    RPAREN          reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)
    :               reduce using rule 115 (struct_or_union_specifier -> struct_or_union TYPEID brace_open _7_struct_declaration_list_optional brace_close .)


state 488

    (131) _10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .
    ;               reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    PRAGMA_         reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    PPPRAGMA        reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    ALIGNAS_        reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    ATOMIC_         reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    VOLATILE        reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    RESTRICT        reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    CONST           reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    INT128          reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    UNSIGNED        reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    SIGNED          reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    COMPLEX_        reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    DOUBLE          reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    FLOAT           reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    LONG            reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    INT             reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    SHORT           reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    CHAR            reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    BOOL_           reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    VOID            reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    ENUM            reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    TYPEID          reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    UNION           reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    STRUCT          reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)
    RBRACE          reduce using rule 131 (_10_struct_declaration_items -> _10_struct_declaration_items _10_struct_declaration_item .)


state 489

    (136) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .
    ;               reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    PRAGMA_         reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    PPPRAGMA        reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    ALIGNAS_        reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    ATOMIC_         reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    VOLATILE        reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    RESTRICT        reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    CONST           reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    INT128          reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    UNSIGNED        reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    SIGNED          reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    COMPLEX_        reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    DOUBLE          reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    FLOAT           reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    LONG            reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    INT             reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    SHORT           reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    CHAR            reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    BOOL_           reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    VOID            reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    ENUM            reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    TYPEID          reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    UNION           reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    STRUCT          reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)
    RBRACE          reduce using rule 136 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt ; .)


state 490

    (137) struct_declarator_list -> struct_declarator _11_222c22_struct_declarator_repeat .
    ;               reduce using rule 137 (struct_declarator_list -> struct_declarator _11_222c22_struct_declarator_repeat .)


state 491

    (138) _11_222c22_struct_declarator_repeat -> _11_222c22_struct_declarator_items .
    (140) _11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_items . _11_222c22_struct_declarator_item
    (142) _11_222c22_struct_declarator_item -> . , struct_declarator
    ;               reduce using rule 138 (_11_222c22_struct_declarator_repeat -> _11_222c22_struct_declarator_items .)
    ,               shift and go to state 493

    _11_222c22_struct_declarator_item shift and go to state 562

state 492

    (141) _11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_item .
    ,               reduce using rule 141 (_11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_item .)
    ;               reduce using rule 141 (_11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_item .)


state 493

    (142) _11_222c22_struct_declarator_item -> , . struct_declarator
    (145) struct_declarator -> . : constant_expression
    (146) struct_declarator -> . declarator : constant_expression
    (147) struct_declarator -> . declarator
    (161) declarator -> . typeid_declarator
    (162) declarator -> . id_declarator
    (165) typeid_declarator -> . pointer direct_typeid_declarator
    (166) typeid_declarator -> . direct_typeid_declarator
    (163) id_declarator -> . pointer direct_id_declarator
    (164) id_declarator -> . direct_id_declarator
    (192) pointer -> . TIMES type_qualifier_list_opt pointer
    (193) pointer -> . TIMES type_qualifier_list_opt
    (177) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN
    (178) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (179) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (180) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (181) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (182) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (183) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (184) direct_typeid_declarator -> . TYPEID
    (169) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (170) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (171) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (172) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (173) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (174) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (175) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (176) direct_id_declarator -> . ID
    :               shift and go to state 370
    TIMES           shift and go to state 32
    LPAREN          shift and go to state 185
    TYPEID          shift and go to state 86
    ID              shift and go to state 34

    struct_declarator              shift and go to state 563
    declarator                     shift and go to state 371
    typeid_declarator              shift and go to state 84
    id_declarator                  shift and go to state 186
    pointer                        shift and go to state 187
    direct_typeid_declarator       shift and go to state 85
    direct_id_declarator           shift and go to state 27

state 494

    (145) struct_declarator -> : constant_expression .
    ,               reduce using rule 145 (struct_declarator -> : constant_expression .)
    ;               reduce using rule 145 (struct_declarator -> : constant_expression .)


state 495

    (146) struct_declarator -> declarator : . constant_expression
    (302) constant_expression -> . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    constant_expression            shift and go to state 564
    conditional_expression         shift and go to state 126
    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 496

    (118) struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .
    ALIGNAS_        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    INT128          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    UNSIGNED        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    SIGNED          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    COMPLEX_        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    DOUBLE          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    FLOAT           reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    LONG            reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    INT             reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    SHORT           reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    CHAR            reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    BOOL_           reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    VOID            reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    NORETURN_       reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    INLINE          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    THREAD_LOCAL_   reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    TYPEDEF         reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    EXTERN          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    STATIC          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    REGISTER        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    AUTO            reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    ATOMIC_         reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    VOLATILE        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    RESTRICT        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    CONST           reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    TIMES           reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    LPAREN          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    ID              reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    TYPEID          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    ;               reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    LBRACKET        reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    ,               reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    RPAREN          reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)
    :               reduce using rule 118 (struct_or_union_specifier -> struct_or_union ID brace_open _8_struct_declaration_list_optional brace_close .)


state 497

    (148) enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .
    ALIGNAS_        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INT128          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COMPLEX_        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INT             reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    BOOL_           reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    NORETURN_       reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    THREAD_LOCAL_   reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ATOMIC_         reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    CONST           reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ID              reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ;               reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ,               reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    :               reduce using rule 148 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)


state 498

    (153) enumerator_list -> enumerator_list , enumerator .
    ,               reduce using rule 153 (enumerator_list -> enumerator_list , enumerator .)
    RBRACE          reduce using rule 153 (enumerator_list -> enumerator_list , enumerator .)


state 499

    (159) _12_EQUALS_constant_expression_optional -> EQUALS constant_expression .
    ,               reduce using rule 159 (_12_EQUALS_constant_expression_optional -> EQUALS constant_expression .)
    RBRACE          reduce using rule 159 (_12_EQUALS_constant_expression_optional -> EQUALS constant_expression .)


state 500

    (149) enum_specifier -> ENUM ID brace_open enumerator_list brace_close .
    ALIGNAS_        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT128          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COMPLEX_        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT             reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    BOOL_           reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    NORETURN_       reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    THREAD_LOCAL_   reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ATOMIC_         reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CONST           reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ID              reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ;               reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ,               reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    :               reduce using rule 149 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)


state 501

    (288) assignment_expression -> LPAREN compound_statement RPAREN .
    RPAREN          reduce using rule 288 (assignment_expression -> LPAREN compound_statement RPAREN .)
    ,               reduce using rule 288 (assignment_expression -> LPAREN compound_statement RPAREN .)
    ;               reduce using rule 288 (assignment_expression -> LPAREN compound_statement RPAREN .)
    RBRACKET        reduce using rule 288 (assignment_expression -> LPAREN compound_statement RPAREN .)
    :               reduce using rule 288 (assignment_expression -> LPAREN compound_statement RPAREN .)
    RBRACE          reduce using rule 288 (assignment_expression -> LPAREN compound_statement RPAREN .)


state 502

    (339) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list _18_222c22_optional brace_close
    (324) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (391) brace_open -> . LBRACE
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    brace_open                     shift and go to state 504
    cast_expression                shift and go to state 503
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 503

    (324) cast_expression -> LPAREN type_name RPAREN cast_expression .
    CONDOP          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ,               reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ;               reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    :               reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 324 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 504

    (339) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list _18_222c22_optional brace_close
    (226) initializer_list -> . designation_opt initializer _16_222c22_designation_opt_initializer_repeat
    (235) designation_opt -> . designation
    (236) designation_opt -> . empty
    (234) designation -> . designator_list EQUALS
    (393) empty -> .
    (237) designator_list -> . designator _17_designator_repeat
    (243) designator -> . . identifier
    (244) designator -> . LBRACKET constant_expression RBRACKET
    LBRACE          reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    .               shift and go to state 437
    LBRACKET        shift and go to state 438

    initializer_list               shift and go to state 565
    designation_opt                shift and go to state 432
    designation                    shift and go to state 434
    empty                          shift and go to state 566
    designator_list                shift and go to state 435
    designator                     shift and go to state 436

state 505

    (281) expression -> expression , assignment_expression .
    RPAREN          reduce using rule 281 (expression -> expression , assignment_expression .)
    ,               reduce using rule 281 (expression -> expression , assignment_expression .)
    ;               reduce using rule 281 (expression -> expression , assignment_expression .)
    :               reduce using rule 281 (expression -> expression , assignment_expression .)
    RBRACKET        reduce using rule 281 (expression -> expression , assignment_expression .)


state 506

    (286) assignment_expression -> unary_expression assignment_operator assignment_expression .
    RPAREN          reduce using rule 286 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 286 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ;               reduce using rule 286 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 286 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 286 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 286 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 507

    (303) conditional_expression -> binary_expression CONDOP expression : . conditional_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 124
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    binary_expression              shift and go to state 127
    conditional_expression         shift and go to state 567
    cast_expression                shift and go to state 132
    unary_expression               shift and go to state 133
    unary_operator                 shift and go to state 136
    postfix_expression             shift and go to state 139
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 508

    (326) unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .
    CONDOP          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    LOR             reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    LAND            reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    XOR             reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    OR              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    AND             reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    NE              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    EQ              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    GT              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    GE              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    LE              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    LT              reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    MINUS           reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    PLUS            reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    MOD             reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    TIMES           reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    ,               reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    ;               reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    :               reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 326 (unary_expression -> ALIGNOF_ LPAREN type_name RPAREN .)


state 509

    (327) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (339) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list _18_222c22_optional brace_close
    (391) brace_open -> . LBRACE
    CONDOP          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ,               reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ;               reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    :               reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 327 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 504

state 510

    (339) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list _18_222c22_optional brace_close
    (391) brace_open -> . LBRACE
    LBRACE          shift and go to state 120

    brace_open                     shift and go to state 504

state 511

    (348) postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .
    MINUSMINUS      reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    PLUSPLUS        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    ARROW           reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    .               reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LPAREN          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LBRACKET        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    CONDOP          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LOR             reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LAND            reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    XOR             reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    OR              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    AND             reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    NE              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    EQ              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    GT              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    GE              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LE              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LT              reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LSHIFT          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    RSHIFT          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    MINUS           reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    PLUS            reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    MOD             reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    DIVIDE          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    TIMES           reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    ,               reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    RPAREN          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    OREQUAL         reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    ANDEQUAL        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    RSHIFTEQUAL     reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    LSHIFTEQUAL     reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    MINUSEQUAL      reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    PLUSEQUAL       reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    MODEQUAL        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    DIVEQUAL        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    TIMESEQUAL      reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    XOREQUAL        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    EQUALS          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    ;               reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    RBRACKET        reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    :               reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)
    RBRACE          reduce using rule 348 (postfix_expression -> postfix_expression LPAREN _19_argument_expression_list_optional RPAREN .)


state 512

    (362) argument_expression_list -> assignment_expression _20_222c22_assignment_expression_repeat .
    RPAREN          reduce using rule 362 (argument_expression_list -> assignment_expression _20_222c22_assignment_expression_repeat .)


state 513

    (363) _20_222c22_assignment_expression_repeat -> _20_222c22_assignment_expression_items .
    (365) _20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_items . _20_222c22_assignment_expression_item
    (367) _20_222c22_assignment_expression_item -> . , assignment_expression
    RPAREN          reduce using rule 363 (_20_222c22_assignment_expression_repeat -> _20_222c22_assignment_expression_items .)
    ,               shift and go to state 515

    _20_222c22_assignment_expression_item shift and go to state 568

state 514

    (366) _20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_item .
    ,               reduce using rule 366 (_20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_item .)
    RPAREN          reduce using rule 366 (_20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_item .)


state 515

    (367) _20_222c22_assignment_expression_item -> , . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 569
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 516

    (351) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .
    MINUSMINUS      reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    .               reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ,               reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ;               reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    :               reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 351 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 517

    (353) primary_expression -> OFFSETOF LPAREN type_name , . offsetof_member_designator RPAREN
    (359) offsetof_member_designator -> . offsetof_member_designator LBRACKET expression RBRACKET
    (360) offsetof_member_designator -> . offsetof_member_designator . identifier
    (361) offsetof_member_designator -> . identifier
    (368) identifier -> . ID
    ID              shift and go to state 142

    offsetof_member_designator     shift and go to state 570
    identifier                     shift and go to state 571

state 518

    (223) initializer -> brace_open initializer_list , . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 572

state 519

    (224) initializer -> brace_open initializer_list_opt brace_close .
    ,               reduce using rule 224 (initializer -> brace_open initializer_list_opt brace_close .)
    ;               reduce using rule 224 (initializer -> brace_open initializer_list_opt brace_close .)
    RBRACE          reduce using rule 224 (initializer -> brace_open initializer_list_opt brace_close .)


state 520

    (226) initializer_list -> designation_opt initializer . _16_222c22_designation_opt_initializer_repeat
    (227) _16_222c22_designation_opt_initializer_repeat -> . _16_222c22_designation_opt_initializer_items
    (228) _16_222c22_designation_opt_initializer_repeat -> .
    (229) _16_222c22_designation_opt_initializer_items -> . _16_222c22_designation_opt_initializer_items _16_222c22_designation_opt_initializer_item
    (230) _16_222c22_designation_opt_initializer_items -> . _16_222c22_designation_opt_initializer_item
    (231) _16_222c22_designation_opt_initializer_item -> . , designation_opt initializer
  ! shift/reduce conflict for , resolved as shift
    RBRACE          reduce using rule 228 (_16_222c22_designation_opt_initializer_repeat -> .)
    ,               shift and go to state 576

    _16_222c22_designation_opt_initializer_repeat shift and go to state 573
    _16_222c22_designation_opt_initializer_items shift and go to state 574
    _16_222c22_designation_opt_initializer_item shift and go to state 575

state 521

    (234) designation -> designator_list EQUALS .
    LBRACE          reduce using rule 234 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 234 (designation -> designator_list EQUALS .)
    ALIGNOF_        reduce using rule 234 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 234 (designation -> designator_list EQUALS .)
    MINUSMINUS      reduce using rule 234 (designation -> designator_list EQUALS .)
    PLUSPLUS        reduce using rule 234 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 234 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 234 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 234 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 234 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 234 (designation -> designator_list EQUALS .)
    AND             reduce using rule 234 (designation -> designator_list EQUALS .)
    OFFSETOF        reduce using rule 234 (designation -> designator_list EQUALS .)
    U32STRING_LITERAL reduce using rule 234 (designation -> designator_list EQUALS .)
    U16STRING_LITERAL reduce using rule 234 (designation -> designator_list EQUALS .)
    U8STRING_LITERAL reduce using rule 234 (designation -> designator_list EQUALS .)
    WSTRING_LITERAL reduce using rule 234 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 234 (designation -> designator_list EQUALS .)
    U32CHAR_CONST   reduce using rule 234 (designation -> designator_list EQUALS .)
    U16CHAR_CONST   reduce using rule 234 (designation -> designator_list EQUALS .)
    U8CHAR_CONST    reduce using rule 234 (designation -> designator_list EQUALS .)
    WCHAR_CONST     reduce using rule 234 (designation -> designator_list EQUALS .)
    CHAR_CONST      reduce using rule 234 (designation -> designator_list EQUALS .)
    HEX_FLOAT_CONST reduce using rule 234 (designation -> designator_list EQUALS .)
    FLOAT_CONST     reduce using rule 234 (designation -> designator_list EQUALS .)
    INT_CONST_CHAR  reduce using rule 234 (designation -> designator_list EQUALS .)
    INT_CONST_BIN   reduce using rule 234 (designation -> designator_list EQUALS .)
    INT_CONST_HEX   reduce using rule 234 (designation -> designator_list EQUALS .)
    INT_CONST_OCT   reduce using rule 234 (designation -> designator_list EQUALS .)
    INT_CONST_DEC   reduce using rule 234 (designation -> designator_list EQUALS .)
    ID              reduce using rule 234 (designation -> designator_list EQUALS .)


state 522

    (242) _17_designator_item -> designator .
    .               reduce using rule 242 (_17_designator_item -> designator .)
    LBRACKET        reduce using rule 242 (_17_designator_item -> designator .)
    EQUALS          reduce using rule 242 (_17_designator_item -> designator .)


state 523

    (237) designator_list -> designator _17_designator_repeat .
    EQUALS          reduce using rule 237 (designator_list -> designator _17_designator_repeat .)


state 524

    (238) _17_designator_repeat -> _17_designator_items .
    (240) _17_designator_items -> _17_designator_items . _17_designator_item
    (242) _17_designator_item -> . designator
    (243) designator -> . . identifier
    (244) designator -> . LBRACKET constant_expression RBRACKET
    EQUALS          reduce using rule 238 (_17_designator_repeat -> _17_designator_items .)
    .               shift and go to state 437
    LBRACKET        shift and go to state 438

    _17_designator_item            shift and go to state 577
    designator                     shift and go to state 522

state 525

    (241) _17_designator_items -> _17_designator_item .
    .               reduce using rule 241 (_17_designator_items -> _17_designator_item .)
    LBRACKET        reduce using rule 241 (_17_designator_items -> _17_designator_item .)
    EQUALS          reduce using rule 241 (_17_designator_items -> _17_designator_item .)


state 526

    (243) designator -> . identifier .
    .               reduce using rule 243 (designator -> . identifier .)
    LBRACKET        reduce using rule 243 (designator -> . identifier .)
    EQUALS          reduce using rule 243 (designator -> . identifier .)


state 527

    (244) designator -> LBRACKET constant_expression . RBRACKET
    RBRACKET        shift and go to state 578


state 528

    (179) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .
    LPAREN          reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACKET        reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ,               reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ;               reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    :               reduce using rule 179 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 529

    (182) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .
    LPAREN          reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ,               reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ;               reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    :               reduce using rule 182 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 530

    (180) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET
    RBRACKET        shift and go to state 579


state 531

    (181) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET
    RBRACKET        shift and go to state 580


state 532

    (276) jump_statement -> RETURN expression ; .
    STATIC_ASSERT_  reduce using rule 276 (jump_statement -> RETURN expression ; .)
    PRAGMA_         reduce using rule 276 (jump_statement -> RETURN expression ; .)
    PPPRAGMA        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    GOTO            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 276 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 276 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 276 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 276 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ID              reduce using rule 276 (jump_statement -> RETURN expression ; .)
    LBRACE          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ALIGNAS_        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ATOMIC_         reduce using rule 276 (jump_statement -> RETURN expression ; .)
    NORETURN_       reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INLINE          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    THREAD_LOCAL_   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    TYPEDEF         reduce using rule 276 (jump_statement -> RETURN expression ; .)
    EXTERN          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    STATIC          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    REGISTER        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    AUTO            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    VOLATILE        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    RESTRICT        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    CONST           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    LPAREN          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT128          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    COMPLEX_        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    LONG            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 276 (jump_statement -> RETURN expression ; .)
    SHORT           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    BOOL_           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ENUM            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    TYPEID          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ALIGNOF_        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    MINUSMINUS      reduce using rule 276 (jump_statement -> RETURN expression ; .)
    PLUSPLUS        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    UNION           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    LNOT            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    NOT             reduce using rule 276 (jump_statement -> RETURN expression ; .)
    MINUS           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    PLUS            reduce using rule 276 (jump_statement -> RETURN expression ; .)
    TIMES           reduce using rule 276 (jump_statement -> RETURN expression ; .)
    AND             reduce using rule 276 (jump_statement -> RETURN expression ; .)
    OFFSETOF        reduce using rule 276 (jump_statement -> RETURN expression ; .)
    U32STRING_LITERAL reduce using rule 276 (jump_statement -> RETURN expression ; .)
    U16STRING_LITERAL reduce using rule 276 (jump_statement -> RETURN expression ; .)
    U8STRING_LITERAL reduce using rule 276 (jump_statement -> RETURN expression ; .)
    WSTRING_LITERAL reduce using rule 276 (jump_statement -> RETURN expression ; .)
    STRING_LITERAL  reduce using rule 276 (jump_statement -> RETURN expression ; .)
    U32CHAR_CONST   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    U16CHAR_CONST   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    U8CHAR_CONST    reduce using rule 276 (jump_statement -> RETURN expression ; .)
    WCHAR_CONST     reduce using rule 276 (jump_statement -> RETURN expression ; .)
    CHAR_CONST      reduce using rule 276 (jump_statement -> RETURN expression ; .)
    HEX_FLOAT_CONST reduce using rule 276 (jump_statement -> RETURN expression ; .)
    FLOAT_CONST     reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT_CONST_CHAR  reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT_CONST_BIN   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT_CONST_HEX   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT_CONST_OCT   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    INT_CONST_DEC   reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 276 (jump_statement -> RETURN expression ; .)
    RBRACE          reduce using rule 276 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 276 (jump_statement -> RETURN expression ; .)


state 533

    (279) jump_statement -> GOTO ID ; .
    STATIC_ASSERT_  reduce using rule 279 (jump_statement -> GOTO ID ; .)
    PRAGMA_         reduce using rule 279 (jump_statement -> GOTO ID ; .)
    PPPRAGMA        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    RETURN          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    CONTINUE        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    BREAK           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    GOTO            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    FOR             reduce using rule 279 (jump_statement -> GOTO ID ; .)
    DO              reduce using rule 279 (jump_statement -> GOTO ID ; .)
    WHILE           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    SWITCH          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    IF              reduce using rule 279 (jump_statement -> GOTO ID ; .)
    DEFAULT         reduce using rule 279 (jump_statement -> GOTO ID ; .)
    CASE            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ID              reduce using rule 279 (jump_statement -> GOTO ID ; .)
    LBRACE          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ALIGNAS_        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ATOMIC_         reduce using rule 279 (jump_statement -> GOTO ID ; .)
    NORETURN_       reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INLINE          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    THREAD_LOCAL_   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    TYPEDEF         reduce using rule 279 (jump_statement -> GOTO ID ; .)
    EXTERN          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    STATIC          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    REGISTER        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    AUTO            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    VOLATILE        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    RESTRICT        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    CONST           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    LPAREN          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT128          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    UNSIGNED        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    SIGNED          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    COMPLEX_        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    DOUBLE          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    FLOAT           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    LONG            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT             reduce using rule 279 (jump_statement -> GOTO ID ; .)
    SHORT           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    CHAR            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    BOOL_           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    VOID            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ENUM            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    TYPEID          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ALIGNOF_        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    SIZEOF          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    MINUSMINUS      reduce using rule 279 (jump_statement -> GOTO ID ; .)
    PLUSPLUS        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    UNION           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    STRUCT          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    LNOT            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    NOT             reduce using rule 279 (jump_statement -> GOTO ID ; .)
    MINUS           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    PLUS            reduce using rule 279 (jump_statement -> GOTO ID ; .)
    TIMES           reduce using rule 279 (jump_statement -> GOTO ID ; .)
    AND             reduce using rule 279 (jump_statement -> GOTO ID ; .)
    OFFSETOF        reduce using rule 279 (jump_statement -> GOTO ID ; .)
    U32STRING_LITERAL reduce using rule 279 (jump_statement -> GOTO ID ; .)
    U16STRING_LITERAL reduce using rule 279 (jump_statement -> GOTO ID ; .)
    U8STRING_LITERAL reduce using rule 279 (jump_statement -> GOTO ID ; .)
    WSTRING_LITERAL reduce using rule 279 (jump_statement -> GOTO ID ; .)
    STRING_LITERAL  reduce using rule 279 (jump_statement -> GOTO ID ; .)
    U32CHAR_CONST   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    U16CHAR_CONST   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    U8CHAR_CONST    reduce using rule 279 (jump_statement -> GOTO ID ; .)
    WCHAR_CONST     reduce using rule 279 (jump_statement -> GOTO ID ; .)
    CHAR_CONST      reduce using rule 279 (jump_statement -> GOTO ID ; .)
    HEX_FLOAT_CONST reduce using rule 279 (jump_statement -> GOTO ID ; .)
    FLOAT_CONST     reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT_CONST_CHAR  reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT_CONST_BIN   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT_CONST_HEX   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT_CONST_OCT   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    INT_CONST_DEC   reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ;               reduce using rule 279 (jump_statement -> GOTO ID ; .)
    RBRACE          reduce using rule 279 (jump_statement -> GOTO ID ; .)
    ELSE            reduce using rule 279 (jump_statement -> GOTO ID ; .)


state 534

    (267) labeled_statement -> ID : pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    RETURN          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    CONTINUE        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    BREAK           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    GOTO            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    FOR             reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    DO              reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    WHILE           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    SWITCH          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    IF              reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    DEFAULT         reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    CASE            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ID              reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    LBRACE          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    NORETURN_       reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INLINE          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    EXTERN          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    STATIC          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    REGISTER        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    AUTO            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    VOLATILE        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    RESTRICT        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    CONST           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    LPAREN          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT128          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    SIGNED          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    DOUBLE          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    FLOAT           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    LONG            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT             reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    SHORT           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    CHAR            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    BOOL_           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    VOID            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ENUM            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    TYPEID          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    SIZEOF          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    UNION           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    STRUCT          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    LNOT            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    NOT             reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    MINUS           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    PLUS            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    TIMES           reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    AND             reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ;               reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    RBRACE          reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)
    ELSE            reduce using rule 267 (labeled_statement -> ID : pragmacomp_or_statement .)


state 535

    (271) iteration_statement -> FOR LPAREN declaration . expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression_opt                 shift and go to state 581
    expression                     shift and go to state 303
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 536

    (272) iteration_statement -> FOR LPAREN expression_opt . ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    ;               shift and go to state 582


state 537

    (273) iteration_statement -> DO pragmacomp_or_statement WHILE . LPAREN expression RPAREN ;
    LPAREN          shift and go to state 583


state 538

    (35) pragmacomp_or_statement -> pppragma_directive_list statement .
    WHILE           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STATIC_ASSERT_  reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PRAGMA_         reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PPPRAGMA        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    RETURN          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CONTINUE        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    BREAK           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    GOTO            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    FOR             reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    DO              reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SWITCH          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    IF              reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    DEFAULT         reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CASE            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ID              reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LBRACE          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ALIGNAS_        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ATOMIC_         reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    NORETURN_       reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INLINE          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    THREAD_LOCAL_   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    TYPEDEF         reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    EXTERN          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STATIC          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    REGISTER        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    AUTO            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    VOLATILE        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    RESTRICT        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CONST           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LPAREN          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT128          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    UNSIGNED        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SIGNED          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    COMPLEX_        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    DOUBLE          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    FLOAT           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LONG            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT             reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SHORT           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CHAR            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    BOOL_           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    VOID            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ENUM            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    TYPEID          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ALIGNOF_        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SIZEOF          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    MINUSMINUS      reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PLUSPLUS        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    UNION           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STRUCT          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LNOT            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    NOT             reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    MINUS           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PLUS            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    TIMES           reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    AND             reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    OFFSETOF        reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U32STRING_LITERAL reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U16STRING_LITERAL reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U8STRING_LITERAL reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    WSTRING_LITERAL reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STRING_LITERAL  reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U32CHAR_CONST   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U16CHAR_CONST   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U8CHAR_CONST    reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    WCHAR_CONST     reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CHAR_CONST      reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    HEX_FLOAT_CONST reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    FLOAT_CONST     reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_CHAR  reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_BIN   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_HEX   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_OCT   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_DEC   reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ;               reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    RBRACE          reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ELSE            reduce using rule 35 (pragmacomp_or_statement -> pppragma_directive_list statement .)


state 539

    (23) _2_pppragma_directive_item -> pppragma_directive .
    PRAGMA_         reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    PPPRAGMA        reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    STATIC_ASSERT_  reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    RETURN          reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    CONTINUE        reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    BREAK           reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    GOTO            reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    FOR             reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    DO              reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    WHILE           reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    SWITCH          reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    IF              reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    DEFAULT         reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    CASE            reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    ID              reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    LBRACE          reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    LPAREN          reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    ALIGNOF_        reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    SIZEOF          reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    MINUSMINUS      reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    PLUSPLUS        reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    LNOT            reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    NOT             reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    MINUS           reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    PLUS            reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    TIMES           reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    AND             reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    OFFSETOF        reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    U32STRING_LITERAL reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    U16STRING_LITERAL reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    U8STRING_LITERAL reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    U32CHAR_CONST   reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    U16CHAR_CONST   reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    U8CHAR_CONST    reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    CHAR_CONST      reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)
    ;               reduce using rule 23 (_2_pppragma_directive_item -> pppragma_directive .)


state 540

    (18) pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .
    STATIC_ASSERT_  reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    PRAGMA_         reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    PPPRAGMA        reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    RETURN          reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    CONTINUE        reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    BREAK           reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    GOTO            reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    FOR             reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    DO              reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    WHILE           reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    SWITCH          reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    IF              reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    DEFAULT         reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    CASE            reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    ID              reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    LBRACE          reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    LPAREN          reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    ALIGNOF_        reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    SIZEOF          reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    MINUSMINUS      reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    PLUSPLUS        reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    LNOT            reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    NOT             reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    MINUS           reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    PLUS            reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    TIMES           reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    AND             reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    OFFSETOF        reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    U32STRING_LITERAL reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    U16STRING_LITERAL reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    U8STRING_LITERAL reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    WSTRING_LITERAL reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    STRING_LITERAL  reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    U32CHAR_CONST   reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    U16CHAR_CONST   reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    U8CHAR_CONST    reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    WCHAR_CONST     reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    CHAR_CONST      reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    HEX_FLOAT_CONST reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    FLOAT_CONST     reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    INT_CONST_CHAR  reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    INT_CONST_BIN   reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    INT_CONST_HEX   reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    INT_CONST_OCT   reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    INT_CONST_DEC   reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)
    ;               reduce using rule 18 (pppragma_directive_list -> pppragma_directive _2_pppragma_directive_repeat .)


state 541

    (19) _2_pppragma_directive_repeat -> _2_pppragma_directive_items .
    (21) _2_pppragma_directive_items -> _2_pppragma_directive_items . _2_pppragma_directive_item
    (23) _2_pppragma_directive_item -> . pppragma_directive
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
  ! shift/reduce conflict for PRAGMA_ resolved as shift
  ! shift/reduce conflict for PPPRAGMA resolved as shift
    STATIC_ASSERT_  reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    RETURN          reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    CONTINUE        reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    BREAK           reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    GOTO            reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    FOR             reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    DO              reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    WHILE           reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    SWITCH          reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    IF              reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    DEFAULT         reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    CASE            reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    ID              reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    LBRACE          reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    LPAREN          reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    ALIGNOF_        reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    SIZEOF          reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    MINUSMINUS      reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    PLUSPLUS        reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    LNOT            reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    NOT             reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    MINUS           reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    PLUS            reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    TIMES           reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    AND             reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    OFFSETOF        reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    U32STRING_LITERAL reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    U16STRING_LITERAL reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    U8STRING_LITERAL reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    WSTRING_LITERAL reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    STRING_LITERAL  reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    U32CHAR_CONST   reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    U16CHAR_CONST   reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    U8CHAR_CONST    reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    WCHAR_CONST     reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    CHAR_CONST      reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    HEX_FLOAT_CONST reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    FLOAT_CONST     reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    INT_CONST_CHAR  reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    INT_CONST_BIN   reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    INT_CONST_HEX   reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    INT_CONST_OCT   reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    INT_CONST_DEC   reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    ;               reduce using rule 19 (_2_pppragma_directive_repeat -> _2_pppragma_directive_items .)
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14

    _2_pppragma_directive_item     shift and go to state 584
    pppragma_directive             shift and go to state 539

state 542

    (22) _2_pppragma_directive_items -> _2_pppragma_directive_item .
    PRAGMA_         reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    PPPRAGMA        reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    STATIC_ASSERT_  reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    RETURN          reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    CONTINUE        reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    BREAK           reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    GOTO            reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    FOR             reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    DO              reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    WHILE           reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    SWITCH          reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    IF              reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    DEFAULT         reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    CASE            reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    ID              reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    LBRACE          reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    LPAREN          reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    ALIGNOF_        reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    SIZEOF          reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    MINUSMINUS      reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    PLUSPLUS        reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    LNOT            reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    NOT             reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    MINUS           reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    PLUS            reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    TIMES           reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    AND             reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    OFFSETOF        reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    U32STRING_LITERAL reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    U16STRING_LITERAL reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    U8STRING_LITERAL reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    WSTRING_LITERAL reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    STRING_LITERAL  reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    U32CHAR_CONST   reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    U16CHAR_CONST   reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    U8CHAR_CONST    reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    WCHAR_CONST     reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    CHAR_CONST      reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    HEX_FLOAT_CONST reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    FLOAT_CONST     reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    INT_CONST_CHAR  reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    INT_CONST_BIN   reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    INT_CONST_HEX   reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    INT_CONST_OCT   reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    INT_CONST_DEC   reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)
    ;               reduce using rule 22 (_2_pppragma_directive_items -> _2_pppragma_directive_item .)


state 543

    (274) iteration_statement -> WHILE LPAREN expression . RPAREN pragmacomp_or_statement
    (281) expression -> expression . , assignment_expression
    RPAREN          shift and go to state 585
    ,               shift and go to state 384


state 544

    (268) selection_statement -> SWITCH LPAREN expression . RPAREN pragmacomp_or_statement
    (281) expression -> expression . , assignment_expression
    RPAREN          shift and go to state 586
    ,               shift and go to state 384


state 545

    (269) selection_statement -> IF LPAREN expression . RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> IF LPAREN expression . RPAREN pragmacomp_or_statement
    (281) expression -> expression . , assignment_expression
    RPAREN          shift and go to state 587
    ,               shift and go to state 384


state 546

    (265) labeled_statement -> DEFAULT : pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    RETURN          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    CONTINUE        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    BREAK           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    GOTO            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    FOR             reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    DO              reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    WHILE           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    SWITCH          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    IF              reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    DEFAULT         reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    CASE            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ID              reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    LBRACE          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    NORETURN_       reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INLINE          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    EXTERN          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    STATIC          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    REGISTER        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    AUTO            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    VOLATILE        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    RESTRICT        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    CONST           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    LPAREN          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT128          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    SIGNED          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    DOUBLE          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    FLOAT           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    LONG            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT             reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    SHORT           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    CHAR            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    BOOL_           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    VOID            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ENUM            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    TYPEID          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    SIZEOF          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    UNION           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    STRUCT          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    LNOT            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    NOT             reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    MINUS           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    PLUS            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    TIMES           reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    AND             reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ;               reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    RBRACE          reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)
    ELSE            reduce using rule 265 (labeled_statement -> DEFAULT : pragmacomp_or_statement .)


state 547

    (266) labeled_statement -> CASE constant_expression : . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    pragmacomp_or_statement        shift and go to state 588
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 548

    (185) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt . RPAREN
    RPAREN          shift and go to state 589


state 549

    (186) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list . RPAREN
    RPAREN          shift and go to state 590


state 550

    (187) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (190) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (289) assignment_expression_opt -> . assignment_expression
    (290) assignment_expression_opt -> . empty
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (393) empty -> .
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    TIMES           shift and go to state 591
    LPAREN          shift and go to state 229
    RBRACKET        reduce using rule 393 (empty -> .)
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression_opt      shift and go to state 592
    assignment_expression          shift and go to state 343
    empty                          shift and go to state 344
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 551

    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (200) type_qualifier_list_opt -> type_qualifier_list .
    STATIC          shift and go to state 593
    TIMES           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ALIGNOF_        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 200 (type_qualifier_list_opt -> type_qualifier_list .)


state 552

    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (200) type_qualifier_list_opt -> . type_qualifier_list
    (201) type_qualifier_list_opt -> . empty
    (194) type_qualifier_list -> . type_qualifier _13_type_qualifier_repeat
    (393) empty -> .
    (87) type_qualifier -> . ATOMIC_
    (88) type_qualifier -> . VOLATILE
    (89) type_qualifier -> . RESTRICT
    (90) type_qualifier -> . CONST
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    ATOMIC_         shift and go to state 81
    VOLATILE        shift and go to state 44
    RESTRICT        shift and go to state 45
    CONST           shift and go to state 46

    type_qualifier_list_opt        shift and go to state 594
    type_qualifier_list            shift and go to state 112
    empty                          shift and go to state 113
    type_qualifier                 shift and go to state 114

state 553

    (251) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .
    LPAREN          reduce using rule 251 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LBRACKET        reduce using rule 251 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    ,               reduce using rule 251 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 251 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 554

    (257) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .
    LPAREN          reduce using rule 257 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LBRACKET        reduce using rule 257 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    ,               reduce using rule 257 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 257 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 555

    (252) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN
    RPAREN          shift and go to state 595


state 556

    (254) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (337) unary_operator -> TIMES .
    RBRACKET        shift and go to state 596
    LPAREN          reduce using rule 337 (unary_operator -> TIMES .)
    ALIGNOF_        reduce using rule 337 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 337 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 337 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 337 (unary_operator -> TIMES .)
    LNOT            reduce using rule 337 (unary_operator -> TIMES .)
    NOT             reduce using rule 337 (unary_operator -> TIMES .)
    MINUS           reduce using rule 337 (unary_operator -> TIMES .)
    PLUS            reduce using rule 337 (unary_operator -> TIMES .)
    TIMES           reduce using rule 337 (unary_operator -> TIMES .)
    AND             reduce using rule 337 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 337 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 337 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 337 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 337 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 337 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 337 (unary_operator -> TIMES .)
    ID              reduce using rule 337 (unary_operator -> TIMES .)


state 557

    (256) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt . RBRACKET
    RBRACKET        shift and go to state 597


state 558

    (253) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .
    LPAREN          reduce using rule 253 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LBRACKET        reduce using rule 253 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    ,               reduce using rule 253 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 253 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 559

    (255) direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET
    RBRACKET        shift and go to state 598


state 560

    (172) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .
    LPAREN          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ALIGNAS_        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ATOMIC_         reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    NORETURN_       reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL_   reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT128          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMPLEX_        reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    BOOL_           reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ,               reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ;               reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    :               reduce using rule 172 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 561

    (173) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .
    LPAREN          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ALIGNAS_        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ATOMIC_         reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    NORETURN_       reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INLINE          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    THREAD_LOCAL_   reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EXTERN          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STATIC          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    REGISTER        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    AUTO            reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CONST           reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INT128          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SIGNED          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMPLEX_        reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    FLOAT           reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LONG            reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INT             reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SHORT           reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CHAR            reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    BOOL_           reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOID            reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ENUM            reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEID          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNION           reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STRUCT          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACE          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ,               reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ;               reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    :               reduce using rule 173 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 562

    (140) _11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_items _11_222c22_struct_declarator_item .
    ,               reduce using rule 140 (_11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_items _11_222c22_struct_declarator_item .)
    ;               reduce using rule 140 (_11_222c22_struct_declarator_items -> _11_222c22_struct_declarator_items _11_222c22_struct_declarator_item .)


state 563

    (142) _11_222c22_struct_declarator_item -> , struct_declarator .
    ,               reduce using rule 142 (_11_222c22_struct_declarator_item -> , struct_declarator .)
    ;               reduce using rule 142 (_11_222c22_struct_declarator_item -> , struct_declarator .)


state 564

    (146) struct_declarator -> declarator : constant_expression .
    ,               reduce using rule 146 (struct_declarator -> declarator : constant_expression .)
    ;               reduce using rule 146 (struct_declarator -> declarator : constant_expression .)


state 565

    (339) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . _18_222c22_optional brace_close
    (340) _18_222c22_optional -> . ,
    (341) _18_222c22_optional -> .
    ,               shift and go to state 600
    RBRACE          reduce using rule 341 (_18_222c22_optional -> .)

    _18_222c22_optional            shift and go to state 599

state 566

    (236) designation_opt -> empty .
    LBRACE          reduce using rule 236 (designation_opt -> empty .)
    LPAREN          reduce using rule 236 (designation_opt -> empty .)
    ALIGNOF_        reduce using rule 236 (designation_opt -> empty .)
    SIZEOF          reduce using rule 236 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 236 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 236 (designation_opt -> empty .)
    LNOT            reduce using rule 236 (designation_opt -> empty .)
    NOT             reduce using rule 236 (designation_opt -> empty .)
    MINUS           reduce using rule 236 (designation_opt -> empty .)
    PLUS            reduce using rule 236 (designation_opt -> empty .)
    TIMES           reduce using rule 236 (designation_opt -> empty .)
    AND             reduce using rule 236 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 236 (designation_opt -> empty .)
    U32STRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    U16STRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    U8STRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 236 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 236 (designation_opt -> empty .)
    U32CHAR_CONST   reduce using rule 236 (designation_opt -> empty .)
    U16CHAR_CONST   reduce using rule 236 (designation_opt -> empty .)
    U8CHAR_CONST    reduce using rule 236 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 236 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 236 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 236 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_CHAR  reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 236 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 236 (designation_opt -> empty .)
    ID              reduce using rule 236 (designation_opt -> empty .)


state 567

    (303) conditional_expression -> binary_expression CONDOP expression : conditional_expression .
    ,               reduce using rule 303 (conditional_expression -> binary_expression CONDOP expression : conditional_expression .)
    RPAREN          reduce using rule 303 (conditional_expression -> binary_expression CONDOP expression : conditional_expression .)
    ;               reduce using rule 303 (conditional_expression -> binary_expression CONDOP expression : conditional_expression .)
    RBRACKET        reduce using rule 303 (conditional_expression -> binary_expression CONDOP expression : conditional_expression .)
    :               reduce using rule 303 (conditional_expression -> binary_expression CONDOP expression : conditional_expression .)
    RBRACE          reduce using rule 303 (conditional_expression -> binary_expression CONDOP expression : conditional_expression .)


state 568

    (365) _20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_items _20_222c22_assignment_expression_item .
    ,               reduce using rule 365 (_20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_items _20_222c22_assignment_expression_item .)
    RPAREN          reduce using rule 365 (_20_222c22_assignment_expression_items -> _20_222c22_assignment_expression_items _20_222c22_assignment_expression_item .)


state 569

    (367) _20_222c22_assignment_expression_item -> , assignment_expression .
    ,               reduce using rule 367 (_20_222c22_assignment_expression_item -> , assignment_expression .)
    RPAREN          reduce using rule 367 (_20_222c22_assignment_expression_item -> , assignment_expression .)


state 570

    (353) primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator . RPAREN
    (359) offsetof_member_designator -> offsetof_member_designator . LBRACKET expression RBRACKET
    (360) offsetof_member_designator -> offsetof_member_designator . . identifier
    RPAREN          shift and go to state 601
    LBRACKET        shift and go to state 602
    .               shift and go to state 603


state 571

    (361) offsetof_member_designator -> identifier .
    RPAREN          reduce using rule 361 (offsetof_member_designator -> identifier .)
    LBRACKET        reduce using rule 361 (offsetof_member_designator -> identifier .)
    .               reduce using rule 361 (offsetof_member_designator -> identifier .)


state 572

    (223) initializer -> brace_open initializer_list , brace_close .
    ,               reduce using rule 223 (initializer -> brace_open initializer_list , brace_close .)
    ;               reduce using rule 223 (initializer -> brace_open initializer_list , brace_close .)
    RBRACE          reduce using rule 223 (initializer -> brace_open initializer_list , brace_close .)


state 573

    (226) initializer_list -> designation_opt initializer _16_222c22_designation_opt_initializer_repeat .
    ,               reduce using rule 226 (initializer_list -> designation_opt initializer _16_222c22_designation_opt_initializer_repeat .)
    RBRACE          reduce using rule 226 (initializer_list -> designation_opt initializer _16_222c22_designation_opt_initializer_repeat .)


state 574

    (227) _16_222c22_designation_opt_initializer_repeat -> _16_222c22_designation_opt_initializer_items .
    (229) _16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_items . _16_222c22_designation_opt_initializer_item
    (231) _16_222c22_designation_opt_initializer_item -> . , designation_opt initializer
  ! shift/reduce conflict for , resolved as shift
    RBRACE          reduce using rule 227 (_16_222c22_designation_opt_initializer_repeat -> _16_222c22_designation_opt_initializer_items .)
    ,               shift and go to state 576

    _16_222c22_designation_opt_initializer_item shift and go to state 604

state 575

    (230) _16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_item .
    ,               reduce using rule 230 (_16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_item .)
    RBRACE          reduce using rule 230 (_16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_item .)


state 576

    (231) _16_222c22_designation_opt_initializer_item -> , . designation_opt initializer
    (235) designation_opt -> . designation
    (236) designation_opt -> . empty
    (234) designation -> . designator_list EQUALS
    (393) empty -> .
    (237) designator_list -> . designator _17_designator_repeat
    (243) designator -> . . identifier
    (244) designator -> . LBRACKET constant_expression RBRACKET
    LBRACE          reduce using rule 393 (empty -> .)
    LPAREN          reduce using rule 393 (empty -> .)
    ALIGNOF_        reduce using rule 393 (empty -> .)
    SIZEOF          reduce using rule 393 (empty -> .)
    MINUSMINUS      reduce using rule 393 (empty -> .)
    PLUSPLUS        reduce using rule 393 (empty -> .)
    LNOT            reduce using rule 393 (empty -> .)
    NOT             reduce using rule 393 (empty -> .)
    MINUS           reduce using rule 393 (empty -> .)
    PLUS            reduce using rule 393 (empty -> .)
    TIMES           reduce using rule 393 (empty -> .)
    AND             reduce using rule 393 (empty -> .)
    OFFSETOF        reduce using rule 393 (empty -> .)
    U32STRING_LITERAL reduce using rule 393 (empty -> .)
    U16STRING_LITERAL reduce using rule 393 (empty -> .)
    U8STRING_LITERAL reduce using rule 393 (empty -> .)
    WSTRING_LITERAL reduce using rule 393 (empty -> .)
    STRING_LITERAL  reduce using rule 393 (empty -> .)
    U32CHAR_CONST   reduce using rule 393 (empty -> .)
    U16CHAR_CONST   reduce using rule 393 (empty -> .)
    U8CHAR_CONST    reduce using rule 393 (empty -> .)
    WCHAR_CONST     reduce using rule 393 (empty -> .)
    CHAR_CONST      reduce using rule 393 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 393 (empty -> .)
    FLOAT_CONST     reduce using rule 393 (empty -> .)
    INT_CONST_CHAR  reduce using rule 393 (empty -> .)
    INT_CONST_BIN   reduce using rule 393 (empty -> .)
    INT_CONST_HEX   reduce using rule 393 (empty -> .)
    INT_CONST_OCT   reduce using rule 393 (empty -> .)
    INT_CONST_DEC   reduce using rule 393 (empty -> .)
    ID              reduce using rule 393 (empty -> .)
    .               shift and go to state 437
    LBRACKET        shift and go to state 438

    designation_opt                shift and go to state 605
    designation                    shift and go to state 434
    empty                          shift and go to state 566
    designator_list                shift and go to state 435
    designator                     shift and go to state 436

state 577

    (240) _17_designator_items -> _17_designator_items _17_designator_item .
    .               reduce using rule 240 (_17_designator_items -> _17_designator_items _17_designator_item .)
    LBRACKET        reduce using rule 240 (_17_designator_items -> _17_designator_items _17_designator_item .)
    EQUALS          reduce using rule 240 (_17_designator_items -> _17_designator_items _17_designator_item .)


state 578

    (244) designator -> LBRACKET constant_expression RBRACKET .
    .               reduce using rule 244 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 244 (designator -> LBRACKET constant_expression RBRACKET .)
    EQUALS          reduce using rule 244 (designator -> LBRACKET constant_expression RBRACKET .)


state 579

    (180) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .
    LPAREN          reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ,               reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ;               reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    :               reduce using rule 180 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 580

    (181) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .
    LPAREN          reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ,               reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ;               reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    :               reduce using rule 181 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 581

    (271) iteration_statement -> FOR LPAREN declaration expression_opt . ; expression_opt RPAREN pragmacomp_or_statement
    ;               shift and go to state 606


state 582

    (272) iteration_statement -> FOR LPAREN expression_opt ; . expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression_opt                 shift and go to state 607
    expression                     shift and go to state 303
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 583

    (273) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN . expression RPAREN ;
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression                     shift and go to state 608
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 584

    (21) _2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .
    PRAGMA_         reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    PPPRAGMA        reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    STATIC_ASSERT_  reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    RETURN          reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    CONTINUE        reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    BREAK           reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    GOTO            reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    FOR             reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    DO              reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    WHILE           reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    SWITCH          reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    IF              reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    DEFAULT         reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    CASE            reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    ID              reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    LBRACE          reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    LPAREN          reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    ALIGNOF_        reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    SIZEOF          reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    MINUSMINUS      reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    PLUSPLUS        reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    LNOT            reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    NOT             reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    MINUS           reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    PLUS            reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    TIMES           reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    AND             reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    OFFSETOF        reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    U32STRING_LITERAL reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    U16STRING_LITERAL reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    U8STRING_LITERAL reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    WSTRING_LITERAL reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    STRING_LITERAL  reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    U32CHAR_CONST   reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    U16CHAR_CONST   reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    U8CHAR_CONST    reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    WCHAR_CONST     reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    CHAR_CONST      reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    HEX_FLOAT_CONST reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    FLOAT_CONST     reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    INT_CONST_CHAR  reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    INT_CONST_BIN   reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    INT_CONST_HEX   reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    INT_CONST_OCT   reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    INT_CONST_DEC   reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)
    ;               reduce using rule 21 (_2_pppragma_directive_items -> _2_pppragma_directive_items _2_pppragma_directive_item .)


state 585

    (274) iteration_statement -> WHILE LPAREN expression RPAREN . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    expression                     shift and go to state 303
    pragmacomp_or_statement        shift and go to state 609
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 586

    (268) selection_statement -> SWITCH LPAREN expression RPAREN . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    expression                     shift and go to state 303
    pragmacomp_or_statement        shift and go to state 610
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 587

    (269) selection_statement -> IF LPAREN expression RPAREN . statement ELSE pragmacomp_or_statement
    (270) selection_statement -> IF LPAREN expression RPAREN . pragmacomp_or_statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    expression                     shift and go to state 303
    statement                      shift and go to state 611
    pragmacomp_or_statement        shift and go to state 612
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    pppragma_directive_list        shift and go to state 458
    unified_string_literal         shift and go to state 146
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 588

    (266) labeled_statement -> CASE constant_expression : pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    RETURN          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    CONTINUE        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    BREAK           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    GOTO            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    FOR             reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    DO              reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    WHILE           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    SWITCH          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    IF              reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    DEFAULT         reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    CASE            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ID              reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    LBRACE          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    NORETURN_       reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INLINE          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    EXTERN          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    STATIC          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    REGISTER        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    AUTO            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    VOLATILE        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    RESTRICT        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    CONST           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    LPAREN          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT128          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    SIGNED          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    DOUBLE          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    FLOAT           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    LONG            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT             reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    SHORT           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    CHAR            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    BOOL_           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    VOID            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ENUM            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    TYPEID          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    SIZEOF          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    UNION           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    STRUCT          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    LNOT            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    NOT             reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    MINUS           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    PLUS            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    TIMES           reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    AND             reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ;               reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    RBRACE          reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)
    ELSE            reduce using rule 266 (labeled_statement -> CASE constant_expression : pragmacomp_or_statement .)


state 589

    (185) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .
    LPAREN          reduce using rule 185 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACKET        reduce using rule 185 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    ,               reduce using rule 185 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 185 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)


state 590

    (186) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .
    LPAREN          reduce using rule 186 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    LBRACKET        reduce using rule 186 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    ,               reduce using rule 186 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 186 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)


state 591

    (187) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (337) unary_operator -> TIMES .
    RBRACKET        shift and go to state 613
    LPAREN          reduce using rule 337 (unary_operator -> TIMES .)
    ALIGNOF_        reduce using rule 337 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 337 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 337 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 337 (unary_operator -> TIMES .)
    LNOT            reduce using rule 337 (unary_operator -> TIMES .)
    NOT             reduce using rule 337 (unary_operator -> TIMES .)
    MINUS           reduce using rule 337 (unary_operator -> TIMES .)
    PLUS            reduce using rule 337 (unary_operator -> TIMES .)
    TIMES           reduce using rule 337 (unary_operator -> TIMES .)
    AND             reduce using rule 337 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 337 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 337 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 337 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 337 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 337 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 337 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 337 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 337 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 337 (unary_operator -> TIMES .)
    ID              reduce using rule 337 (unary_operator -> TIMES .)


state 592

    (190) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET
    RBRACKET        shift and go to state 614


state 593

    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 615
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 594

    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    assignment_expression          shift and go to state 616
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 595

    (252) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .
    LPAREN          reduce using rule 252 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LBRACKET        reduce using rule 252 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    ,               reduce using rule 252 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 252 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 596

    (254) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .
    LPAREN          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LBRACKET        reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    ,               reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 597

    (256) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .
    LPAREN          reduce using rule 256 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 256 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    ,               reduce using rule 256 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 256 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 598

    (255) direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .
    LPAREN          reduce using rule 255 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 255 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ,               reduce using rule 255 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 255 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 599

    (339) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional . brace_close
    (392) brace_close -> . RBRACE
    RBRACE          shift and go to state 361

    brace_close                    shift and go to state 617

state 600

    (340) _18_222c22_optional -> , .
    RBRACE          reduce using rule 340 (_18_222c22_optional -> , .)


state 601

    (353) primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .
    MINUSMINUS      reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    PLUSPLUS        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    ARROW           reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    .               reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LPAREN          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LBRACKET        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    CONDOP          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LOR             reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LAND            reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    XOR             reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    OR              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    AND             reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    NE              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    EQ              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    GT              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    GE              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LE              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LT              reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LSHIFT          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    RSHIFT          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    MINUS           reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    PLUS            reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    MOD             reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    DIVIDE          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    TIMES           reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    ,               reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    RPAREN          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    OREQUAL         reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    ANDEQUAL        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    RSHIFTEQUAL     reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    LSHIFTEQUAL     reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    MINUSEQUAL      reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    PLUSEQUAL       reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    MODEQUAL        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    DIVEQUAL        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    TIMESEQUAL      reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    XOREQUAL        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    EQUALS          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    ;               reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    RBRACKET        reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    :               reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)
    RBRACE          reduce using rule 353 (primary_expression -> OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN .)


state 602

    (359) offsetof_member_designator -> offsetof_member_designator LBRACKET . expression RBRACKET
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression                     shift and go to state 618
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 603

    (360) offsetof_member_designator -> offsetof_member_designator . . identifier
    (368) identifier -> . ID
    ID              shift and go to state 142

    identifier                     shift and go to state 619

state 604

    (229) _16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_items _16_222c22_designation_opt_initializer_item .
    ,               reduce using rule 229 (_16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_items _16_222c22_designation_opt_initializer_item .)
    RBRACE          reduce using rule 229 (_16_222c22_designation_opt_initializer_items -> _16_222c22_designation_opt_initializer_items _16_222c22_designation_opt_initializer_item .)


state 605

    (231) _16_222c22_designation_opt_initializer_item -> , designation_opt . initializer
    (223) initializer -> . brace_open initializer_list , brace_close
    (224) initializer -> . brace_open initializer_list_opt brace_close
    (225) initializer -> . assignment_expression
    (391) brace_open -> . LBRACE
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    initializer                    shift and go to state 620
    brace_open                     shift and go to state 281
    assignment_expression          shift and go to state 282
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 606

    (271) iteration_statement -> FOR LPAREN declaration expression_opt ; . expression_opt RPAREN pragmacomp_or_statement
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    RPAREN          reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression_opt                 shift and go to state 621
    expression                     shift and go to state 303
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 607

    (272) iteration_statement -> FOR LPAREN expression_opt ; expression_opt . ; expression_opt RPAREN pragmacomp_or_statement
    ;               shift and go to state 622


state 608

    (273) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression . RPAREN ;
    (281) expression -> expression . , assignment_expression
    RPAREN          shift and go to state 623
    ,               shift and go to state 384


state 609

    (274) iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ID              reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    NORETURN_       reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT128          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    BOOL_           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ;               reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 274 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)


state 610

    (268) selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ID              reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    NORETURN_       reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT128          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    BOOL_           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ;               reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 268 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)


state 611

    (269) selection_statement -> IF LPAREN expression RPAREN statement . ELSE pragmacomp_or_statement
    (34) pragmacomp_or_statement -> statement .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 624
    STATIC_ASSERT_  reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PRAGMA_         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PPPRAGMA        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    RETURN          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CONTINUE        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    BREAK           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    GOTO            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    FOR             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    DO              reduce using rule 34 (pragmacomp_or_statement -> statement .)
    WHILE           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SWITCH          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    IF              reduce using rule 34 (pragmacomp_or_statement -> statement .)
    DEFAULT         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CASE            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ID              reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LBRACE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ALIGNAS_        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ATOMIC_         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    NORETURN_       reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INLINE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    THREAD_LOCAL_   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    TYPEDEF         reduce using rule 34 (pragmacomp_or_statement -> statement .)
    EXTERN          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STATIC          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    REGISTER        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    AUTO            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    VOLATILE        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    RESTRICT        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CONST           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LPAREN          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT128          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    UNSIGNED        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SIGNED          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    COMPLEX_        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    DOUBLE          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    FLOAT           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LONG            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SHORT           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CHAR            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    BOOL_           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    VOID            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ENUM            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    TYPEID          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ALIGNOF_        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    SIZEOF          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    MINUSMINUS      reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PLUSPLUS        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    UNION           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STRUCT          reduce using rule 34 (pragmacomp_or_statement -> statement .)
    LNOT            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    NOT             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    MINUS           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    PLUS            reduce using rule 34 (pragmacomp_or_statement -> statement .)
    TIMES           reduce using rule 34 (pragmacomp_or_statement -> statement .)
    AND             reduce using rule 34 (pragmacomp_or_statement -> statement .)
    OFFSETOF        reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U32STRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U16STRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U8STRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    WSTRING_LITERAL reduce using rule 34 (pragmacomp_or_statement -> statement .)
    STRING_LITERAL  reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U32CHAR_CONST   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U16CHAR_CONST   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    U8CHAR_CONST    reduce using rule 34 (pragmacomp_or_statement -> statement .)
    WCHAR_CONST     reduce using rule 34 (pragmacomp_or_statement -> statement .)
    CHAR_CONST      reduce using rule 34 (pragmacomp_or_statement -> statement .)
    HEX_FLOAT_CONST reduce using rule 34 (pragmacomp_or_statement -> statement .)
    FLOAT_CONST     reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_CHAR  reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_BIN   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_HEX   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_OCT   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    INT_CONST_DEC   reduce using rule 34 (pragmacomp_or_statement -> statement .)
    ;               reduce using rule 34 (pragmacomp_or_statement -> statement .)
    RBRACE          reduce using rule 34 (pragmacomp_or_statement -> statement .)


state 612

    (270) selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ID              reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    NORETURN_       reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT128          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    BOOL_           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ;               reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 270 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)


state 613

    (187) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .
    LPAREN          reduce using rule 187 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACKET        reduce using rule 187 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ,               reduce using rule 187 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 187 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 614

    (190) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .
    LPAREN          reduce using rule 190 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 190 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ,               reduce using rule 190 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 190 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 615

    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET
    RBRACKET        shift and go to state 625


state 616

    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET
    RBRACKET        shift and go to state 626


state 617

    (339) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .
    MINUSMINUS      reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    PLUSPLUS        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    ARROW           reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    .               reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LPAREN          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LBRACKET        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    CONDOP          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LOR             reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LAND            reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    XOR             reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    OR              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    AND             reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    NE              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    EQ              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    GT              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    GE              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LE              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LT              reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LSHIFT          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    RSHIFT          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    MINUS           reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    PLUS            reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    MOD             reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    DIVIDE          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    TIMES           reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    ,               reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    RPAREN          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    OREQUAL         reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    ANDEQUAL        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    RSHIFTEQUAL     reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    LSHIFTEQUAL     reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    MINUSEQUAL      reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    PLUSEQUAL       reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    MODEQUAL        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    DIVEQUAL        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    TIMESEQUAL      reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    XOREQUAL        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    EQUALS          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    ;               reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    RBRACKET        reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    :               reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)
    RBRACE          reduce using rule 339 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close .)


state 618

    (359) offsetof_member_designator -> offsetof_member_designator LBRACKET expression . RBRACKET
    (281) expression -> expression . , assignment_expression
    RBRACKET        shift and go to state 627
    ,               shift and go to state 384


state 619

    (360) offsetof_member_designator -> offsetof_member_designator . identifier .
    RPAREN          reduce using rule 360 (offsetof_member_designator -> offsetof_member_designator . identifier .)
    LBRACKET        reduce using rule 360 (offsetof_member_designator -> offsetof_member_designator . identifier .)
    .               reduce using rule 360 (offsetof_member_designator -> offsetof_member_designator . identifier .)


state 620

    (231) _16_222c22_designation_opt_initializer_item -> , designation_opt initializer .
    ,               reduce using rule 231 (_16_222c22_designation_opt_initializer_item -> , designation_opt initializer .)
    RBRACE          reduce using rule 231 (_16_222c22_designation_opt_initializer_item -> , designation_opt initializer .)


state 621

    (271) iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt . RPAREN pragmacomp_or_statement
    RPAREN          shift and go to state 628


state 622

    (272) iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; . expression_opt RPAREN pragmacomp_or_statement
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    RPAREN          reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165
    ID              shift and go to state 142

    expression_opt                 shift and go to state 629
    expression                     shift and go to state 303
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    unified_string_literal         shift and go to state 146
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 623

    (273) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN . ;
    ;               shift and go to state 630


state 624

    (269) selection_statement -> IF LPAREN expression RPAREN statement ELSE . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    expression                     shift and go to state 303
    statement                      shift and go to state 457
    pragmacomp_or_statement        shift and go to state 631
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression_opt                 shift and go to state 309
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 625

    (188) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .
    LPAREN          reduce using rule 188 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 188 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ,               reduce using rule 188 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 188 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 626

    (189) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .
    LPAREN          reduce using rule 189 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 189 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ,               reduce using rule 189 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 189 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 627

    (359) offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .
    RPAREN          reduce using rule 359 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 359 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)
    .               reduce using rule 359 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)


state 628

    (271) iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    expression_opt                 shift and go to state 309
    pragmacomp_or_statement        shift and go to state 632
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 629

    (272) iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt . RPAREN pragmacomp_or_statement
    RPAREN          shift and go to state 633


state 630

    (273) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .
    STATIC_ASSERT_  reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    PRAGMA_         reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    PPPRAGMA        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    RETURN          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    CONTINUE        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    BREAK           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    GOTO            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    FOR             reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    DO              reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    WHILE           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    SWITCH          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    IF              reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    DEFAULT         reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    CASE            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ID              reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    LBRACE          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ALIGNAS_        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ATOMIC_         reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    NORETURN_       reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INLINE          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    THREAD_LOCAL_   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    TYPEDEF         reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    EXTERN          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    STATIC          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    REGISTER        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    AUTO            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    VOLATILE        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    RESTRICT        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    CONST           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    LPAREN          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT128          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    UNSIGNED        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    SIGNED          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    COMPLEX_        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    DOUBLE          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    FLOAT           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    LONG            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT             reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    SHORT           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    CHAR            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    BOOL_           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    VOID            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ENUM            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    TYPEID          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ALIGNOF_        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    SIZEOF          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    MINUSMINUS      reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    PLUSPLUS        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    UNION           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    STRUCT          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    LNOT            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    NOT             reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    MINUS           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    PLUS            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    TIMES           reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    AND             reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    OFFSETOF        reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    U32STRING_LITERAL reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    U16STRING_LITERAL reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    U8STRING_LITERAL reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    WSTRING_LITERAL reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    STRING_LITERAL  reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    U32CHAR_CONST   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    U16CHAR_CONST   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    U8CHAR_CONST    reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    WCHAR_CONST     reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    CHAR_CONST      reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    HEX_FLOAT_CONST reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    FLOAT_CONST     reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT_CONST_CHAR  reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT_CONST_BIN   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT_CONST_HEX   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT_CONST_OCT   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    INT_CONST_DEC   reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ;               reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    RBRACE          reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)
    ELSE            reduce using rule 273 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ; .)


state 631

    (269) selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RETURN          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CONTINUE        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    BREAK           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    GOTO            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FOR             reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DO              reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WHILE           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SWITCH          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    IF              reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DEFAULT         reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CASE            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ID              reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LBRACE          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    NORETURN_       reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INLINE          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    EXTERN          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STATIC          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    REGISTER        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    AUTO            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    VOLATILE        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RESTRICT        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CONST           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LPAREN          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT128          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SIGNED          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DOUBLE          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FLOAT           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LONG            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT             reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SHORT           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CHAR            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    BOOL_           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    VOID            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ENUM            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TYPEID          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SIZEOF          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    UNION           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STRUCT          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LNOT            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    NOT             reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    MINUS           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PLUS            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TIMES           reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    AND             reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ;               reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RBRACE          reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ELSE            reduce using rule 269 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)


state 632

    (271) iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ID              reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    NORETURN_       reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT128          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    BOOL_           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ;               reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 271 (iteration_statement -> FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)


state 633

    (272) iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN . pragmacomp_or_statement
    (34) pragmacomp_or_statement -> . statement
    (35) pragmacomp_or_statement -> . pppragma_directive_list statement
    (26) statement -> . static_assert
    (27) statement -> . pppragma_directive
    (28) statement -> . jump_statement
    (29) statement -> . iteration_statement
    (30) statement -> . selection_statement
    (31) statement -> . compound_statement
    (32) statement -> . expression_statement
    (33) statement -> . labeled_statement
    (18) pppragma_directive_list -> . pppragma_directive _2_pppragma_directive_repeat
    (11) static_assert -> . STATIC_ASSERT_ LPAREN constant_expression _1_222c22_unified_string_literal_optional RPAREN
    (15) pppragma_directive -> . PRAGMA_ LPAREN unified_string_literal RPAREN
    (16) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (17) pppragma_directive -> . PPPRAGMA
    (275) jump_statement -> . RETURN ;
    (276) jump_statement -> . RETURN expression ;
    (277) jump_statement -> . CONTINUE ;
    (278) jump_statement -> . BREAK ;
    (279) jump_statement -> . GOTO ID ;
    (271) iteration_statement -> . FOR LPAREN declaration expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (272) iteration_statement -> . FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement
    (273) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN ;
    (274) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (268) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (269) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (270) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (264) compound_statement -> . brace_open block_item_list_opt brace_close
    (280) expression_statement -> . expression_opt ;
    (265) labeled_statement -> . DEFAULT : pragmacomp_or_statement
    (266) labeled_statement -> . CASE constant_expression : pragmacomp_or_statement
    (267) labeled_statement -> . ID : pragmacomp_or_statement
    (391) brace_open -> . LBRACE
    (283) expression_opt -> . expression
    (284) expression_opt -> . empty
    (281) expression -> . expression , assignment_expression
    (282) expression -> . assignment_expression
    (393) empty -> .
    (286) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (287) assignment_expression -> . conditional_expression
    (288) assignment_expression -> . LPAREN compound_statement RPAREN
    (326) unary_expression -> . ALIGNOF_ LPAREN type_name RPAREN
    (327) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (328) unary_expression -> . SIZEOF unary_expression
    (329) unary_expression -> . unary_operator cast_expression
    (330) unary_expression -> . MINUSMINUS unary_expression
    (331) unary_expression -> . PLUSPLUS unary_expression
    (332) unary_expression -> . postfix_expression
    (303) conditional_expression -> . binary_expression CONDOP expression : conditional_expression
    (304) conditional_expression -> . binary_expression
    (333) unary_operator -> . LNOT
    (334) unary_operator -> . NOT
    (335) unary_operator -> . MINUS
    (336) unary_operator -> . PLUS
    (337) unary_operator -> . TIMES
    (338) unary_operator -> . AND
    (339) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list _18_222c22_optional brace_close
    (342) postfix_expression -> . postfix_expression MINUSMINUS
    (343) postfix_expression -> . postfix_expression PLUSPLUS
    (344) postfix_expression -> . postfix_expression ARROW TYPEID
    (345) postfix_expression -> . postfix_expression ARROW ID
    (346) postfix_expression -> . postfix_expression . TYPEID
    (347) postfix_expression -> . postfix_expression . ID
    (348) postfix_expression -> . postfix_expression LPAREN _19_argument_expression_list_optional RPAREN
    (351) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (352) postfix_expression -> . primary_expression
    (305) binary_expression -> . binary_expression LOR binary_expression
    (306) binary_expression -> . binary_expression LAND binary_expression
    (307) binary_expression -> . binary_expression XOR binary_expression
    (308) binary_expression -> . binary_expression OR binary_expression
    (309) binary_expression -> . binary_expression AND binary_expression
    (310) binary_expression -> . binary_expression NE binary_expression
    (311) binary_expression -> . binary_expression EQ binary_expression
    (312) binary_expression -> . binary_expression GT binary_expression
    (313) binary_expression -> . binary_expression GE binary_expression
    (314) binary_expression -> . binary_expression LE binary_expression
    (315) binary_expression -> . binary_expression LT binary_expression
    (316) binary_expression -> . binary_expression LSHIFT binary_expression
    (317) binary_expression -> . binary_expression RSHIFT binary_expression
    (318) binary_expression -> . binary_expression MINUS binary_expression
    (319) binary_expression -> . binary_expression PLUS binary_expression
    (320) binary_expression -> . binary_expression MOD binary_expression
    (321) binary_expression -> . binary_expression DIVIDE binary_expression
    (322) binary_expression -> . binary_expression TIMES binary_expression
    (323) binary_expression -> . cast_expression
    (353) primary_expression -> . OFFSETOF LPAREN type_name , offsetof_member_designator RPAREN
    (354) primary_expression -> . LPAREN expression RPAREN
    (355) primary_expression -> . unified_wstring_literal
    (356) primary_expression -> . unified_string_literal
    (357) primary_expression -> . constant
    (358) primary_expression -> . identifier
    (324) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (325) cast_expression -> . unary_expression
    (383) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL
    (384) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (385) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (386) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (387) unified_wstring_literal -> . U32STRING_LITERAL
    (388) unified_wstring_literal -> . U16STRING_LITERAL
    (389) unified_wstring_literal -> . U8STRING_LITERAL
    (390) unified_wstring_literal -> . WSTRING_LITERAL
    (381) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (382) unified_string_literal -> . STRING_LITERAL
    (369) constant -> . U32CHAR_CONST
    (370) constant -> . U16CHAR_CONST
    (371) constant -> . U8CHAR_CONST
    (372) constant -> . WCHAR_CONST
    (373) constant -> . CHAR_CONST
    (374) constant -> . HEX_FLOAT_CONST
    (375) constant -> . FLOAT_CONST
    (376) constant -> . INT_CONST_CHAR
    (377) constant -> . INT_CONST_BIN
    (378) constant -> . INT_CONST_HEX
    (379) constant -> . INT_CONST_OCT
    (380) constant -> . INT_CONST_DEC
    (368) identifier -> . ID
    STATIC_ASSERT_  shift and go to state 11
    PRAGMA_         shift and go to state 13
    PPPRAGMA        shift and go to state 14
    RETURN          shift and go to state 302
    CONTINUE        shift and go to state 304
    BREAK           shift and go to state 305
    GOTO            shift and go to state 306
    FOR             shift and go to state 308
    DO              shift and go to state 310
    WHILE           shift and go to state 311
    SWITCH          shift and go to state 312
    IF              shift and go to state 313
    DEFAULT         shift and go to state 314
    CASE            shift and go to state 315
    ID              shift and go to state 307
    LBRACE          shift and go to state 120
    ;               reduce using rule 393 (empty -> .)
    LPAREN          shift and go to state 229
    ALIGNOF_        shift and go to state 134
    SIZEOF          shift and go to state 135
    MINUSMINUS      shift and go to state 137
    PLUSPLUS        shift and go to state 138
    LNOT            shift and go to state 140
    NOT             shift and go to state 141
    MINUS           shift and go to state 129
    PLUS            shift and go to state 130
    TIMES           shift and go to state 131
    AND             shift and go to state 128
    OFFSETOF        shift and go to state 144
    U32STRING_LITERAL shift and go to state 149
    U16STRING_LITERAL shift and go to state 150
    U8STRING_LITERAL shift and go to state 151
    WSTRING_LITERAL shift and go to state 152
    STRING_LITERAL  shift and go to state 153
    U32CHAR_CONST   shift and go to state 154
    U16CHAR_CONST   shift and go to state 155
    U8CHAR_CONST    shift and go to state 156
    WCHAR_CONST     shift and go to state 157
    CHAR_CONST      shift and go to state 158
    HEX_FLOAT_CONST shift and go to state 159
    FLOAT_CONST     shift and go to state 160
    INT_CONST_CHAR  shift and go to state 161
    INT_CONST_BIN   shift and go to state 162
    INT_CONST_HEX   shift and go to state 163
    INT_CONST_OCT   shift and go to state 164
    INT_CONST_DEC   shift and go to state 165

    expression_opt                 shift and go to state 309
    pragmacomp_or_statement        shift and go to state 634
    statement                      shift and go to state 457
    pppragma_directive_list        shift and go to state 458
    static_assert                  shift and go to state 294
    pppragma_directive             shift and go to state 459
    jump_statement                 shift and go to state 296
    iteration_statement            shift and go to state 297
    selection_statement            shift and go to state 298
    compound_statement             shift and go to state 299
    expression_statement           shift and go to state 300
    labeled_statement              shift and go to state 301
    unified_string_literal         shift and go to state 146
    expression                     shift and go to state 303
    brace_open                     shift and go to state 180
    empty                          shift and go to state 447
    assignment_expression          shift and go to state 232
    unary_expression               shift and go to state 233
    conditional_expression         shift and go to state 234
    unary_operator                 shift and go to state 136
    cast_expression                shift and go to state 132
    postfix_expression             shift and go to state 139
    binary_expression              shift and go to state 127
    primary_expression             shift and go to state 143
    unified_wstring_literal        shift and go to state 145
    constant                       shift and go to state 147
    identifier                     shift and go to state 148

state 634

    (272) iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .
    STATIC_ASSERT_  reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PRAGMA_         reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ID              reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ALIGNAS_        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ATOMIC_         reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    NORETURN_       reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    THREAD_LOCAL_   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT128          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    COMPLEX_        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    BOOL_           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ALIGNOF_        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ;               reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 272 (iteration_statement -> FOR LPAREN expression_opt ; expression_opt ; expression_opt RPAREN pragmacomp_or_statement .)


Conflicts:

shift/reduce conflict for ATOMIC_ in state 20 resolved as shift
shift/reduce conflict for ATOMIC_ in state 23 resolved as shift
shift/reduce conflict for ATOMIC_ in state 24 resolved as shift
shift/reduce conflict for ATOMIC_ in state 25 resolved as shift
shift/reduce conflict for ALIGNAS_ in state 28 resolved as shift
shift/reduce conflict for ATOMIC_ in state 28 resolved as shift
shift/reduce conflict for NORETURN_ in state 28 resolved as shift
shift/reduce conflict for INLINE in state 28 resolved as shift
shift/reduce conflict for THREAD_LOCAL_ in state 28 resolved as shift
shift/reduce conflict for TYPEDEF in state 28 resolved as shift
shift/reduce conflict for EXTERN in state 28 resolved as shift
shift/reduce conflict for STATIC in state 28 resolved as shift
shift/reduce conflict for REGISTER in state 28 resolved as shift
shift/reduce conflict for AUTO in state 28 resolved as shift
shift/reduce conflict for VOLATILE in state 28 resolved as shift
shift/reduce conflict for RESTRICT in state 28 resolved as shift
shift/reduce conflict for CONST in state 28 resolved as shift
shift/reduce conflict for LPAREN in state 36 resolved as shift
shift/reduce conflict for ATOMIC_ in state 103 resolved as shift
shift/reduce conflict for ATOMIC_ in state 114 resolved as shift
shift/reduce conflict for , in state 197 resolved as shift
shift/reduce conflict for ATOMIC_ in state 206 resolved as shift
shift/reduce conflict for , in state 327 resolved as shift
shift/reduce conflict for TIMES in state 339 resolved as shift
shift/reduce conflict for PRAGMA_ in state 459 resolved as shift
shift/reduce conflict for PPPRAGMA in state 459 resolved as shift
shift/reduce conflict for , in state 520 resolved as shift
shift/reduce conflict for PRAGMA_ in state 541 resolved as shift
shift/reduce conflict for PPPRAGMA in state 541 resolved as shift
shift/reduce conflict for , in state 574 resolved as shift
shift/reduce conflict for ELSE in state 611 resolved as shift
reduce/reduce conflict in state 28 resolved using rule type_specifier -> atomic_specifier
rejected rule (empty -> <empty>) in state 28
reduce/reduce conflict in state 459 resolved using rule statement -> pppragma_directive
rejected rule (_2_pppragma_directive_repeat -> <empty>) in state 459
Rule (_2_pppragma_directive_repeat -> <empty>) is never reduced